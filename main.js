(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],r=[],a=[],o=(a,o)=>{const s=e.indexOf(a),n=t.indexOf(o);return-1===s||-1===n?null:r[n][s]},s=(a,o,s,n)=>{const i=e.indexOf(a),l=t.indexOf(o);return-1===i||-1===l?null:(r[l][i].status=s,n&&(r[l][i].takenBy=n),r[l][i])};return{generateArray:()=>{for(let a=0;a<10;a+=1){r[a]=[];for(let o=0;o<10;o+=1)r[a][o]={col:e[o],row:t[a],status:"empty",takenBy:null}}},clearBoard:()=>{r.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),a.length=0},getCell:o,setCell:s,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const r=a.indexOf(t);null===t.takenBy&&-1!==r&&a.splice(r,1)}))},placeShip:(r,n,i,l)=>{const c="horizontal"===l,d=c?e:t,u=d.indexOf(c?n:i);r.isVertical="horizontal"!==l;let h=[];if(u<0||u+r.size>d.length)return!1;for(let e=0;e<r.size;e+=1){const t=c?d[u+e]:n,a=c?i:d[u+e];if("empty"!==o(t,a).status)return!1;s(t,a,"taken",r),h.push(o(t,a))}return a.push(h[0]),!0},receiveAttack:(e,t)=>{const r=o(e,t);return"taken"===r.status?(r.takenBy.hit(),s(e,t,"hit"),r.status):"empty"===r.status||"reserved"===r.status?(s(e,t,"miss"),r.status):null},receiveAround:(e,t)=>{const r=o(e,t);return"empty"===r.status?(s(e,t,"reserved"),r.status):null},reserveSpace:(e,t,r)=>{const a=e.getCell(t,r);if(a&&a.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===a.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const a=String.fromCharCode(t.col.charCodeAt(0)+r.col),o=(Number(t.row)+r.row).toString();e.getCell(a,o)&&e.receiveAround(a,o)}))}))}},reserveSpaceForAll:function(e){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,r)=>{const a=e.getCell(t,r);if(a&&a.takenBy&&a.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===a.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const a=String.fromCharCode(t.col.charCodeAt(0)+r.col),o=(Number(t.row)+r.row).toString();e.getCell(a,o)&&e.receiveAttack(a,o)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:r,canBePlaced:(r,a,s,n)=>{const i="horizontal"===n,l=i?e:t,c=l.indexOf(i?a:s);if(c<0||c+r>l.length)return!1;const d=[];for(let e=0;e<r;e+=1){const t=i?l[c+e]:a,r=i?s:l[c+e];d.push("empty"===o(t,r).status)}return d.every((e=>!0===e))},shipsPlaced:a,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&s(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},r=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,r=null,a=1,o=!0,s=!0;const n=(e,t,c,d)=>{if(d.row===c)if(o){a=1;let s=String.fromCharCode(t.charCodeAt(0)+a);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)a+=1,s=String.fromCharCode(t.charCodeAt(0)+a);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(r),l({col:s,row:c})),a+=1):(a=1,o=!1,n(e,s,c,d))}else{a=1;let s=String.fromCharCode(t.charCodeAt(0)-a);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)a+=1,s=String.fromCharCode(t.charCodeAt(0)-a);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(r),l({col:s,row:c})),a+=1):(a=1,o=!0,n(e,s,c,d))}else if(d.col===t)if(s){a=1;let o=(Number(c)+a).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)a+=1,o=(Number(c)+a).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status&&(i(r),l({col:t,row:o})),a+=1):(a=1,s=!1,n(e,t,o,d))}else{a=1;let o=(Number(c)-a).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)a+=1,o=(Number(c)-a).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status&&(i(r),l({col:t,row:o})),a+=1):(a=1,s=!0,n(e,t,o,d))}},i=e=>{t=e},l=e=>{r=e};return{attack:(e,t,a)=>{if("hit"!==e.getCell(t,a).status&&"miss"!==e.getCell(t,a).status){let o=e.receiveAttack(t,a);return"hit"===o&&(i(r),l({col:t,row:a})),o}return"already shot"},randomAttack:t=>{let a,o;do{a=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(a,o).status||"miss"===t.getCell(a,o).status);if("hit"!==t.getCell(a,o).status&&"miss"!==t.getCell(a,o).status){const e=t.receiveAttack(a,o);return"hit"===t.getCell(a,o).status&&(i(r),l({col:a,row:o})),{result:e,col:a,row:o}}return{result:"already shot",col:a,row:o}},followupAttack:(e,t,o)=>{const s=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((r=>{const a=String.fromCharCode(t.charCodeAt(0)+r.col),s=(Number(o)+r.row).toString(),n=e.getCell(a,s);return!(!n||"miss"===n.status||"hit"===n.status)}));if(s.length>0){const n=s[Math.floor(Math.random()*s.length)],c=String.fromCharCode(t.charCodeAt(0)+n.col),d=(Number(o)+n.row).toString();e.receiveAttack(c,d),a=1,"hit"===e.getCell(c,d).status&&(i(r),l({col:c,row:d}))}},finishingAttack:n,prevHit:t,lastHit:r,getPrevHit:()=>t,getLastHit:()=>r,setPrevHit:i,setLastHit:l}};var a=function(e,t,r,a){return new(r||(r=Promise))((function(o,s){function n(e){try{l(a.next(e))}catch(e){s(e)}}function i(e){try{l(a.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};const o=(e,t,r)=>{const o=document.querySelector("#firstBoard"),s=document.querySelector("#secondBoard"),n=o.querySelectorAll(".cell"),l=s.querySelectorAll(".cell");let c,u,h,m,f=0,g=0,v=[];const p={carrier:r[0],battleship:r[1],destroyer:r[2],submarine:r[3],patrolboat:r[4]};let y=null;const S=document.querySelectorAll(".draggable");function w(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const C=[...w(n),...w(l)];function B(e,t){return e.slice(Math.min(e.length-t,0))}function b(r){const a=r.target;let o;const s=a.closest(".board").id;return"firstBoard"===s&&(o=e),"secondBoard"===s&&(o=t),{target:a,gameboard:o}}function k(e,t){return c=t.getAttribute("data-name"),u=Number(t.getAttribute("data-size")),f=e.offsetX,g=e.offsetY,h=p[c],m=h.isVertical?"vertical":"horizontal",{shipName:c,shipObj:h}}function L(){v.forEach((e=>e.classList.remove("highlight")))}function A(e){return"firstBoard"===e||"secondBoard"===e}function P(e){const{gameboard:t}=b(e);t.removeReservedSpace(t),function(e,t){const{target:r}=b(t),a=r.getAttribute("data-name");let o=e.shipsPlaced.filter((e=>a!==e.takenBy.name.toLowerCase()));o.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))}(t,e),d.renew(),i.setInitMessage()}function E(e){return a(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const{target:t,gameboard:r}=b(e);t.style.visibility="hidden",k(e,t),r.removeShip(h,r),i.clearShip(h,r)}))}function M(e){return function(t){const{target:r}=b(t),a=r.closest(".board").id;if(A(a)&&(t.preventDefault(),h)){const r=function(e,t,r){const{target:a}=b(r);return e-(t.isVertical?10*Math.floor(g/a.offsetHeight):Math.floor(f/a.offsetWidth))}(e,h,t),o=function(e){return"firstBoard"===e?n:l}(a),s=[];!function(e,t,r,a){for(let o=0;o<u;o++){let s=e.isVertical?t+10*o:t+o;r[s]&&(a.push(r[s]),v.push(r[s]))}}(h,r,o,s),function(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===u&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}(s)&&(!function(e){e.forEach((e=>{e.classList.add("highlight")}))}(s),y||(y=B(v,u)))}}}function q(){L(),v.length=0}function x(e){L();const t=B(v,u),{target:r,gameboard:a}=b(e);A(r.closest(".board").id)&&h&&null!==y&&function(e,t,r,a){e.canBePlaced(t.size,r[0].dataset.col,r[0].dataset.row,a)?(e.placeShip(t,r[0].dataset.col,r[0].dataset.row,a),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(t,y[0].dataset.col,y[0].dataset.row,a),e.reserveSpace(e,y[0].dataset.col,y[0].dataset.row))}(a,h,t,m),a.removeReservedSpace(a),a.reserveSpaceForAll(a),d.renew(),i.canBeStarted(),i.setStartMessage(),y=null}function z(r){const a=r.target;a.style.visibility="visible",function(r,a){if(0===v.length){const o=r.closest(".board");if(o){let{gameboard:r}=b(a);"firstBoard"===o.id?r=e:"secondBoard"===o.id&&(r=t),r&&y&&r.canBePlaced(h.size,y[0].dataset.col,y[0].dataset.row,m)&&(r.placeShip(h,y[0].dataset.col,y[0].dataset.row,m),r.reserveSpace(r,y[0].dataset.col,y[0].dataset.row),d.renew())}}}(a,r),i.canBeStarted()&&i.fillCells("second"),i.setStartMessage()}function V(e){const{gameboard:t}=b(e);t.reserveSpaceForAll(t),d.renew(),i.setStartMessage()}function G(e){e.preventDefault();const{target:t,gameboard:r}=b(e),{shipName:a,shipObj:o}=k(e,t),s=r.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===a));r.removeShip(o,r),r.removeReservedSpace(r),r.reserveSpaceForAll(r),o.rotate(),m=o.isVertical?"vertical":"horizontal",r.canBePlaced(o.size,s[0].col,s[0].row,m)||(o.rotate(),m=o.isVertical?"vertical":"horizontal"),r.placeShip(o,s[0].col,s[0].row,m),r.reserveSpaceForAll(r),d.renew(),i.canBeStarted()&&i.fillCells("second")}function H(e){e.preventDefault()}function O(e){e.forEach(((e,t)=>{e.addEventListener("dragover",M(t)),e.addEventListener("dragleave",q),e.addEventListener("drop",x)}))}O(n),O(l),S.forEach((e=>{e.addEventListener("mousedown",P),e.addEventListener("dragstart",E),e.addEventListener("dragend",z),e.addEventListener("mouseup",V),e.addEventListener("contextmenu",G),C.forEach((e=>e.addEventListener("contextmenu",H)))}))};var s=function(e,t,r,a){return new(r||(r=Promise))((function(o,s){function n(e){try{l(a.next(e))}catch(e){s(e)}}function i(e){try{l(a.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};const n=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),r=document.querySelector("#playerVsComputer"),a=document.querySelector("#newGame"),n=document.querySelector("#computerVsComputer"),i=document.querySelector("#start"),l=document.querySelector("#randomPlacement"),c=[r,a,n,i,l],u=document.getElementsByName("speed");let h=1e3;const m=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const r=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(r)}))}))},f=e=>e===d.humanGameboard?"firstBoard":e===d.computerGameboard?"secondBoard":void 0,g=e=>{const t=document.querySelector(`#${f(e)}`);t.innerHTML="",m(e,t)},v=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},p=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===r&&s(void 0,void 0,void 0,(function*(){L("first"),y(!0),c.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,E()))),c.forEach((e=>e.disabled=!1)),y(!1),C(),B()})),e===n&&s(void 0,void 0,void 0,(function*(){y(!0),c.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,E()))),c.forEach((e=>e.disabled=!1)),y(!1),i.disabled=!0,l.disabled=!0,n.disabled=!0})),d.restart(),k())},y=e=>{document.documentElement.classList.toggle("wait",e)},S=()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},w=(e,t,r,a)=>{const o=document.querySelector("html"),s=parseFloat(window.getComputedStyle(o,null).getPropertyValue("font-size"));a?(e.style.width=r/s+"rem",e.style.height=t*(r/s)+"rem"):(e.style.width=t*(r/s)+"rem",e.style.height=r/s+"rem")},C=()=>5===d.humanGameboard.shipsPlaced.length&&0===d.computerGameboard.shipsPlaced.length?(L("second"),i.disabled=!1,!0):(i.disabled=!0,!1),B=()=>{const t="Use 'Random Placement' button, then press Start!",r="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==r&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=r))},b=()=>{C()&&(e.textContent="You can now begin the game. Press start!")},k=()=>{e.textContent="Restarting..."},L=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},A=e=>s(void 0,void 0,void 0,(function*(){let t;y(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const r=t.querySelectorAll(".cell");r.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{r.forEach(((t,a)=>{setTimeout((()=>{t.classList.remove("filled"),a===r.length-1&&e()}),E()/120*a)}))})),y(!1)}));r.addEventListener("click",(()=>{L("first"),p(r,n);document.querySelector("#secondBoard").classList.remove("start"),i.disabled=!0,r.disabled=!0,A("first")})),n.addEventListener("click",(()=>{L("first"),L("second"),p(n,r);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),i.disabled=!0,l.disabled=!0,n.disabled=!0,Promise.all([A("first"),A("second")])})),a.addEventListener("click",(()=>s(void 0,void 0,void 0,(function*(){S(),L("first"),n.classList.contains("selected")&&(L("second"),i.disabled=!0,l.disabled=!0,n.disabled=!0),yield s(void 0,void 0,void 0,(function*(){k(),y(!0),c.forEach((e=>e.disabled=!0)),yield d.newGame(),c.forEach((e=>e.disabled=!1)),y(!1),C(),r.classList.contains("selected")&&B()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),r.classList.contains("selected")&&(e.classList.remove("start"),A("first"),i.disabled=!0,r.disabled=!0),n.classList.contains("selected")&&(e.classList.add("start"),l.disabled=!0,Promise.all([A("first"),A("second")]),i.disabled=!0,l.disabled=!0,n.disabled=!0)})))),i.addEventListener("click",(()=>{d.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),i.disabled=!0,l.disabled=!0,A("second")})),l.addEventListener("click",(()=>{d.computerGameboard.clearBoard(),g(d.computerGameboard),d.randomizeShipsPlacement(d.humanGameboard),o(d.humanGameboard,d.computerGameboard,d.humanShips),C(),b(),L("second")}));const P=e=>{let t=e.target;t.checked&&(h=Number(t.value))},E=()=>h;return u.forEach((e=>{e.addEventListener("click",P)})),window.addEventListener("resize",B),{renderBoard:e=>{const r=document.createElement("div");r.classList.add("board"),r.id=f(e),m(e,r),t.append(r)},clearShip:(e,t)=>{document.querySelectorAll(`#${f(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:g,handleUserInput:()=>s(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(v(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:r,cVcBtn:n,waiting:y,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:S,createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const r=(e=>{const t=document.createElement("div"),r=e.takenBy.name.toLowerCase(),a=e.takenBy.size;return t.classList.add("ship",r,"draggable"),t.setAttribute("data-size",`${a}`),t.setAttribute("data-name",`${r}`),t.setAttribute("draggable","true"),t})(t),a=document.querySelector(".board .cell").getBoundingClientRect().width,o=t.takenBy.size,s=t.takenBy.isVertical;document.querySelector(`#${f(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(r),w(r,o,a,s),window.addEventListener("resize",(()=>((e,t,r)=>{const a=document.querySelector(".board .cell").getBoundingClientRect().width;w(e,t,a,r)})(r,o,s)))}))},canBeStarted:C,setInitMessage:B,setStartMessage:b,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:k,getSpeedValue:E,fillCells:L,unFillCells:A}})(),i=n;var l=function(e,t,r,a){return new(r||(r=Promise))((function(o,s){function n(e){try{l(a.next(e))}catch(e){s(e)}}function i(e){try{l(a.throw(e))}catch(e){s(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};const c=(()=>{const a=e(),s=e(),n=r(),d=r();let u=!0,h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),g=t("Submarine"),v=t("PatrolBoat");const p=[h,m,f,g,v],y=()=>{s.placeShip(h,"A","1","horizontal"),s.placeShip(m,"A","3","horizontal"),s.placeShip(f,"A","5","horizontal"),s.placeShip(g,"A","7","horizontal"),s.placeShip(v,"A","9","horizontal"),s.reserveSpaceForAll(s)},S=e=>(i.removeBoardPointer(),i.pVcBtn.classList.contains("selected")&&i.setGameOverMessagePvC(e),i.cVcBtn.classList.contains("selected")&&i.setGameOverMessageCvC(e),!0),w=()=>s.allSunk(s)?S("player"):!!a.allSunk(a)&&S("computer"),C=e=>{let t;if(e===a?t=d:e===s&&(t=n),e.hitButNotSunk(e)){const r=t.getLastHit(),a=t.getPrevHit(),o=e.getCell(r.col,r.row).takenBy.hitCount;if(null!==a&&null!==r&&o>=2&&o<=4?t.finishingAttack(e,r.col,r.row,a):1===o&&t.followupAttack(e,r.col,r.row),e.sinkShip(e,r.col,r.row),w())return}else{const{col:r,row:a}=t.randomAttack(e),o=e.getCell(r,a);if("hit"===o.status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:r,row:a}),o.takenBy.isSunk()&&(e.sinkShip(e,r,a),t.setPrevHit(null),t.setLastHit(null),w())))return}},B=(e,t)=>l(void 0,void 0,void 0,(function*(){i.waiting(!0),i.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),i.cVcBtn.classList.contains("selected")&&!u&&(C(t),i.refreshBoard(t))})),b=e=>{e.clearBoard(),(e=>{let r;e===a?(h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),g=t("Submarine"),v=t("PatrolBoat"),r=[h,m,f,g,v]):e===s&&(r=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);c.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],n=()=>o[Math.floor(Math.random()*o.length)],i=()=>Math.ceil(10*Math.random()).toString(),l=()=>Math.random()>.5?"horizontal":"vertical";r.forEach((t=>{let r=n(),a=i(),o=l(),s=e.canBePlaced(t.size,r,a,o);for(;!s;)r=n(),a=i(),o=l(),s=e.canBePlaced(t.size,r,a,o);s&&(e.placeShip(t,r,a,o),e.reserveSpace(e,r,a)),c.humanShips.push(t)}))})(e),i.refreshBoard(e),e===a&&i.createShipOverlay(e)},k=()=>{i.cVcBtn.classList.contains("selected")&&(b(a),b(s),u=!1,l(void 0,void 0,void 0,(function*(){i.removeBoardPointer();let e=!0;for(;!w()&&!u;)yield B(e,e?a:s),e=!e;u=!1,i.waiting(!1)})),i.refreshBoard(a))},L=()=>{u=!0,n.setPrevHit(null),n.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),a.clearBoard(),s.clearBoard(),y(),i.refreshBoard(a),i.refreshBoard(s),i.createShipOverlay(s),o(a,s,p),i.canBeStarted(),k(),p.forEach((e=>{e.isVertical=!1}))};return{init:()=>{i.setInitMessage(),a.generateArray(),s.generateArray(),i.renderBoard(a),i.renderBoard(s),y(),i.refreshBoard(s),i.createShipOverlay(s),o(a,s,p),i.canBeStarted(),k(),i.unFillCells("first"),i.pVcBtn.disabled=!0},renew:()=>{i.refreshBoard(a),i.refreshBoard(s),i.createShipOverlay(a),i.createShipOverlay(s),o(a,s,p)},humanGameboard:a,computerGameboard:s,restart:L,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),u=!1,L()})),start:()=>{i.refreshBoard(a),b(s),u=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!(w()||u||(e&&(yield l(void 0,void 0,void 0,(function*(){i.setTurnMessagePvC(!0),i.setBoardPointer("player"),i.waiting(!1);const{col:e,row:t}=yield i.handleUserInput();n.attack(s,e,t),s.sinkShip(s,e,t),i.refreshBoard(s)})),e=!1),w()||u));)e||(yield l(void 0,void 0,void 0,(function*(){i.setTurnMessagePvC(!1),i.setBoardPointer("computer"),i.waiting(!0),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),i.pVcBtn.classList.contains("selected")&&!u&&(C(a),i.refreshBoard(a))})),e=!0);u=!1,i.waiting(!1)}))},randomizeShipsPlacement:b,humanShips:p}})(),d=c;d.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,