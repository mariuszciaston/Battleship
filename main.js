(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),n=t.indexOf(s);return-1===o||-1===n?null:a[n][o]},o=(r,s,o,n)=>{const l=e.indexOf(r),i=t.indexOf(s);return-1===l||-1===i?null:(a[i][l].status=o,n&&(a[i][l].takenBy=n),a[i][l])};return{generateArray:()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}},clearBoard:()=>{a.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const a=r.indexOf(t);null===t.takenBy&&-1!==a&&r.splice(a,1)}))},placeShip:(a,n,l,i)=>{const c="horizontal"===i,d=c?e:t,u=d.indexOf(c?n:l);a.isVertical="horizontal"!==i;let m=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:n,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),m.push(s(t,r))}return r.push(m[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},reserveSpaceForAll:function(e){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),canBeSunk:e=>e&&e.takenBy&&e.takenBy.isSunk(),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,n)=>{const l="horizontal"===n,i=l?e:t,c=i.indexOf(l?r:o);if(c<0||c+a>i.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?i[c+e]:r,a=l?o:i[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}};let a;if(function(){const e=navigator.userAgent,t=/^((?!chrome|android).)*safari/i.test(e),a=/iPad|iPhone|iPod/.test(e)||e.includes("Mac")&&"ontouchend"in document;return t||a}()){const e=new AudioContext;a=(()=>{const t={},a=e.createGain();a.connect(e.destination);const r=(a,r)=>{const s=new XMLHttpRequest;s.open("GET",a,!0),s.responseType="arraybuffer",s.onload=()=>{e.decodeAudioData(s.response,(e=>{t[r]=e}),(e=>{console.error("Error with decoding audio data",e)}))},s.send()},s={},o=r=>{if(s[r]&&(s[r].stop(),s[r].onended=()=>{},s[r]=null),t[r]){const o=e.createBufferSource();o.buffer=t[r],o.connect(a),s[r]=o,o.onended=()=>{s[r]=null},o.start(0)}else console.error("Sound not found:",r)},n=e=>e?(a.gain.value=0,!0):(a.gain.value=1,!1);return r("sounds/gray1wea.wav","miss"),r("sounds/explo.wav","hit"),r("sounds/explodea.wav","sunk"),r("sounds/capture.wav","gameOver"),r("sounds/barr1sel.wav","drop"),r("sounds/drain.wav","rotate"),r("sounds/exp1sel.wav","random"),r("sounds/msg.wav","select"),r("sounds/beep.wav","tick"),r("sounds/buttonRev.wav","grab"),{play:o,muteAll:n}})(),document.addEventListener("touchstart",(()=>{e.resume().then((()=>{console.log("Playback resumed successfully")})).catch((e=>{console.error("Playback resume failed",e)}))}))}else a=(()=>{const e=e=>{Object.keys(e).forEach((t=>{const a=e[t].play;e[t].play=function(){return e[t].currentTime>0&&(e[t].pause(),e[t].currentTime=0),a.call(this)}}))},t=e=>{let t=!1;return Object.values(a).forEach((a=>{a instanceof HTMLAudioElement&&(a.volume=e?0:1,t=e)})),t};return(()=>{const a={miss:new Audio("sounds/gray1wea.wav"),hit:new Audio("sounds/explo.wav"),sunk:new Audio("sounds/explodea.wav"),gameOver:new Audio("sounds/capture.wav"),drop:new Audio("sounds/barr1sel.wav"),rotate:new Audio("sounds/drain.wav"),random:new Audio("sounds/exp1sel.wav"),select:new Audio("sounds/msg.wav"),tick:new Audio("sounds/beep.wav"),grab:new Audio("sounds/buttonRev.wav")};return e(a),Object.assign(Object.assign({},a),{play:function(e){this[e]&&this[e].play&&this[e].play()},muteAll:t})})()})();const r=a,s=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null,s=1,o=!0,n=!0;const l=(e,t,d,u)=>{if(u.row===d)if(o){s=1;let n=String.fromCharCode(t.charCodeAt(0)+s);for(;e.getCell(n,d)&&"hit"===e.getCell(n,d).status;)s+=1,n=String.fromCharCode(t.charCodeAt(0)+s);e.getCell(n,d)&&"hit"!==e.getCell(n,d).status&&"miss"!==e.getCell(n,d).status?(e.receiveAttack(n,d),"hit"===e.getCell(n,d).status?(i(a),c({col:n,row:d}),r.play("hit")):"miss"===e.getCell(n,d).status&&r.play("miss"),s+=1):(s=1,o=!1,l(e,n,d,u))}else{s=1;let n=String.fromCharCode(t.charCodeAt(0)-s);for(;e.getCell(n,d)&&"hit"===e.getCell(n,d).status;)s+=1,n=String.fromCharCode(t.charCodeAt(0)-s);e.getCell(n,d)&&"hit"!==e.getCell(n,d).status&&"miss"!==e.getCell(n,d).status?(e.receiveAttack(n,d),"hit"===e.getCell(n,d).status?(i(a),c({col:n,row:d}),r.play("hit")):"miss"===e.getCell(n,d).status&&r.play("miss"),s+=1):(s=1,o=!0,l(e,n,d,u))}else if(u.col===t)if(n){s=1;let o=(Number(d)+s).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)s+=1,o=(Number(d)+s).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status?(i(a),c({col:t,row:o}),r.play("hit")):"miss"===e.getCell(t,o).status&&r.play("miss"),s+=1):(s=1,n=!1,l(e,t,o,u))}else{s=1;let o=(Number(d)-s).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)s+=1,o=(Number(d)-s).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status?(i(a),c({col:t,row:o}),r.play("hit")):"miss"===e.getCell(t,o).status&&r.play("miss"),s+=1):(s=1,n=!0,l(e,t,o,u))}},i=e=>{t=e},c=e=>{a=e};return{attack:(e,t,s)=>{if("hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status){let o=e.receiveAttack(t,s);return"hit"===o?(i(a),c({col:t,row:s}),r.play("hit")):"miss"===o&&r.play("miss"),o}return"already shot"},randomAttack:t=>{let s,o;do{s=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(s,o).status||"miss"===t.getCell(s,o).status);if("hit"!==t.getCell(s,o).status&&"miss"!==t.getCell(s,o).status){const e=t.receiveAttack(s,o);return"hit"===t.getCell(s,o).status?(i(a),c({col:s,row:o}),r.play("hit")):"miss"===t.getCell(s,o).status&&r.play("miss"),{result:e,col:s,row:o}}return{result:"already shot",col:s,row:o}},followupAttack:(e,t,o)=>{const n=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),s=(Number(o)+a.row).toString(),n=e.getCell(r,s);return!(!n||"miss"===n.status||"hit"===n.status)}));if(n.length>0){const l=n[Math.floor(Math.random()*n.length)],d=String.fromCharCode(t.charCodeAt(0)+l.col),u=(Number(o)+l.row).toString();e.receiveAttack(d,u),s=1,"hit"===e.getCell(d,u).status?(i(a),c({col:d,row:u}),r.play("hit")):"miss"===e.getCell(d,u).status&&r.play("miss")}},finishingAttack:l,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:c}};var o=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const n=(e,t,a)=>{const s=document.querySelector("#firstBoard"),n=document.querySelector("#secondBoard"),l=s.querySelectorAll(".cell"),i=n.querySelectorAll(".cell");let d,m,h,f,p=0,v=0,g=[];const y={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]};let w=null;const S=document.querySelectorAll(".draggable");function C(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const b=[...C(l),...C(i)];function B(e,t){return e.slice(Math.min(e.length-t,0))}function k(a){const r=a.target;let s;const o=r.closest(".board").id;return"firstBoard"===o&&(s=e),"secondBoard"===o&&(s=t),{target:r,gameboard:s}}function A(e,t){return d=t.getAttribute("data-name"),m=Number(t.getAttribute("data-size")),p=e.offsetX,v=e.offsetY,h=y[d],f=h.isVertical?"vertical":"horizontal",{shipName:d,shipObj:h}}function L(){g.forEach((e=>e.classList.remove("highlight")))}function E(e){return"firstBoard"===e||"secondBoard"===e}function P(e){const{gameboard:t}=k(e);t.removeReservedSpace(t),function(e,t){const{target:a}=k(t),r=a.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))}(t,e),u.renew(),c.setInitMessage(),0===e.button&&r.play("grab")}function x(e){return o(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const{target:t,gameboard:a}=k(e);t.style.visibility="hidden",A(e,t),a.removeShip(h,a),c.clearShip(h,a)}))}function M(e){return function(t){const{target:a}=k(t),r=a.closest(".board").id;if(E(r)&&(t.preventDefault(),h)){const a=function(e,t,a){const{target:r}=k(a);return e-(t.isVertical?10*Math.floor(v/r.offsetHeight):Math.floor(p/r.offsetWidth))}(e,h,t),s=function(e){return"firstBoard"===e?l:i}(r),o=[];!function(e,t,a,r){for(let s=0;s<m;s++){let o=e.isVertical?t+10*s:t+s;a[o]&&(r.push(a[o]),g.push(a[o]))}}(h,a,s,o),function(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===m&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}(o)&&(!function(e){e.forEach((e=>{e.classList.add("highlight")}))}(o),w||(w=B(g,m)))}}}function q(){L(),g.length=0}function z(e){L();const t=B(g,m),{target:a,gameboard:s}=k(e);E(a.closest(".board").id)&&h&&null!==w&&function(e,t,a,r){e.canBePlaced(t.size,a[0].dataset.col,a[0].dataset.row,r)?(e.placeShip(t,a[0].dataset.col,a[0].dataset.row,r),e.reserveSpace(e,a[0].dataset.col,a[0].dataset.row)):(e.placeShip(t,w[0].dataset.col,w[0].dataset.row,r),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row))}(s,h,t,f),s.removeReservedSpace(s),s.reserveSpaceForAll(s),u.renew(),c.canBeStarted(),c.setStartMessage(),w=null,r.play("drop")}function O(a){const r=a.target;r.style.visibility="visible",function(a,r){if(0===g.length){const s=a.closest(".board");if(s){let{gameboard:a}=k(r);"firstBoard"===s.id?a=e:"secondBoard"===s.id&&(a=t),a&&w&&a.canBePlaced(h.size,w[0].dataset.col,w[0].dataset.row,f)&&(a.placeShip(h,w[0].dataset.col,w[0].dataset.row,f),a.reserveSpace(a,w[0].dataset.col,w[0].dataset.row),u.renew())}}}(r,a),c.canBeStarted()&&c.fillCells("second"),c.setStartMessage()}function G(e){const{gameboard:t}=k(e);t.reserveSpaceForAll(t),u.renew(),c.setStartMessage()}function V(e){e.preventDefault();const{target:t,gameboard:a}=k(e),{shipName:s,shipObj:o}=A(e,t),n=a.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===s));a.removeShip(o,a),a.removeReservedSpace(a),a.reserveSpaceForAll(a),o.rotate(),f=o.isVertical?"vertical":"horizontal",a.canBePlaced(o.size,n[0].col,n[0].row,f)||(o.rotate(),f=o.isVertical?"vertical":"horizontal"),a.placeShip(o,n[0].col,n[0].row,f),a.reserveSpaceForAll(a),u.renew(),c.canBeStarted()&&c.fillCells("second"),r.play("rotate")}function H(e){e.preventDefault()}function N(e){e.forEach(((e,t)=>{e.addEventListener("dragover",M(t)),e.addEventListener("dragleave",q),e.addEventListener("drop",z)}))}N(l),N(i),S.forEach((e=>{e.addEventListener("mousedown",P),e.addEventListener("dragstart",x),e.addEventListener("dragend",O),e.addEventListener("mouseup",G),e.addEventListener("contextmenu",V),b.forEach((e=>e.addEventListener("contextmenu",H)))}))};var l=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const i=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),s=document.querySelector("#newGame"),o=document.querySelector("#computerVsComputer"),i=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,s,o,i,c],m=document.getElementsByName("speed");let h=1e3;const f=document.querySelector("#mute");let p=!1;const v=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},g=e=>e===u.humanGameboard?"firstBoard":e===u.computerGameboard?"secondBoard":void 0,y=e=>{const t=document.querySelector(`#${g(e)}`);t.innerHTML="",v(e,t)},w=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},S=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&l(void 0,void 0,void 0,(function*(){P("first"),C(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,M()))),d.forEach((e=>e.disabled=!1)),C(!1),k(),A()})),e===o&&l(void 0,void 0,void 0,(function*(){C(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,M()))),d.forEach((e=>e.disabled=!1)),C(!1),i.disabled=!0,c.disabled=!0,o.disabled=!0})),u.restart(),E())},C=e=>{document.documentElement.classList.toggle("wait",e)},b=()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},B=(e,t,a,r)=>{const s=document.querySelector("html"),o=parseFloat(window.getComputedStyle(s,null).getPropertyValue("font-size"));r?(e.style.width=a/o+"rem",e.style.height=t*(a/o)+"rem"):(e.style.width=t*(a/o)+"rem",e.style.height=a/o+"rem")},k=()=>5===u.humanGameboard.shipsPlaced.length&&0===u.computerGameboard.shipsPlaced.length?(P("second"),i.disabled=!1,!0):(i.disabled=!0,!1),A=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},L=()=>{k()&&(e.textContent="You can now begin the game. Press start!")},E=()=>{e.textContent="Restarting..."},P=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},x=e=>l(void 0,void 0,void 0,(function*(){let t;C(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,s)=>{setTimeout((()=>{t.classList.remove("filled"),s===a.length-1&&e(),(s+1)%6==0&&r.play("tick")}),M()/120*s)}))})),C(!1)}));a.addEventListener("click",(()=>{P("first"),S(a,o);document.querySelector("#secondBoard").classList.remove("start"),i.disabled=!0,a.disabled=!0,r.play("select"),x("first")})),o.addEventListener("click",(()=>{P("first"),P("second"),S(o,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,o.disabled=!0,r.play("select"),Promise.all([x("first"),x("second")])})),s.addEventListener("click",(()=>l(void 0,void 0,void 0,(function*(){b(),P("first"),o.classList.contains("selected")&&(P("second"),i.disabled=!0,c.disabled=!0,o.disabled=!0),r.play("select"),yield l(void 0,void 0,void 0,(function*(){E(),C(!0),d.forEach((e=>e.disabled=!0)),yield u.newGame(),d.forEach((e=>e.disabled=!1)),C(!1),k(),a.classList.contains("selected")&&A()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),x("first"),i.disabled=!0,a.disabled=!0),o.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([x("first"),x("second")]),i.disabled=!0,c.disabled=!0,o.disabled=!0)})))),i.addEventListener("click",(()=>{u.start();const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,x("second")})),c.addEventListener("click",(()=>{u.computerGameboard.clearBoard(),y(u.computerGameboard),u.randomizeShipsPlacement(u.humanGameboard),n(u.humanGameboard,u.computerGameboard,u.humanShips),k(),L(),P("second"),r.play("random")}));const M=()=>h;return m.forEach((e=>{e.addEventListener("click",(e=>{(e=>{let t=e.target;t.checked&&(h=Number(t.value))})(e),r.play("select")}))})),f.addEventListener("click",(()=>{const e=document.querySelector("#speaker");p?(f.classList.remove("muted"),e.classList.remove("fa-volume-xmark"),e.classList.add("fa-volume-high"),r.muteAll&&r.muteAll(!1)):(f.classList.add("muted"),e.classList.remove("fa-volume-high"),e.classList.add("fa-volume-xmark"),r.muteAll&&r.muteAll(!0)),p=!p,r.play("select")})),window.addEventListener("resize",A),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),a.id=g(e),v(e,a),t.append(a)},clearShip:(e,t)=>{document.querySelectorAll(`#${g(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:y,handleUserInput:()=>l(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(w(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:o,waiting:C,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:b,createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const a=(e=>{const t=document.createElement("div"),a=e.takenBy.name.toLowerCase(),r=e.takenBy.size;return t.classList.add("ship",a,"draggable"),t.setAttribute("data-size",`${r}`),t.setAttribute("data-name",`${a}`),t.setAttribute("draggable","true"),t})(t),r=document.querySelector(".board .cell").getBoundingClientRect().width,s=t.takenBy.size,o=t.takenBy.isVertical;document.querySelector(`#${g(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a),B(a,s,r,o),window.addEventListener("resize",(()=>((e,t,a)=>{const r=document.querySelector(".board .cell").getBoundingClientRect().width;B(e,t,r,a)})(a,s,o)))}))},canBeStarted:k,setInitMessage:A,setStartMessage:L,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:E,getSpeedValue:M,fillCells:P,unFillCells:x}})(),c=i;var d=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const u=(()=>{const a=e(),o=e(),l=s(),i=s();let u,m,h,f,p,v=!0,g=[u,m,h,f,p];const y=()=>{u=t("Carrier"),m=t("Battleship"),h=t("Destroyer"),f=t("Submarine"),p=t("PatrolBoat"),g=[u,m,h,f,p],o.placeShip(u,"A","1","horizontal"),o.placeShip(m,"A","3","horizontal"),o.placeShip(h,"A","5","horizontal"),o.placeShip(f,"A","7","horizontal"),o.placeShip(p,"A","9","horizontal"),o.reserveSpaceForAll(o)},w=e=>(c.removeBoardPointer(),c.pVcBtn.classList.contains("selected")&&c.setGameOverMessagePvC(e),c.cVcBtn.classList.contains("selected")&&c.setGameOverMessageCvC(e),r.play("gameOver"),!0),S=()=>o.allSunk(o)?w("player"):!!a.allSunk(a)&&w("computer"),C=e=>{let t;if(e===a?t=i:e===o&&(t=l),e.hitButNotSunk(e)){const a=t.getLastHit(),s=t.getPrevHit(),o=e.getCell(a.col,a.row),n=o.takenBy.hitCount;if(null!==s&&null!==a&&n>=2&&n<=4?t.finishingAttack(e,a.col,a.row,s):1===n&&t.followupAttack(e,a.col,a.row),e.canBeSunk(o)&&(e.sinkShip(e,a.col,a.row),r.play("sunk")),S())return}else{const{col:a,row:s}=t.randomAttack(e),o=e.getCell(a,s);if("hit"===o.status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:s}),e.canBeSunk(o)&&(e.sinkShip(e,a,s),r.play("sunk"),t.setPrevHit(null),t.setLastHit(null),S())))return}},b=(e,t)=>d(void 0,void 0,void 0,(function*(){c.waiting(!0),c.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,c.getSpeedValue()))),c.cVcBtn.classList.contains("selected")&&!v&&(C(t),c.refreshBoard(t))})),B=e=>{e.clearBoard(),(e=>{let r;e===a?(u=t("Carrier"),m=t("Battleship"),h=t("Destroyer"),f=t("Submarine"),p=t("PatrolBoat"),r=[u,m,h,f,p]):e===o&&(r=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);g.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],n=()=>s[Math.floor(Math.random()*s.length)],l=()=>Math.ceil(10*Math.random()).toString(),i=()=>Math.random()>.5?"horizontal":"vertical";r.forEach((t=>{let a=n(),r=l(),s=i(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=n(),r=l(),s=i(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),g.push(t)}))})(e),c.refreshBoard(e),e===a&&c.createShipOverlay(e)},k=()=>{c.cVcBtn.classList.contains("selected")&&(B(a),B(o),v=!1,d(void 0,void 0,void 0,(function*(){c.removeBoardPointer();let e=!0;for(;!S()&&!v;)yield b(e,e?a:o),e=!e;v=!1,c.waiting(!1)})),c.refreshBoard(a))},A=()=>{v=!0,l.setPrevHit(null),l.setLastHit(null),i.setPrevHit(null),i.setLastHit(null),a.clearBoard(),o.clearBoard(),y(),c.refreshBoard(a),c.refreshBoard(o),c.createShipOverlay(o),n(a,o,g),c.canBeStarted(),k()};return{init:()=>{c.setInitMessage(),a.generateArray(),o.generateArray(),c.renderBoard(a),c.renderBoard(o),y(),c.refreshBoard(o),c.createShipOverlay(o),n(a,o,g),c.canBeStarted(),k(),c.pVcBtn.disabled=!0},renew:()=>{c.refreshBoard(a),c.refreshBoard(o),c.createShipOverlay(a),c.createShipOverlay(o),n(a,o,g)},humanGameboard:a,computerGameboard:o,restart:A,newGame:()=>d(void 0,void 0,void 0,(function*(){v=!0,yield new Promise((e=>setTimeout(e,c.getSpeedValue()))),v=!1,A()})),start:()=>{c.refreshBoard(a),B(o),v=!1,d(void 0,void 0,void 0,(function*(){let e=!0;for(;!(S()||v||(e&&(yield d(void 0,void 0,void 0,(function*(){c.setTurnMessagePvC(!0),c.setBoardPointer("player"),c.waiting(!1);const{col:e,row:t}=yield c.handleUserInput();l.attack(o,e,t);const a=o.getCell(e,t);o.canBeSunk(a)&&(o.sinkShip(o,e,t),r.play("sunk")),c.refreshBoard(o)})),e=!1),S()||v));)e||(yield d(void 0,void 0,void 0,(function*(){c.setTurnMessagePvC(!1),c.setBoardPointer("computer"),c.waiting(!0),yield new Promise((e=>setTimeout(e,c.getSpeedValue()))),c.pVcBtn.classList.contains("selected")&&!v&&(C(a),c.refreshBoard(a))})),e=!0);v=!1,c.waiting(!1)}))},randomizeShipsPlacement:B,humanShips:g}})();u.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,