(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],o=[],r=[],a=(r,a)=>{const s=t.indexOf(r),l=e.indexOf(a);return-1===s||-1===l?null:o[l][s]},s=(r,a,s,l)=>{const i=t.indexOf(r),n=e.indexOf(a);return-1===i||-1===n?null:(o[n][i].status=s,l&&(o[n][i].takenBy=l),o[n][i])};return(()=>{for(let r=0;r<10;r+=1){o[r]=[];for(let a=0;a<10;a+=1)o[r][a]={col:t[a],row:e[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)o[t][e].status="empty",o[t][e].takenBy=void 0;r.length=0},getCell:a,setCell:s,removeShip:(t,e)=>{e.array.flat().forEach((o=>{let a;"taken"===o.status&&o.takenBy.name===t.name&&(o.status="empty",o.takenBy=null),r.forEach((t=>{null===t.takenBy&&r.splice(r.indexOf(t),1)})),e===n.humanGameboard?a="firstBoard":e===n.computerGameboard?a="secondBoard":e===n.tempBoard&&(a="tempBoard");document.querySelectorAll(`#${a} .cell`).forEach((e=>{e.classList.contains("taken")&&e.getAttribute("data-shipName")===t.name.toLowerCase()&&(e.classList.remove("taken"),e.classList.add("empty"),e.removeAttribute("data-shipName"))}))}))},placeShip:(o,l,i,n)=>{o.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?t:e,u=d.indexOf(c?l:i);let h=[];if(u<0||u+o.size>d.length)return!1;for(let t=0;t<o.size;t+=1){const e=c?d[u+t]:l,r=c?i:d[u+t];if("empty"!==a(e,r).status)return!1;s(e,r,"taken",o),h.push(a(e,r))}return r.push(h[0]),!0},receiveAttack:(t,e)=>{const o=a(t,e);return"taken"===o.status?(o.takenBy.hit(),s(t,e,"hit"),o.status):"empty"===o.status||"reserved"===o.status?(s(t,e,"miss"),o.status):null},receiveAround:(t,e)=>{const o=a(t,e);return"empty"===o.status?(s(t,e,"reserved"),o.status):null},reserveSpace:(t,e,o)=>{const r=t.getCell(e,o);if(r&&r.takenBy){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===r.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((o=>{const r=String.fromCharCode(e.col.charCodeAt(0)+o.col),a=(Number(e.row)+o.row).toString();t.getCell(r,a)&&t.receiveAround(r,a)}))}))}},hitButNotSunk:t=>t.array.flat().some((t=>"hit"===t.status&&!1===t.takenBy.isSunk())),sinkShip:(t,e,o)=>{const r=t.getCell(e,o);if(r&&r.takenBy&&r.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===r.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((o=>{const r=String.fromCharCode(e.col.charCodeAt(0)+o.col),a=(Number(e.row)+o.row).toString();t.getCell(r,a)&&t.receiveAttack(r,a)}))}))}},allSunk:t=>{let e=t.array.flat().filter((t=>t.takenBy));return!!(e.length>0&&e.every((t=>t.takenBy.isSunk())))},array:o,canBePlaced:(o,r,s,l)=>{const i="horizontal"===l,n=i?t:e,c=n.indexOf(i?r:s);if(c<0||c+o>n.length)return!1;for(let t=0;t<o;t+=1){const e=i?n[c+t]:r,o=i?s:n[c+t];if("empty"!==a(e,o).status)return!1}return!0},shipsPlaced:r}},e=t=>{let e;return"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"PatrolBoat"===t&&(e=2),{name:t,size:e,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===e}}},o=()=>{const t=["A","B","C","D","E","F","G","H","I","J"];let e=null,o=null;let r=1,a=!0,s=!0;const l=(t,e,c,d)=>{if(console.log("start finishingAttack prevHit",d),console.log("start finishingAttack lastHit",{col:e,row:c}),d.row===c)if(a){r=1,console.log("goRight");let s=String.fromCharCode(e.charCodeAt(0)+r);for(;t.getCell(s,c)&&"hit"===t.getCell(s,c).status;)r+=1,s=String.fromCharCode(e.charCodeAt(0)+r);t.getCell(s,c)&&"hit"!==t.getCell(s,c).status&&"miss"!==t.getCell(s,c).status?(t.receiveAttack(s,c),"hit"===t.getCell(s,c).status&&(i(o),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",o),console.log("range",r),console.log("---------------"),r+=1):(r=1,a=!1,l(t,s,c,d))}else{r=1,console.log("goLeft");let s=String.fromCharCode(e.charCodeAt(0)-r);for(;t.getCell(s,c)&&"hit"===t.getCell(s,c).status;)r+=1,s=String.fromCharCode(e.charCodeAt(0)-r);t.getCell(s,c)&&"hit"!==t.getCell(s,c).status&&"miss"!==t.getCell(s,c).status?(t.receiveAttack(s,c),"hit"===t.getCell(s,c).status&&(i(o),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",o),console.log("range",r),console.log("---------------"),r+=1):(r=1,a=!0,l(t,s,c,d))}else if(d.col===e)if(s){r=1,console.log("goDown");let a=(Number(c)+r).toString();for(;t.getCell(e,a)&&"hit"===t.getCell(e,a).status;)r+=1,a=(Number(c)+r).toString();t.getCell(e,a)&&"hit"!==t.getCell(e,a).status&&"miss"!==t.getCell(e,a).status?(t.receiveAttack(e,a),"hit"===t.getCell(e,a).status&&(i(o),n({col:e,row:a})),console.log("prevHit",d),console.log("lastHit",o),console.log("range",r),console.log("---------------"),r+=1):(r=1,s=!1,l(t,e,a,d))}else{r=1,console.log("goUp");let a=(Number(c)-r).toString();for(;t.getCell(e,a)&&"hit"===t.getCell(e,a).status;)r+=1,a=(Number(c)-r).toString();t.getCell(e,a)&&"hit"!==t.getCell(e,a).status&&"miss"!==t.getCell(e,a).status?(t.receiveAttack(e,a),"hit"===t.getCell(e,a).status&&(i(o),n({col:e,row:a})),console.log("prevHit",d),console.log("lastHit",o),console.log("range",r),console.log("---------------"),r+=1):(r=1,s=!0,l(t,e,a,d))}},i=t=>{e=t},n=t=>{o=t};return{attack:(t,e,r)=>{if("hit"!==t.getCell(e,r).status&&"miss"!==t.getCell(e,r).status){let a=t.receiveAttack(e,r);return"hit"===a&&(i(o),n({col:e,row:r})),a}return"already shot"},randomAttack:a=>{let s,l;do{s=t[Math.floor(Math.random()*t.length)],l=Math.ceil(10*Math.random()).toString()}while("hit"===a.getCell(s,l).status||"miss"===a.getCell(s,l).status);if("hit"!==a.getCell(s,l).status&&"miss"!==a.getCell(s,l).status){const t=a.receiveAttack(s,l);return"hit"===a.getCell(s,l).status&&(i(o),n({col:s,row:l}),console.log("---------------"),console.log("randomAttack prevHit",e),console.log("randomAttack lastHit",o),console.log("randomAttack range",r)),{result:t,col:s,row:l}}return{result:"already shot",col:s,row:l}},followupAttack:(t,a,s)=>{const l=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((e=>{const o=String.fromCharCode(a.charCodeAt(0)+e.col),r=(Number(s)+e.row).toString(),l=t.getCell(o,r);return!(!l||"miss"===l.status||"hit"===l.status)}));if(l.length>0){const c=l[Math.floor(Math.random()*l.length)],d=String.fromCharCode(a.charCodeAt(0)+c.col),u=(Number(s)+c.row).toString();t.receiveAttack(d,u),r=1,"hit"===t.getCell(d,u).status&&(i(o),n({col:d,row:u}),console.log("---------------"),console.log("followupAttack prevHit",e),console.log("followupAttack lastHit",o),console.log("followupAttack range",r))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:l,prevHit:e,lastHit:o,getPrevHit:()=>e,getLastHit:()=>o,setPrevHit:i,setLastHit:n}};var r=function(t,e,o,r){return new(o||(o=Promise))((function(a,s){function l(t){try{n(r.next(t))}catch(t){s(t)}}function i(t){try{n(r.throw(t))}catch(t){s(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(l,i)}n((r=r.apply(t,e||[])).next())}))};const a=(()=>{const t=document.querySelector("#wrapper"),e=document.createElement("div");e.id="boards",t.prepend(e);const o=document.querySelector("#playerVsComputer"),a=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),l=document.querySelector("#rotateShip"),i=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[o,a,s,l,i,c],u=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const o=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),t.takenBy&&e.setAttribute("data-shipName",t.takenBy.name.toLowerCase()),e})(t);e.append(o)}))}))},h=t=>{let e;t===n.humanGameboard?e="firstBoard":t===n.computerGameboard?e="secondBoard":t===n.tempBoard&&(e="tempBoard");const o=document.querySelector(`#${e}`);o.innerHTML="",u(t,o)},g=t=>{if(!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}},m=(t,e)=>{e.classList.remove("selected"),t.classList.contains("selected")||(t.classList.add("selected"),t===o&&r(void 0,void 0,void 0,(function*(){f(!0),d.forEach((t=>t.disabled=!0)),o.textContent="Starting...",yield new Promise((t=>setTimeout(t,1e3))),o.textContent="Player vs Computer",d.forEach((t=>t.disabled=!1)),f(!1)})),t===s&&r(void 0,void 0,void 0,(function*(){f(!0),d.forEach((t=>t.disabled=!0)),s.textContent="Starting...",yield new Promise((t=>setTimeout(t,1e3))),s.textContent="Computer vs Computer",d.forEach((t=>t.disabled=!1)),f(!1)})),n.restart())},f=t=>{document.documentElement.classList.toggle("wait",t)},p=(t,e)=>{e.forEach((e=>{const o=document.createElement("div"),r=e.takenBy.name.toLowerCase(),a=e.takenBy.size,s=e.takenBy.isVertical;o.classList.add("ship",r),o.setAttribute("data-size",`${a}`),o.setAttribute("data-name",`${r}`),o.setAttribute("draggable","true"),o.classList.add("draggable");const l=()=>{s?s&&(o.style.width=n/16+"rem",o.style.height=a*(n/16)+"rem"):(o.style.width=a*(n/16)+"rem",o.style.height=n/16+"rem")};let i,n=document.querySelector(".board .cell").getBoundingClientRect().width;l(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,l()})),"first"===t?i="firstBoard":"temp"===t&&(i="tempBoard");document.querySelector(`#${i} .cell[data-col="${e.col}"][data-row="${e.row}"]`).appendChild(o)}))},v=(t,e,o)=>{let r,a,s,l,i=0,c=0,d=[];const u={carrier:o[0],battleship:o[1],destroyer:o[2],submarine:o[3],patrolboat:o[4]};document.querySelectorAll(".draggable").forEach((t=>{t.addEventListener("dragstart",y),t.addEventListener("dragend",L)}));const g=document.querySelector("#firstBoard"),m=document.querySelector("#tempBoard"),f=g.querySelectorAll(".cell"),w=m.querySelectorAll(".cell");let B=null;function y(o){setTimeout((()=>{const n=o.target;n.style.visibility="hidden",this.classList.add("dragging"),r=n.getAttribute("data-name"),a=Number(n.getAttribute("data-size")),i=o.offsetX,c=o.offsetY,s=u[r],l=s.isVertical?"vertical":"horizontal","firstBoard"===n.closest(".board").id&&t.removeShip(s,t),"tempBoard"===n.closest(".board").id&&e.removeShip(s,e)}),0)}function C(t){return function(e){const o=e.target;if("firstBoard"===o.closest(".board").id){e.preventDefault();let o=t-(s.isVertical?10*Math.floor(c/this.offsetHeight):Math.floor(i/this.offsetWidth));const r=[];for(let t=0;t<a;t++){let e=s.isVertical?o+10*t:o+t;f[e]&&(r.push(f[e]),d.push(f[e]))}b(r)&&(r.forEach((t=>{t.classList.add("highlight")})),B||(B=A(d,a)))}if("tempBoard"===o.closest(".board").id){e.preventDefault();let o=t-(s.isVertical?10*Math.floor(c/this.offsetHeight):Math.floor(i/this.offsetWidth));const r=[];for(let t=0;t<a;t++){let e=s.isVertical?o+10*t:o+t;w[e]&&(r.push(w[e]),d.push(w[e]))}b(r)&&(r.forEach((t=>{t.classList.add("highlight")})),B||(B=A(d,a)))}}}function S(){d.forEach((t=>{t.classList.remove("highlight")})),d=[]}function k(o){d.forEach((t=>{t.classList.remove("highlight")}));const r=A(d,a),i=o.target;"firstBoard"===i.closest(".board").id&&(t.canBePlaced(s.size,r[0].dataset.col,r[0].dataset.row,l)?t.placeShip(s,r[0].dataset.col,r[0].dataset.row,l):t.placeShip(s,B[0].dataset.col,B[0].dataset.row,l)),"tempBoard"===i.closest(".board").id&&(e.canBePlaced(s.size,r[0].dataset.col,r[0].dataset.row,l)?e.placeShip(s,r[0].dataset.col,r[0].dataset.row,l):e.placeShip(s,B[0].dataset.col,B[0].dataset.row,l)),h(t),h(e),p("first",t.shipsPlaced),p("temp",e.shipsPlaced),v(t,e,n.humanShips),B=null}function L(o){const r=o.target;r.style.visibility="visible",this.classList.remove("dragging"),0===d.length&&("firstBoard"===r.closest(".board").id&&B&&t.canBePlaced(s.size,B[0].dataset.col,B[0].dataset.row,l)&&(t.placeShip(s,B[0].dataset.col,B[0].dataset.row,l),h(t),h(e),p("first",t.shipsPlaced),p("temp",e.shipsPlaced),v(t,e,n.humanShips)),"tempBoard"===r.closest(".board").id&&B&&e.canBePlaced(s.size,B[0].dataset.col,B[0].dataset.row,l)&&(e.placeShip(s,B[0].dataset.col,B[0].dataset.row,l),h(t),h(e),p("first",t.shipsPlaced),p("temp",e.shipsPlaced),v(t,e,n.humanShips)))}function b(t){return t.every((t=>t.classList.contains("empty")))&&(t.every((e=>e.dataset.col===t[0].dataset.col))||t.every((e=>e.dataset.row===t[0].dataset.row)))&&t.length===a&&t.every((t=>t.dataset.col>="A"&&t.dataset.col<="J"))&&t.every((t=>Number(t.dataset.row)>=1&&Number(t.dataset.row)<=10))}function A(t,e){return t.slice(Math.min(t.length-e,0))}f.forEach(((t,e)=>{t.addEventListener("dragover",C(e)),t.addEventListener("dragleave",S),t.addEventListener("drop",k)})),w.forEach(((t,e)=>{t.addEventListener("dragover",C(e)),t.addEventListener("dragleave",S),t.addEventListener("drop",k)}))};return o.addEventListener("click",(()=>m(o,s))),s.addEventListener("click",(()=>m(s,o))),a.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){f(!0),d.forEach((t=>t.disabled=!0)),a.textContent="Restarting...",yield n.newGame(),a.textContent="New Game",d.forEach((t=>t.disabled=!1)),f(!1)})))),l.addEventListener("click",(()=>n.rotateShip())),i.addEventListener("click",(()=>n.start())),c.addEventListener("click",(()=>{n.tempBoard.clearBoard(),h(n.tempBoard),n.randomizeShipsPlacement("first",n.humanGameboard),v(n.humanGameboard,n.tempBoard,n.humanShips)})),{renderBoard:t=>{const o=document.createElement("div");o.classList.add("board"),t===n.humanGameboard?o.id="firstBoard":t===n.computerGameboard?o.id="secondBoard":t===n.tempBoard&&(o.id="tempBoard"),u(t,o),e.append(o)},refreshBoard:h,handleUserInput:()=>r(void 0,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(g(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}})),pVcBtn:o,cVcBtn:s,waiting:f,setBoardPointer:t=>{const e=document.querySelector("#secondBoard");"player"===t?e.classList.add("boardOutline"):"computer"===t&&e.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:p,dragAndDrop:v}})(),s=a;var l=function(t,e,o,r){return new(o||(o=Promise))((function(a,s){function l(t){try{n(r.next(t))}catch(t){s(t)}}function i(t){try{n(r.throw(t))}catch(t){s(t)}}function n(t){var e;t.done?a(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(l,i)}n((r=r.apply(t,e||[])).next())}))};const i=(()=>{const r=t(),a=t(),n=t(),c=o(),d=o();let u=!0,h=e("Carrier"),g=e("Battleship"),m=e("Destroyer"),f=e("Submarine"),p=e("PatrolBoat");const v=[h,g,m,f,p],w=()=>(a.allSunk(a)||!!r.allSunk(r))&&(s.removeBoardPointer(),!0),B=t=>{let e;if(t===r?e=d:t===a&&(e=c),t.hitButNotSunk(t)){if(null!==e.getPrevHit()&&null!==e.getLastHit()&&t.getCell(e.getLastHit().col,e.getLastHit().row).takenBy.hitCount>=2&&t.getCell(e.getLastHit().col,e.getLastHit().row).takenBy.hitCount<=4){if(e.finishingAttack(t,e.getLastHit().col,e.getLastHit().row,e.getPrevHit()),t.sinkShip(t,e.getLastHit().col,e.getLastHit().row),w())return}else if(1===t.getCell(e.getLastHit().col,e.getLastHit().row).takenBy.hitCount&&(e.followupAttack(t,e.getLastHit().col,e.getLastHit().row),t.sinkShip(t,e.getLastHit().col,e.getLastHit().row),w()))return}else{const{col:o,row:r}=e.randomAttack(t);if("hit"===t.getCell(o,r).status&&(e.setPrevHit(e.getLastHit()),e.setLastHit({col:o,row:r})),"hit"===t.getCell(o,r).status&&t.getCell(o,r).takenBy.isSunk()&&(t.sinkShip(t,o,r),e.setPrevHit(null),e.setLastHit(null),w()))return}},y=(t,o)=>{o.clearBoard(),(t=>{let o;t===r?(h=e("Carrier"),g=e("Battleship"),m=e("Destroyer"),f=e("Submarine"),p=e("PatrolBoat"),o=[h,g,m,f,p]):t===a&&(o=[e("Carrier"),e("Battleship"),e("Destroyer"),e("Submarine"),e("PatrolBoat")]);i.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],l=()=>s[Math.floor(Math.random()*s.length)],n=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";o.forEach((e=>{let o=l(),r=n(),a=c(),s=t.canBePlaced(e.size,o,r,a);for(;!s;)o=l(),r=n(),a=c(),s=t.canBePlaced(e.size,o,r,a);s&&t.placeShip(e,o,r,a),i.humanShips.push(e)}))})(o),s.refreshBoard(o),"first"===t&&s.createShipOverlay("first",o.shipsPlaced)},C=()=>{s.cVcBtn.classList.contains("selected")&&(y("first",r),y("second",a),u=!1,l(void 0,void 0,void 0,(function*(){s.removeBoardPointer();let t=!0;for(;!w()&&!u;){if(s.waiting(!0),t){if(yield new Promise((t=>setTimeout(t,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;B(r),s.refreshBoard(r),t=!1}if(w()||u)break;if(!t){if(yield new Promise((t=>setTimeout(t,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;B(a),s.refreshBoard(a),t=!0}}u=!1,s.waiting(!1)})))},S=()=>{u=!0,c.setPrevHit(null),c.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),r.clearBoard(),a.clearBoard(),s.refreshBoard(r),s.refreshBoard(a),C()};return{init:()=>{s.renderBoard(r),s.renderBoard(n),n.placeShip(h,"A","1","horizontal"),n.placeShip(g,"A","3","horizontal"),n.placeShip(m,"A","5","horizontal"),n.placeShip(f,"A","7","horizontal"),n.placeShip(p,"A","9","vertical"),s.refreshBoard(n),s.createShipOverlay("temp",n.shipsPlaced),s.dragAndDrop(r,n,v),C()},humanGameboard:r,computerGameboard:a,tempBoard:n,restart:S,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((t=>setTimeout(t,1e3))),u=!1,S()})),rotateShip:()=>{console.log("rotate")},start:()=>{y("second",a),u=!1,l(void 0,void 0,void 0,(function*(){let t=!0;for(;!w()&&!u;){if(t){s.setBoardPointer("player"),s.waiting(!1);const{col:e,row:o}=yield s.handleUserInput();c.attack(a,e,o),a.sinkShip(a,e,o),s.refreshBoard(a),t=!1}if(w()||u)break;if(!t){if(s.setBoardPointer("computer"),s.waiting(!0),yield new Promise((t=>setTimeout(t,1e3))),!s.pVcBtn.classList.contains("selected")||u)break;B(r),s.refreshBoard(r),t=!0}}u=!1,s.waiting(!1)}))},randomizeShipsPlacement:y,humanShips:v}})(),n=i;n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,