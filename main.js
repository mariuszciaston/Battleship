(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),n=t.indexOf(s);return-1===o||-1===n?null:a[n][o]},o=(r,s,o,n)=>{const l=e.indexOf(r),i=t.indexOf(s);return-1===l||-1===i?null:(a[i][l].status=o,n&&(a[i][l].takenBy=n),a[i][l])};return{generateArray:()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}},clearBoard:()=>{a.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const a=r.indexOf(t);null===t.takenBy&&-1!==a&&r.splice(a,1)}))},placeShip:(a,n,l,i)=>{const c="horizontal"===i,d=c?e:t,u=d.indexOf(c?n:l);a.isVertical="horizontal"!==i;let m=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:n,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),m.push(s(t,r))}return r.push(m[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},reserveSpaceForAll:function(e){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),canBeSunk:e=>e&&e.takenBy&&e.takenBy.isSunk(),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,n)=>{const l="horizontal"===n,i=l?e:t,c=i.indexOf(l?r:o);if(c<0||c+a>i.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?i[c+e]:r,a=l?o:i[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}};var a=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const r=(e,t,r)=>{const s=document.querySelector("#firstBoard"),o=document.querySelector("#secondBoard"),i=s.querySelectorAll(".cell"),c=o.querySelectorAll(".cell");let d,m,h,f,p=0,v=0,g=[];const y={carrier:r[0],battleship:r[1],destroyer:r[2],submarine:r[3],patrolboat:r[4]};let w=null;const S=document.querySelectorAll(".draggable");function C(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const B=[...C(i),...C(c)];function b(e,t){return e.slice(Math.min(e.length-t,0))}function k(a){const r=a.target;let s;const o=r.closest(".board").id;return"firstBoard"===o&&(s=e),"secondBoard"===o&&(s=t),{target:r,gameboard:s}}function L(e,t){return d=t.getAttribute("data-name"),m=Number(t.getAttribute("data-size")),p=e.offsetX,v=e.offsetY,h=y[d],f=h.isVertical?"vertical":"horizontal",{shipName:d,shipObj:h}}function A(){g.forEach((e=>e.classList.remove("highlight")))}function E(e){return"firstBoard"===e||"secondBoard"===e}function P(e){const{gameboard:t}=k(e);t.removeReservedSpace(t),function(e,t){const{target:a}=k(t),r=a.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))}(t,e),u.renew(),n.setInitMessage(),0===e.button&&l.grab.play()}function x(e){return a(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const{target:t,gameboard:a}=k(e);t.style.visibility="hidden",L(e,t),a.removeShip(h,a),n.clearShip(h,a)}))}function M(e){return function(t){const{target:a}=k(t),r=a.closest(".board").id;if(E(r)&&(t.preventDefault(),h)){const a=function(e,t,a){const{target:r}=k(a);return e-(t.isVertical?10*Math.floor(v/r.offsetHeight):Math.floor(p/r.offsetWidth))}(e,h,t),s=function(e){return"firstBoard"===e?i:c}(r),o=[];!function(e,t,a,r){for(let s=0;s<m;s++){let o=e.isVertical?t+10*s:t+s;a[o]&&(r.push(a[o]),g.push(a[o]))}}(h,a,s,o),function(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===m&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}(o)&&(!function(e){e.forEach((e=>{e.classList.add("highlight")}))}(o),w||(w=b(g,m)))}}}function q(){A(),g.length=0}function z(e){A();const t=b(g,m),{target:a,gameboard:r}=k(e);E(a.closest(".board").id)&&h&&null!==w&&function(e,t,a,r){e.canBePlaced(t.size,a[0].dataset.col,a[0].dataset.row,r)?(e.placeShip(t,a[0].dataset.col,a[0].dataset.row,r),e.reserveSpace(e,a[0].dataset.col,a[0].dataset.row)):(e.placeShip(t,w[0].dataset.col,w[0].dataset.row,r),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row))}(r,h,t,f),r.removeReservedSpace(r),r.reserveSpaceForAll(r),u.renew(),n.canBeStarted(),n.setStartMessage(),w=null,l.drop.play()}function V(a){const r=a.target;r.style.visibility="visible",function(a,r){if(0===g.length){const s=a.closest(".board");if(s){let{gameboard:a}=k(r);"firstBoard"===s.id?a=e:"secondBoard"===s.id&&(a=t),a&&w&&a.canBePlaced(h.size,w[0].dataset.col,w[0].dataset.row,f)&&(a.placeShip(h,w[0].dataset.col,w[0].dataset.row,f),a.reserveSpace(a,w[0].dataset.col,w[0].dataset.row),u.renew())}}}(r,a),n.canBeStarted()&&n.fillCells("second"),n.setStartMessage()}function G(e){const{gameboard:t}=k(e);t.reserveSpaceForAll(t),u.renew(),n.setStartMessage()}function O(e){e.preventDefault();const{target:t,gameboard:a}=k(e),{shipName:r,shipObj:s}=L(e,t),o=a.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===r));a.removeShip(s,a),a.removeReservedSpace(a),a.reserveSpaceForAll(a),s.rotate(),f=s.isVertical?"vertical":"horizontal",a.canBePlaced(s.size,o[0].col,o[0].row,f)||(s.rotate(),f=s.isVertical?"vertical":"horizontal"),a.placeShip(s,o[0].col,o[0].row,f),a.reserveSpaceForAll(a),u.renew(),n.canBeStarted()&&n.fillCells("second"),l.rotate.play()}function H(e){e.preventDefault()}function N(e){e.forEach(((e,t)=>{e.addEventListener("dragover",M(t)),e.addEventListener("dragleave",q),e.addEventListener("drop",z)}))}N(i),N(c),S.forEach((e=>{e.addEventListener("mousedown",P),e.addEventListener("dragstart",x),e.addEventListener("dragend",V),e.addEventListener("mouseup",G),e.addEventListener("contextmenu",O),B.forEach((e=>e.addEventListener("contextmenu",H)))}))};var s=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const o=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),o=document.querySelector("#newGame"),n=document.querySelector("#computerVsComputer"),i=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,o,n,i,c],m=document.getElementsByName("speed");let h=1e3;const f=document.querySelector("#mute");let p=!1;const v=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},g=e=>e===u.humanGameboard?"firstBoard":e===u.computerGameboard?"secondBoard":void 0,y=e=>{const t=document.querySelector(`#${g(e)}`);t.innerHTML="",v(e,t)},w=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},S=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&s(void 0,void 0,void 0,(function*(){P("first"),C(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,M()))),d.forEach((e=>e.disabled=!1)),C(!1),k(),L()})),e===n&&s(void 0,void 0,void 0,(function*(){C(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,M()))),d.forEach((e=>e.disabled=!1)),C(!1),i.disabled=!0,c.disabled=!0,n.disabled=!0})),u.restart(),E())},C=e=>{document.documentElement.classList.toggle("wait",e)},B=()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},b=(e,t,a,r)=>{const s=document.querySelector("html"),o=parseFloat(window.getComputedStyle(s,null).getPropertyValue("font-size"));r?(e.style.width=a/o+"rem",e.style.height=t*(a/o)+"rem"):(e.style.width=t*(a/o)+"rem",e.style.height=a/o+"rem")},k=()=>5===u.humanGameboard.shipsPlaced.length&&0===u.computerGameboard.shipsPlaced.length?(P("second"),i.disabled=!1,!0):(i.disabled=!0,!1),L=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},A=()=>{k()&&(e.textContent="You can now begin the game. Press start!")},E=()=>{e.textContent="Restarting..."},P=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},x=e=>s(void 0,void 0,void 0,(function*(){let t;C(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,r)=>{setTimeout((()=>{t.classList.remove("filled"),r===a.length-1&&e(),(r+1)%6==0&&l.tick.play()}),M()/120*r)}))})),C(!1)}));a.addEventListener("click",(()=>{P("first"),S(a,n);document.querySelector("#secondBoard").classList.remove("start"),i.disabled=!0,a.disabled=!0,l.select.play(),x("first")})),n.addEventListener("click",(()=>{P("first"),P("second"),S(n,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,n.disabled=!0,l.select.play(),Promise.all([x("first"),x("second")])})),o.addEventListener("click",(()=>s(void 0,void 0,void 0,(function*(){B(),P("first"),n.classList.contains("selected")&&(P("second"),i.disabled=!0,c.disabled=!0,n.disabled=!0),l.select.play(),yield s(void 0,void 0,void 0,(function*(){E(),C(!0),d.forEach((e=>e.disabled=!0)),yield u.newGame(),d.forEach((e=>e.disabled=!1)),C(!1),k(),a.classList.contains("selected")&&L()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),x("first"),i.disabled=!0,a.disabled=!0),n.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([x("first"),x("second")]),i.disabled=!0,c.disabled=!0,n.disabled=!0)})))),i.addEventListener("click",(()=>{u.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,x("second")})),c.addEventListener("click",(()=>{u.computerGameboard.clearBoard(),y(u.computerGameboard),u.randomizeShipsPlacement(u.humanGameboard),r(u.humanGameboard,u.computerGameboard,u.humanShips),k(),A(),P("second"),l.random.play()}));const M=()=>h;return m.forEach((e=>{e.addEventListener("click",(e=>{(e=>{let t=e.target;t.checked&&(h=Number(t.value))})(e),l.select.play()}))})),f.addEventListener("click",(()=>{const e=document.querySelector("#speaker");p?(f.classList.remove("muted"),e.classList.remove("fa-volume-xmark"),e.classList.add("fa-volume-high")):(f.classList.add("muted"),e.classList.remove("fa-volume-high"),e.classList.add("fa-volume-xmark")),p=!p,l.select.play()})),window.addEventListener("resize",L),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),a.id=g(e),v(e,a),t.append(a)},clearShip:(e,t)=>{document.querySelectorAll(`#${g(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:y,handleUserInput:()=>s(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(w(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:n,waiting:C,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:B,createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const a=(e=>{const t=document.createElement("div"),a=e.takenBy.name.toLowerCase(),r=e.takenBy.size;return t.classList.add("ship",a,"draggable"),t.setAttribute("data-size",`${r}`),t.setAttribute("data-name",`${a}`),t.setAttribute("draggable","true"),t})(t),r=document.querySelector(".board .cell").getBoundingClientRect().width,s=t.takenBy.size,o=t.takenBy.isVertical;document.querySelector(`#${g(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a),b(a,s,r,o),window.addEventListener("resize",(()=>((e,t,a)=>{const r=document.querySelector(".board .cell").getBoundingClientRect().width;b(e,t,r,a)})(a,s,o)))}))},canBeStarted:k,setInitMessage:L,setStartMessage:A,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:E,getSpeedValue:M,fillCells:P,unFillCells:x,getMuteStatus:()=>p}})(),n=o,l=(()=>{const e=e=>{Object.keys(e).forEach((t=>{const a=e[t].play;e[t].play=function(){return e[t].currentTime>0&&(e[t].pause(),e[t].currentTime=0),n.getMuteStatus()?null:a.call(this)}}))};return(()=>{const t={miss:new Audio("sounds/gray1wea.wav"),hit:new Audio("sounds/explo.wav"),sunk:new Audio("sounds/explodea.wav"),gameOver:new Audio("sounds/capture.wav"),drop:new Audio("sounds/barr1sel.wav"),rotate:new Audio("sounds/drain.wav"),random:new Audio("sounds/exp1sel.wav"),select:new Audio("sounds/msg.wav"),tick:new Audio("sounds/beep.wav"),grab:new Audio("sounds/buttonRev.wav")};return e(t),t})()})(),i=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null,r=1,s=!0,o=!0;const n=(e,t,d,u)=>{if(u.row===d)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,d)&&"hit"===e.getCell(o,d).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,d)&&"hit"!==e.getCell(o,d).status&&"miss"!==e.getCell(o,d).status?(e.receiveAttack(o,d),"hit"===e.getCell(o,d).status?(i(a),c({col:o,row:d}),l.hit.play()):"miss"===e.getCell(o,d).status&&l.miss.play(),r+=1):(r=1,s=!1,n(e,o,d,u))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,d)&&"hit"===e.getCell(o,d).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,d)&&"hit"!==e.getCell(o,d).status&&"miss"!==e.getCell(o,d).status?(e.receiveAttack(o,d),"hit"===e.getCell(o,d).status?(i(a),c({col:o,row:d}),l.hit.play()):"miss"===e.getCell(o,d).status&&l.miss.play(),r+=1):(r=1,s=!0,n(e,o,d,u))}else if(u.col===t)if(o){r=1;let s=(Number(d)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(d)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status?(i(a),c({col:t,row:s}),l.hit.play()):"miss"===e.getCell(t,s).status&&l.miss.play(),r+=1):(r=1,o=!1,n(e,t,s,u))}else{r=1;let s=(Number(d)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(d)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status?(i(a),c({col:t,row:s}),l.hit.play()):"miss"===e.getCell(t,s).status&&l.miss.play(),r+=1):(r=1,o=!0,n(e,t,s,u))}},i=e=>{t=e},c=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s?(i(a),c({col:t,row:r}),l.hit.play()):"miss"===s&&l.miss.play(),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status?(i(a),c({col:r,row:s}),l.hit.play()):"miss"===t.getCell(r,s).status&&l.miss.play(),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),n=e.getCell(r,o);return!(!n||"miss"===n.status||"hit"===n.status)}));if(o.length>0){const n=o[Math.floor(Math.random()*o.length)],d=String.fromCharCode(t.charCodeAt(0)+n.col),u=(Number(s)+n.row).toString();e.receiveAttack(d,u),r=1,"hit"===e.getCell(d,u).status?(i(a),c({col:d,row:u}),l.hit.play()):"miss"===e.getCell(d,u).status&&l.miss.play()}},finishingAttack:n,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:c}};var c=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const d=(()=>{const a=e(),s=e(),o=i(),u=i();let m=!0,h=t("Carrier"),f=t("Battleship"),p=t("Destroyer"),v=t("Submarine"),g=t("PatrolBoat");const y=[h,f,p,v,g],w=()=>{s.placeShip(h,"A","1","horizontal"),s.placeShip(f,"A","3","horizontal"),s.placeShip(p,"A","5","horizontal"),s.placeShip(v,"A","7","horizontal"),s.placeShip(g,"A","9","horizontal"),s.reserveSpaceForAll(s)},S=e=>(n.removeBoardPointer(),n.pVcBtn.classList.contains("selected")&&n.setGameOverMessagePvC(e),n.cVcBtn.classList.contains("selected")&&n.setGameOverMessageCvC(e),l.gameOver.play(),!0),C=()=>s.allSunk(s)?S("player"):!!a.allSunk(a)&&S("computer"),B=e=>{let t;if(e===a?t=u:e===s&&(t=o),e.hitButNotSunk(e)){const a=t.getLastHit(),r=t.getPrevHit(),s=e.getCell(a.col,a.row),o=s.takenBy.hitCount;if(null!==r&&null!==a&&o>=2&&o<=4?t.finishingAttack(e,a.col,a.row,r):1===o&&t.followupAttack(e,a.col,a.row),e.canBeSunk(s)&&(e.sinkShip(e,a.col,a.row),l.sunk.play()),C())return}else{const{col:a,row:r}=t.randomAttack(e),s=e.getCell(a,r);if("hit"===s.status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r}),e.canBeSunk(s)&&(e.sinkShip(e,a,r),l.sunk.play(),t.setPrevHit(null),t.setLastHit(null),C())))return}},b=(e,t)=>c(void 0,void 0,void 0,(function*(){n.waiting(!0),n.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),n.cVcBtn.classList.contains("selected")&&!m&&(B(t),n.refreshBoard(t))})),k=e=>{e.clearBoard(),(e=>{let r;e===a?(h=t("Carrier"),f=t("Battleship"),p=t("Destroyer"),v=t("Submarine"),g=t("PatrolBoat"),r=[h,f,p,v,g]):e===s&&(r=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);d.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],n=()=>o[Math.floor(Math.random()*o.length)],l=()=>Math.ceil(10*Math.random()).toString(),i=()=>Math.random()>.5?"horizontal":"vertical";r.forEach((t=>{let a=n(),r=l(),s=i(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=n(),r=l(),s=i(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),d.humanShips.push(t)}))})(e),n.refreshBoard(e),e===a&&n.createShipOverlay(e)},L=()=>{n.cVcBtn.classList.contains("selected")&&(k(a),k(s),m=!1,c(void 0,void 0,void 0,(function*(){n.removeBoardPointer();let e=!0;for(;!C()&&!m;)yield b(e,e?a:s),e=!e;m=!1,n.waiting(!1)})),n.refreshBoard(a))},A=()=>{m=!0,o.setPrevHit(null),o.setLastHit(null),u.setPrevHit(null),u.setLastHit(null),a.clearBoard(),s.clearBoard(),w(),n.refreshBoard(a),n.refreshBoard(s),n.createShipOverlay(s),r(a,s,y),n.canBeStarted(),L(),y.forEach((e=>{e.isVertical=!1}))};return{init:()=>{n.setInitMessage(),a.generateArray(),s.generateArray(),n.renderBoard(a),n.renderBoard(s),w(),n.refreshBoard(s),n.createShipOverlay(s),r(a,s,y),n.canBeStarted(),L(),n.pVcBtn.disabled=!0},renew:()=>{n.refreshBoard(a),n.refreshBoard(s),n.createShipOverlay(a),n.createShipOverlay(s),r(a,s,y)},humanGameboard:a,computerGameboard:s,restart:A,newGame:()=>c(void 0,void 0,void 0,(function*(){m=!0,yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),m=!1,A()})),start:()=>{n.refreshBoard(a),k(s),m=!1,c(void 0,void 0,void 0,(function*(){let e=!0;for(;!(C()||m||(e&&(yield c(void 0,void 0,void 0,(function*(){n.setTurnMessagePvC(!0),n.setBoardPointer("player"),n.waiting(!1);const{col:e,row:t}=yield n.handleUserInput();o.attack(s,e,t);const a=s.getCell(e,t);s.canBeSunk(a)&&(s.sinkShip(s,e,t),l.sunk.play()),n.refreshBoard(s)})),e=!1),C()||m));)e||(yield c(void 0,void 0,void 0,(function*(){n.setTurnMessagePvC(!1),n.setBoardPointer("computer"),n.waiting(!0),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),n.pVcBtn.classList.contains("selected")&&!m&&(B(a),n.refreshBoard(a))})),e=!0);m=!1,n.waiting(!1)}))},randomizeShipsPlacement:k,humanShips:y}})(),u=d;u.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,