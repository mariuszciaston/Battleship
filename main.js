(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),i=t.indexOf(s);return-1===o||-1===i?null:a[i][o]},o=(r,s,o,i)=>{const l=e.indexOf(r),n=t.indexOf(s);return-1===l||-1===n?null:(a[n][l].status=o,i&&(a[n][l].takenBy=i),a[n][l])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let s;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),r.forEach((e=>{null===e.takenBy&&r.splice(r.indexOf(e),1)})),t===u.humanGameboard?s="firstBoard":t===u.computerGameboard&&(s="secondBoard");document.querySelectorAll(`#${s} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,i,l,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?i:l);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:i,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),h.push(s(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,i)=>{const l="horizontal"===i,n=l?e:t,c=n.indexOf(l?r:o);if(c<0||c+a>n.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?n[c+e]:r,a=l?o:n[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,s=!0,o=!0;const i=(e,t,c,d)=>{if(d.row===c)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!1,i(e,o,c,d))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!0,i(e,o,c,d))}else if(d.col===t)if(o){r=1;let s=(Number(c)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!1,i(e,t,s,d))}else{r=1;let s=(Number(c)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!0,i(e,t,s,d))}},l=e=>{t=e},n=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s&&(l(a),n({col:t,row:r})),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status&&(l(a),n({col:r,row:s})),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),i=e.getCell(r,o);return!(!i||"miss"===i.status||"hit"===i.status)}));if(o.length>0){const i=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+i.col),d=(Number(s)+i.row).toString();e.receiveAttack(c,d),r=1,"hit"===e.getCell(c,d).status&&(l(a),n({col:c,row:d}))}},finishingAttack:i,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:l,setLastHit:n}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const s=(e,t,a)=>{let o,i,l,c,d=0,h=0,m=[];const f={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},p=document.querySelector("#firstBoard"),v=document.querySelector("#secondBoard"),g=p.querySelectorAll(".cell"),S=v.querySelectorAll(".cell"),y=[];for(let e of g)e.classList.contains("taken")||y.push(e);for(let e of S)e.classList.contains("taken")||y.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",B),e.addEventListener("mouseup",C),e.addEventListener("dragstart",b),e.addEventListener("dragend",E),e.addEventListener("contextmenu",M),y.forEach((e=>{e.addEventListener("contextmenu",V)}))}));let w=null;function B(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let o=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),i=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));o.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),i.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)}function C(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)}function b(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;r.style.visibility="hidden",this.classList.add("dragging"),o=r.getAttribute("data-name"),i=Number(r.getAttribute("data-size")),d=a.offsetX,h=a.offsetY,l=f[o],c=l.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&e.removeShip(l,e),"secondBoard"===r.closest(".board").id&&t.removeShip(l,t)}))}function L(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(h/this.offsetHeight):Math.floor(d/this.offsetWidth));const a=[];for(let e=0;e<i;e++){let r=l.isVertical?t+10*e:t+e;g[r]&&(a.push(g[r]),m.push(g[r]))}A(a)&&(a.forEach((e=>{e.classList.add("highlight")})),w||(w=H(m,i)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(h/this.offsetHeight):Math.floor(d/this.offsetWidth));const a=[];for(let e=0;e<i;e++){let r=l.isVertical?t+10*e:t+e;S[r]&&(a.push(S[r]),m.push(S[r]))}A(a)&&(a.forEach((e=>{e.classList.add("highlight")})),w||(w=H(m,i)))}}}function k(){m.forEach((e=>{e.classList.remove("highlight")})),m=[]}function P(a){m.forEach((e=>{e.classList.remove("highlight")}));const r=H(m,i),o=a.target;"firstBoard"===o.closest(".board").id&&l&&null!==w&&(e.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,c)?(e.placeShip(l,r[0].dataset.col,r[0].dataset.row,c),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(l,w[0].dataset.col,w[0].dataset.row,c),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row))),"secondBoard"===o.closest(".board").id&&l&&null!==w&&(t.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,c)?(t.placeShip(l,r[0].dataset.col,r[0].dataset.row,c),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(l,w[0].dataset.col,w[0].dataset.row,c),t.reserveSpace(t,w[0].dataset.col,w[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips),n.canBeStarted(),n.setStartMessage(),w=null}function E(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===m.length&&("firstBoard"===r.closest(".board").id?w&&e.canBePlaced(l.size,w[0].dataset.col,w[0].dataset.row,c)&&(e.placeShip(l,w[0].dataset.col,w[0].dataset.row,c),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)):"secondBoard"===r.closest(".board").id&&w&&t.canBePlaced(l.size,w[0].dataset.col,w[0].dataset.row,c)&&(t.placeShip(l,w[0].dataset.col,w[0].dataset.row,c),t.reserveSpace(t,w[0].dataset.col,w[0].dataset.row),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)))}function A(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===i&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function H(e,t){return e.slice(Math.min(e.length-t,0))}function M(a){a.preventDefault();const r=a.target;let d;"firstBoard"===r.closest(".board").id&&(d=e),"secondBoard"===r.closest(".board").id&&(d=t),o=r.getAttribute("data-name"),i=Number(r.getAttribute("data-size")),l=f[o];const h=l,m=d.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===o));d.removeShip(l,d),d.removeReservedSpace(d),d.shipsPlaced.forEach((e=>{d.reserveSpace(d,e.col,e.row)})),h.rotate(),c=h.isVertical?"vertical":"horizontal",d.canBePlaced(h.size,m[0].col,m[0].row,c)||(h.rotate(),c=h.isVertical?"vertical":"horizontal"),d.placeShip(h,m[0].col,m[0].row,c),d.shipsPlaced.forEach((e=>{d.reserveSpace(d,e.col,e.row)})),n.refreshBoard(d),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips),n.fillCells("second")}function V(e){e.preventDefault()}g.forEach(((e,t)=>{e.addEventListener("dragover",L(t)),e.addEventListener("dragleave",k),e.addEventListener("drop",P)})),S.forEach(((e,t)=>{e.addEventListener("dragover",L(t)),e.addEventListener("dragleave",k),e.addEventListener("drop",P)}))},o=s;var i=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const l=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),r=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),n=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,r,s,n,c],h=document.getElementsByName("speed"),m=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},f=e=>{let t;e===u.humanGameboard?t="firstBoard":e===u.computerGameboard&&(t="secondBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",m(e,a)},p=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},v=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&i(void 0,void 0,void 0,(function*(){L("first"),g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,b()))),d.forEach((e=>e.disabled=!1)),g(!1),S(),y()})),e===s&&i(void 0,void 0,void 0,(function*(){g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,b()))),d.forEach((e=>e.disabled=!1)),g(!1),n.disabled=!0,c.disabled=!0,s.disabled=!0})),u.restart(),B())},g=e=>{document.documentElement.classList.toggle("wait",e)},S=()=>5===u.humanGameboard.shipsPlaced.length&&0===u.computerGameboard.shipsPlaced.length?(L("second"),n.disabled=!1,!0):(n.disabled=!0,!1),y=()=>{e.textContent="Use 'Random Placement' button, then press Start!",window.matchMedia("(min-width: 1024px)").matches&&(e.textContent="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!")},w=()=>{S()&&(e.textContent="You can now begin the game. Press start!")},B=()=>{e.textContent="Restarting..."};a.addEventListener("click",(()=>{L("first"),v(a,s);document.querySelector("#secondBoard").classList.remove("start"),k("first"),n.disabled=!0,a.disabled=!0})),s.addEventListener("click",(()=>{L("first"),L("second"),v(s,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),Promise.all([k("first"),k("second")]),n.disabled=!0,c.disabled=!0,s.disabled=!0})),r.addEventListener("click",(()=>i(void 0,void 0,void 0,(function*(){L("first"),s.classList.contains("selected")&&(L("second"),n.disabled=!0,c.disabled=!0,s.disabled=!0),l.removeBoardPointer(),yield i(void 0,void 0,void 0,(function*(){B(),g(!0),d.forEach((e=>e.disabled=!0)),yield u.newGame(),d.forEach((e=>e.disabled=!1)),g(!1),S(),a.classList.contains("selected")&&y()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),k("first"),n.disabled=!0,a.disabled=!0),s.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([k("first"),k("second")]),n.disabled=!0,c.disabled=!0,s.disabled=!0)})))),n.addEventListener("click",(()=>{u.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),k("second"),n.disabled=!0,c.disabled=!0})),c.addEventListener("click",(()=>{u.computerGameboard.clearBoard(),f(u.computerGameboard),u.randomizeShipsPlacement("first",u.humanGameboard),o(u.humanGameboard,u.computerGameboard,u.humanShips),S(),w(),L("second")}));let C=1e3;h.forEach((e=>{e.addEventListener("click",(()=>{let t=e;t.checked&&(C=Number(t.value))}))}));const b=()=>C;window.addEventListener("resize",y);const L=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},k=e=>i(void 0,void 0,void 0,(function*(){let t;g(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,r)=>{setTimeout((()=>{t.classList.remove("filled"),r===a.length-1&&e()}),b()/120*r)}))})),g(!1)}));return{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===u.humanGameboard?a.id="firstBoard":e===u.computerGameboard&&(a.id="secondBoard"),m(e,a),t.append(a)},refreshBoard:f,handleUserInput:()=>i(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(p(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:s,waiting:g,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${s}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const i=()=>{const e=document.querySelector("html"),t=parseFloat(window.getComputedStyle(e,null).getPropertyValue("font-size"));o?o&&(a.style.width=n/t+"rem",a.style.height=s*(n/t)+"rem"):(a.style.width=s*(n/t)+"rem",a.style.height=n/t+"rem")};let l,n=document.querySelector(".board .cell").getBoundingClientRect().width;i(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,i()})),"first"===e?l="firstBoard":"second"===e&&(l="secondBoard");document.querySelector(`#${l} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},canBeStarted:S,setInitMessage:y,setStartMessage:w,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:B,getSpeedValue:b,fillCells:L,unFillCells:k}})(),n=l;var c=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const d=(()=>{const r=e(),s=e(),i=a(),l=a();let u=!0,h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),p=t("Submarine"),v=t("PatrolBoat");const g=[h,m,f,p,v],S=()=>{s.placeShip(h,"A","1","horizontal"),s.placeShip(m,"A","3","horizontal"),s.placeShip(f,"A","5","horizontal"),s.placeShip(p,"A","7","horizontal"),s.placeShip(v,"A","9","horizontal"),s.reserveSpace(s,"A","1"),s.reserveSpace(s,"A","3"),s.reserveSpace(s,"A","5"),s.reserveSpace(s,"A","7"),s.reserveSpace(s,"A","9")},y=()=>s.allSunk(s)?(n.removeBoardPointer(),n.pVcBtn.classList.contains("selected")&&n.setGameOverMessagePvC("player"),n.cVcBtn.classList.contains("selected")&&n.setGameOverMessageCvC("player"),!0):!!r.allSunk(r)&&(n.removeBoardPointer(),n.pVcBtn.classList.contains("selected")&&n.setGameOverMessagePvC("computer"),n.cVcBtn.classList.contains("selected")&&n.setGameOverMessageCvC("computer"),!0),w=e=>{let t;if(e===r?t=l:e===s&&(t=i),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),y())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),y()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),y()))return}},B=(e,a)=>{a.clearBoard(),(e=>{let a;e===r?(h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),p=t("Submarine"),v=t("PatrolBoat"),a=[h,m,f,p,v]):e===s&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);d.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],i=()=>o[Math.floor(Math.random()*o.length)],l=()=>Math.ceil(10*Math.random()).toString(),n=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=i(),r=l(),s=n(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=i(),r=l(),s=n(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),d.humanShips.push(t)}))})(a),n.refreshBoard(a),"first"===e&&n.createShipOverlay("first",a.shipsPlaced)},C=()=>{n.cVcBtn.classList.contains("selected")&&(B("first",r),B("second",s),u=!1,c(void 0,void 0,void 0,(function*(){n.removeBoardPointer();let e=!0;for(;!y()&&!u;){if(n.waiting(!0),e){if(n.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),!n.cVcBtn.classList.contains("selected")||u)break;w(r),n.refreshBoard(r),e=!1}if(y()||u)break;if(!e){if(n.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),!n.cVcBtn.classList.contains("selected")||u)break;w(s),n.refreshBoard(s),e=!0}}u=!1,n.waiting(!1)})),n.refreshBoard(r))},b=()=>{u=!0,i.setPrevHit(null),i.setLastHit(null),l.setPrevHit(null),l.setLastHit(null),r.clearBoard(),s.clearBoard(),S(),n.refreshBoard(r),n.refreshBoard(s),n.createShipOverlay("second",s.shipsPlaced),o(r,s,g),n.canBeStarted(),C(),g.forEach((e=>{!0===e.isVertical&&(e.isVertical=!1)}))};return{init:()=>{n.setInitMessage(),n.renderBoard(r),n.renderBoard(s),S(),n.refreshBoard(s),n.createShipOverlay("second",s.shipsPlaced),o(r,s,g),n.canBeStarted(),C(),n.unFillCells("first"),n.pVcBtn.disabled=!0},humanGameboard:r,computerGameboard:s,restart:b,newGame:()=>c(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),u=!1,b()})),start:()=>{n.refreshBoard(r),B("second",s),u=!1,c(void 0,void 0,void 0,(function*(){let e=!0;for(;!y()&&!u;){if(e){n.setTurnMessagePvC(e),n.setBoardPointer("player"),n.waiting(!1);const{col:t,row:a}=yield n.handleUserInput();i.attack(s,t,a),s.sinkShip(s,t,a),n.refreshBoard(s),e=!1}if(y()||u)break;if(!e){if(n.setTurnMessagePvC(e),n.setBoardPointer("computer"),n.waiting(!0),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),!n.pVcBtn.classList.contains("selected")||u)break;w(r),n.refreshBoard(r),e=!0}}u=!1,n.waiting(!1)}))},randomizeShipsPlacement:B,humanShips:g}})(),u=d;u.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,