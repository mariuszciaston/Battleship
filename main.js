(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),i=t.indexOf(s);return-1===o||-1===i?null:a[i][o]},o=(r,s,o,i)=>{const l=e.indexOf(r),n=t.indexOf(s);return-1===l||-1===n?null:(a[n][l].status=o,i&&(a[n][l].takenBy=i),a[n][l])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let s;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),r.forEach((e=>{null===e.takenBy&&r.splice(r.indexOf(e),1)})),t===n.humanGameboard?s="firstBoard":t===n.computerGameboard&&(s="secondBoard");document.querySelectorAll(`#${s} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,i,l,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?i:l);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:i,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),h.push(s(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,i)=>{const l="horizontal"===i,n=l?e:t,c=n.indexOf(l?r:o);if(c<0||c+a>n.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?n[c+e]:r,a=l?o:n[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,s=!0,o=!0;const i=(e,t,c,d)=>{if(d.row===c)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!1,i(e,o,c,d))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!0,i(e,o,c,d))}else if(d.col===t)if(o){r=1;let s=(Number(c)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!1,i(e,t,s,d))}else{r=1;let s=(Number(c)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!0,i(e,t,s,d))}},l=e=>{t=e},n=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s&&(l(a),n({col:t,row:r})),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status&&(l(a),n({col:r,row:s})),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),i=e.getCell(r,o);return!(!i||"miss"===i.status||"hit"===i.status)}));if(o.length>0){const i=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+i.col),d=(Number(s)+i.row).toString();e.receiveAttack(c,d),r=1,"hit"===e.getCell(c,d).status&&(l(a),n({col:c,row:d}))}},finishingAttack:i,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:l,setLastHit:n}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const s=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),o=document.querySelector("#newGame"),i=document.querySelector("#computerVsComputer"),l=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,o,i,l,c],u=document.getElementsByName("speed"),h=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},m=e=>{let t;e===n.humanGameboard?t="firstBoard":e===n.computerGameboard&&(t="secondBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",h(e,a)},f=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},p=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&r(void 0,void 0,void 0,(function*(){k("first"),g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,L()))),d.forEach((e=>e.disabled=!1)),g(!1),S(),w()})),e===i&&r(void 0,void 0,void 0,(function*(){g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,L()))),d.forEach((e=>e.disabled=!1)),g(!1),l.disabled=!0,c.disabled=!0,i.disabled=!0})),n.restart(),B())},g=e=>{document.documentElement.classList.toggle("wait",e)},v=(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${s}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const i=()=>{o?o&&(a.style.width=n/16+"rem",a.style.height=s*(n/16)+"rem"):(a.style.width=s*(n/16)+"rem",a.style.height=n/16+"rem")};let l,n=document.querySelector(".board .cell").getBoundingClientRect().width;i(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,i()})),"first"===e?l="firstBoard":"second"===e&&(l="secondBoard");document.querySelector(`#${l} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},S=()=>5===n.humanGameboard.shipsPlaced.length&&0===n.computerGameboard.shipsPlaced.length?(k("second"),l.disabled=!1,!0):(l.disabled=!0,!1),w=()=>{e.textContent="Use 'Random Placement' button, then press Start!",window.matchMedia("(min-width: 1024px)").matches&&(e.textContent="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!")},y=()=>{S()&&(e.textContent="You can now begin the game. Press start!")},B=()=>{e.textContent="Restarting..."},C=(e,t,a)=>{let s,o,i,l,c=0,d=0,u=[];const h={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},f=document.querySelector("#firstBoard"),p=document.querySelector("#secondBoard"),g=f.querySelectorAll(".cell"),w=p.querySelectorAll(".cell"),B=[];for(let e of g)e.classList.contains("taken")||B.push(e);for(let e of w)e.classList.contains("taken")||B.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",L),e.addEventListener("mouseup",k),e.addEventListener("dragstart",P),e.addEventListener("dragend",V),e.addEventListener("contextmenu",G),B.forEach((e=>{e.addEventListener("contextmenu",z)}))}));let b=null;function L(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),o=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),o.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),m(e),m(t),v("first",e.shipsPlaced),v("second",t.shipsPlaced),C(e,t,n.humanShips)}function k(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),m(e),m(t),v("first",e.shipsPlaced),v("second",t.shipsPlaced),C(e,t,n.humanShips)}function P(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;r.style.visibility="hidden",this.classList.add("dragging"),s=r.getAttribute("data-name"),o=Number(r.getAttribute("data-size")),c=a.offsetX,d=a.offsetY,i=h[s],l=i.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&e.removeShip(i,e),"secondBoard"===r.closest(".board").id&&t.removeShip(i,t)}))}function E(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),i)){let t=e-(i.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<o;e++){let r=i.isVertical?t+10*e:t+e;g[r]&&(a.push(g[r]),u.push(g[r]))}M(a)&&(a.forEach((e=>{e.classList.add("highlight")})),b||(b=q(u,o)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),i)){let t=e-(i.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<o;e++){let r=i.isVertical?t+10*e:t+e;w[r]&&(a.push(w[r]),u.push(w[r]))}M(a)&&(a.forEach((e=>{e.classList.add("highlight")})),b||(b=q(u,o)))}}}function A(){u.forEach((e=>{e.classList.remove("highlight")})),u=[]}function H(a){u.forEach((e=>{e.classList.remove("highlight")}));const r=q(u,o),s=a.target;"firstBoard"===s.closest(".board").id&&i&&null!==b&&(e.canBePlaced(i.size,r[0].dataset.col,r[0].dataset.row,l)?(e.placeShip(i,r[0].dataset.col,r[0].dataset.row,l),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(i,b[0].dataset.col,b[0].dataset.row,l),e.reserveSpace(e,b[0].dataset.col,b[0].dataset.row))),"secondBoard"===s.closest(".board").id&&i&&null!==b&&(t.canBePlaced(i.size,r[0].dataset.col,r[0].dataset.row,l)?(t.placeShip(i,r[0].dataset.col,r[0].dataset.row,l),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(i,b[0].dataset.col,b[0].dataset.row,l),t.reserveSpace(t,b[0].dataset.col,b[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),m(e),m(t),v("first",e.shipsPlaced),v("second",t.shipsPlaced),C(e,t,n.humanShips),S(),y(),b=null}function V(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===u.length&&("firstBoard"===r.closest(".board").id?b&&e.canBePlaced(i.size,b[0].dataset.col,b[0].dataset.row,l)&&(e.placeShip(i,b[0].dataset.col,b[0].dataset.row,l),e.reserveSpace(e,b[0].dataset.col,b[0].dataset.row),m(e),m(t),v("first",e.shipsPlaced),v("second",t.shipsPlaced),C(e,t,n.humanShips)):"secondBoard"===r.closest(".board").id&&b&&t.canBePlaced(i.size,b[0].dataset.col,b[0].dataset.row,l)&&(t.placeShip(i,b[0].dataset.col,b[0].dataset.row,l),t.reserveSpace(t,b[0].dataset.col,b[0].dataset.row),m(e),m(t),v("first",e.shipsPlaced),v("second",t.shipsPlaced),C(e,t,n.humanShips)))}function M(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===o&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function q(e,t){return e.slice(Math.min(e.length-t,0))}function G(a){a.preventDefault();const r=a.target;let c;"firstBoard"===r.closest(".board").id&&(c=e),"secondBoard"===r.closest(".board").id&&(c=t),s=r.getAttribute("data-name"),o=Number(r.getAttribute("data-size")),i=h[s];const d=i,u=c.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===s));c.removeShip(i,c),c.removeReservedSpace(c),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),d.rotate(),l=d.isVertical?"vertical":"horizontal",c.canBePlaced(d.size,u[0].col,u[0].row,l)||(d.rotate(),l=d.isVertical?"vertical":"horizontal"),c.placeShip(d,u[0].col,u[0].row,l),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),m(c),v("first",e.shipsPlaced),v("second",t.shipsPlaced),C(e,t,n.humanShips)}function z(e){e.preventDefault()}g.forEach(((e,t)=>{e.addEventListener("dragover",E(t)),e.addEventListener("dragleave",A),e.addEventListener("drop",H)})),w.forEach(((e,t)=>{e.addEventListener("dragover",E(t)),e.addEventListener("dragleave",A),e.addEventListener("drop",H)}))};a.addEventListener("click",(()=>{k("first"),p(a,i);document.querySelector("#secondBoard").classList.remove("start"),P("first"),l.disabled=!0,a.disabled=!0})),i.addEventListener("click",(()=>{k("first"),k("second"),p(i,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),Promise.all([P("first"),P("second")]),l.disabled=!0,c.disabled=!0,i.disabled=!0})),o.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){k("first"),i.classList.contains("selected")&&(k("second"),l.disabled=!0,c.disabled=!0,i.disabled=!0),s.removeBoardPointer(),yield r(void 0,void 0,void 0,(function*(){B(),g(!0),d.forEach((e=>e.disabled=!0)),yield n.newGame(),d.forEach((e=>e.disabled=!1)),g(!1),S(),a.classList.contains("selected")&&w()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),P("first"),l.disabled=!0,a.disabled=!0),i.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([P("first"),P("second")]),l.disabled=!0,c.disabled=!0,i.disabled=!0)})))),l.addEventListener("click",(()=>{n.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),P("second"),l.disabled=!0,c.disabled=!0})),c.addEventListener("click",(()=>{n.computerGameboard.clearBoard(),m(n.computerGameboard),n.randomizeShipsPlacement("first",n.humanGameboard),C(n.humanGameboard,n.computerGameboard,n.humanShips),S(),y(),k("second")}));let b=1e3;u.forEach((e=>{e.addEventListener("click",(()=>{let t=e;t.checked&&(b=Number(t.value))}))}));const L=()=>b;window.addEventListener("resize",w);const k=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},P=e=>r(void 0,void 0,void 0,(function*(){let t;g(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,r)=>{setTimeout((()=>{t.classList.remove("filled"),r===a.length-1&&e()}),L()/120*r)}))})),g(!1)}));return{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===n.humanGameboard?a.id="firstBoard":e===n.computerGameboard&&(a.id="secondBoard"),h(e,a),t.append(a)},refreshBoard:m,handleUserInput:()=>r(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(f(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:i,waiting:g,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:v,dragAndDrop:C,canBeStarted:S,setInitMessage:w,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:B,getSpeedValue:L,unFillCells:P}})(),o=s;var i=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const l=(()=>{const r=e(),s=e(),n=a(),c=a();let d=!0,u=t("Carrier"),h=t("Battleship"),m=t("Destroyer"),f=t("Submarine"),p=t("PatrolBoat");const g=[u,h,m,f,p],v=()=>{s.placeShip(u,"A","1","horizontal"),s.placeShip(h,"A","3","horizontal"),s.placeShip(m,"A","5","horizontal"),s.placeShip(f,"A","7","horizontal"),s.placeShip(p,"A","9","horizontal"),s.reserveSpace(s,"A","1"),s.reserveSpace(s,"A","3"),s.reserveSpace(s,"A","5"),s.reserveSpace(s,"A","7"),s.reserveSpace(s,"A","9")},S=()=>s.allSunk(s)?(o.removeBoardPointer(),o.pVcBtn.classList.contains("selected")&&o.setGameOverMessagePvC("player"),o.cVcBtn.classList.contains("selected")&&o.setGameOverMessageCvC("player"),!0):!!r.allSunk(r)&&(o.removeBoardPointer(),o.pVcBtn.classList.contains("selected")&&o.setGameOverMessagePvC("computer"),o.cVcBtn.classList.contains("selected")&&o.setGameOverMessageCvC("computer"),!0),w=e=>{let t;if(e===r?t=c:e===s&&(t=n),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),S())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),S()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),S()))return}},y=(e,a)=>{a.clearBoard(),(e=>{let a;e===r?(u=t("Carrier"),h=t("Battleship"),m=t("Destroyer"),f=t("Submarine"),p=t("PatrolBoat"),a=[u,h,m,f,p]):e===s&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);l.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],i=()=>o[Math.floor(Math.random()*o.length)],n=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=i(),r=n(),s=c(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=i(),r=n(),s=c(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),l.humanShips.push(t)}))})(a),o.refreshBoard(a),"first"===e&&o.createShipOverlay("first",a.shipsPlaced)},B=()=>{o.cVcBtn.classList.contains("selected")&&(y("first",r),y("second",s),d=!1,i(void 0,void 0,void 0,(function*(){o.removeBoardPointer();let e=!0;for(;!S()&&!d;){if(o.waiting(!0),e){if(o.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,o.getSpeedValue()))),!o.cVcBtn.classList.contains("selected")||d)break;w(r),o.refreshBoard(r),e=!1}if(S()||d)break;if(!e){if(o.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,o.getSpeedValue()))),!o.cVcBtn.classList.contains("selected")||d)break;w(s),o.refreshBoard(s),e=!0}}d=!1,o.waiting(!1)})),o.refreshBoard(r))},C=()=>{d=!0,n.setPrevHit(null),n.setLastHit(null),c.setPrevHit(null),c.setLastHit(null),r.clearBoard(),s.clearBoard(),v(),o.refreshBoard(r),o.refreshBoard(s),o.createShipOverlay("second",s.shipsPlaced),o.dragAndDrop(r,s,g),o.canBeStarted(),B(),g.forEach((e=>{!0===e.isVertical&&(e.isVertical=!1)}))};return{init:()=>{o.setInitMessage(),o.renderBoard(r),o.renderBoard(s),v(),o.refreshBoard(s),o.createShipOverlay("second",s.shipsPlaced),o.dragAndDrop(r,s,g),o.canBeStarted(),B(),o.unFillCells("first"),o.pVcBtn.disabled=!0},humanGameboard:r,computerGameboard:s,restart:C,newGame:()=>i(void 0,void 0,void 0,(function*(){d=!0,yield new Promise((e=>setTimeout(e,o.getSpeedValue()))),d=!1,C()})),start:()=>{o.refreshBoard(r),y("second",s),d=!1,i(void 0,void 0,void 0,(function*(){let e=!0;for(;!S()&&!d;){if(e){o.setTurnMessagePvC(e),o.setBoardPointer("player"),o.waiting(!1);const{col:t,row:a}=yield o.handleUserInput();n.attack(s,t,a),s.sinkShip(s,t,a),o.refreshBoard(s),e=!1}if(S()||d)break;if(!e){if(o.setTurnMessagePvC(e),o.setBoardPointer("computer"),o.waiting(!0),yield new Promise((e=>setTimeout(e,o.getSpeedValue()))),!o.pVcBtn.classList.contains("selected")||d)break;w(r),o.refreshBoard(r),e=!0}}d=!1,o.waiting(!1)}))},randomizeShipsPlacement:y,humanShips:g}})(),n=l;n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FDbkIsQ0FDSixDQUNBUyxHQUFZLEVBQ1osRUFBR2hILFNBQVEsRUFDZixHQXNHMEIsRUFzQ2lEMkYsMEJBQXlCOUIsYUFDdkcsRUF6UWtCLEdBMFFuQixJQ3BSQSxFQUFXZ0UsTSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9nYW1lYm9hcmQudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL3NoaXAudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL3BsYXllci50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvdWkudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuY29uc3QgZ2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBjb2xzID0gWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJ107XG4gICAgY29uc3Qgcm93cyA9IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnMTAnXTtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGNvbnN0IHNoaXBzUGxhY2VkID0gW107XG4gICAgY29uc3QgZ2VuZXJhdGVBcnJheSA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV1bal0gPSB7IGNvbDogY29sc1tqXSwgcm93OiByb3dzW2ldLCBzdGF0dXM6ICdlbXB0eScsIHRha2VuQnk6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgY2xlYXJCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXVtqXS5zdGF0dXMgPSAnZW1wdHknO1xuICAgICAgICAgICAgICAgIGFycmF5W2ldW2pdLnRha2VuQnkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2hpcHNQbGFjZWQubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIGNvbnN0IGdldENlbGwgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY29sSW5kZXggPSBjb2xzLmluZGV4T2YoY29sKTtcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcbiAgICAgICAgaWYgKGNvbEluZGV4ID09PSAtMSB8fCByb3dJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q2VsbCA9IChjb2wsIHJvdywgbmV3U3RhdHVzLCBuZXdUYWtlbkJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4ID0gY29scy5pbmRleE9mKGNvbCk7XG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcm93cy5pbmRleE9mKHJvdyk7XG4gICAgICAgIGlmIChjb2xJbmRleCA9PT0gLTEgfHwgcm93SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdLnN0YXR1cyA9IG5ld1N0YXR1cztcbiAgICAgICAgaWYgKG5ld1Rha2VuQnkpIHtcbiAgICAgICAgICAgIGFycmF5W3Jvd0luZGV4XVtjb2xJbmRleF0udGFrZW5CeSA9IG5ld1Rha2VuQnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5W3Jvd0luZGV4XVtjb2xJbmRleF07XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVTaGlwID0gKHNoaXAsIGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBnYW1lYm9hcmRDZWxscyA9IGdhbWVib2FyZC5hcnJheS5mbGF0KCk7XG4gICAgICAgIGdhbWVib2FyZENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ3Rha2VuJyAmJiBjZWxsLnRha2VuQnkubmFtZSA9PT0gc2hpcC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2VsbC5zdGF0dXMgPSAnZW1wdHknO1xuICAgICAgICAgICAgICAgIGNlbGwudGFrZW5CeSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaGlwc1BsYWNlZC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXAudGFrZW5CeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzaGlwc1BsYWNlZC5zcGxpY2Uoc2hpcHNQbGFjZWQuaW5kZXhPZihzaGlwKSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgYm9hcmRJZDtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgICAgICBib2FyZElkID0gJ2ZpcnN0Qm9hcmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgYm9hcmRJZCA9ICdzZWNvbmRCb2FyZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCMke2JvYXJkSWR9IC5jZWxsYCk7XG4gICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWtlbicpICYmIGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXNoaXBOYW1lJykgPT09IHNoaXAubmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgndGFrZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdlbXB0eScpO1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zaGlwTmFtZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pID0+IHtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2hpcC5pc1ZlcnRpY2FsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICBjb25zdCBjZWxscyA9IGlzSG9yaXpvbnRhbCA/IGNvbHMgOiByb3dzO1xuICAgICAgICBjb25zdCBzdGFydCA9IGNlbGxzLmluZGV4T2YoaXNIb3Jpem9udGFsID8gY29sIDogcm93KTtcbiAgICAgICAgbGV0IHNoaXBDZWxscyA9IFtdO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2hpcC5zaXplID4gY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLnNpemU7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbCA9IGlzSG9yaXpvbnRhbCA/IGNlbGxzW3N0YXJ0ICsgaV0gOiBjb2w7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gaXNIb3Jpem9udGFsID8gcm93IDogY2VsbHNbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIGlmIChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyAhPT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENlbGwoY3VycmVudENvbCwgY3VycmVudFJvdywgJ3Rha2VuJywgc2hpcCk7XG4gICAgICAgICAgICBzaGlwQ2VsbHMucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpKTtcbiAgICAgICAgfVxuICAgICAgICBzaGlwc1BsYWNlZC5wdXNoKHNoaXBDZWxsc1swXSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgY2FuQmVQbGFjZWQgPSAoc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gaXNIb3Jpem9udGFsID8gY29scyA6IHJvd3M7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gY2VsbHMuaW5kZXhPZihpc0hvcml6b250YWwgPyBjb2wgOiByb3cpO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2l6ZSA+IGNlbGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZUVtcHR5ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sID0gaXNIb3Jpem9udGFsID8gY2VsbHNbc3RhcnQgKyBpXSA6IGNvbDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSBpc0hvcml6b250YWwgPyByb3cgOiBjZWxsc1tzdGFydCArIGldO1xuICAgICAgICAgICAgYXJlRW1wdHkucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyA9PT0gJ2VtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZUVtcHR5LmV2ZXJ5KChpdGVtKSA9PiBpdGVtID09PSB0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdldENlbGwoY29sLCByb3cpO1xuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICd0YWtlbicpIHtcbiAgICAgICAgICAgIGNlbGwudGFrZW5CeS5oaXQoKTtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdoaXQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICdlbXB0eScgfHwgY2VsbC5zdGF0dXMgPT09ICdyZXNlcnZlZCcpIHtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdtaXNzJyk7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZWNlaXZlQXJvdW5kID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAnZW1wdHknKSB7XG4gICAgICAgICAgICBzZXRDZWxsKGNvbCwgcm93LCAncmVzZXJ2ZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2VydmVTcGFjZSA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwudGFrZW5CeSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXJvdW5kKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVJlc2VydmVkU3BhY2UgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgZ2FtZWJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAncmVzZXJ2ZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2VsbChjZWxsLmNvbCwgY2VsbC5yb3csICdlbXB0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNpbmtTaGlwID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50YWtlbkJ5ICYmIGNlbGwudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhpdEJ1dE5vdFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgcmV0dXJuIGdhbWVib2FyZENlbGxzLnNvbWUoKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ2hpdCcgJiYgY2VsbC50YWtlbkJ5LmlzU3VuaygpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGFsbFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgbGV0IHRha2VuQnlDZWxscyA9IGdhbWVib2FyZENlbGxzLmZpbHRlcigoY2VsbCkgPT4gY2VsbC50YWtlbkJ5KTtcbiAgICAgICAgaWYgKHRha2VuQnlDZWxscy5sZW5ndGggPiAwICYmIHRha2VuQnlDZWxscy5ldmVyeSgoY2VsbCkgPT4gY2VsbC50YWtlbkJ5LmlzU3VuaygpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGdlbmVyYXRlQXJyYXkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjbGVhckJvYXJkLFxuICAgICAgICBnZXRDZWxsLFxuICAgICAgICBzZXRDZWxsLFxuICAgICAgICByZW1vdmVTaGlwLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIHJlY2VpdmVBcm91bmQsXG4gICAgICAgIHJlc2VydmVTcGFjZSxcbiAgICAgICAgaGl0QnV0Tm90U3VuayxcbiAgICAgICAgc2lua1NoaXAsXG4gICAgICAgIGFsbFN1bmssXG4gICAgICAgIGFycmF5LFxuICAgICAgICBjYW5CZVBsYWNlZCxcbiAgICAgICAgc2hpcHNQbGFjZWQsXG4gICAgICAgIHJlbW92ZVJlc2VydmVkU3BhY2UsXG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBnYW1lYm9hcmRGYWN0b3J5O1xuIiwiY29uc3Qgc2hpcEZhY3RvcnkgPSAobmFtZSkgPT4ge1xuICAgIGxldCBzaXplO1xuICAgIGlmIChuYW1lID09PSAnQ2FycmllcicpIHtcbiAgICAgICAgc2l6ZSA9IDU7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnQmF0dGxlc2hpcCcpIHtcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnRGVzdHJveWVyJykge1xuICAgICAgICBzaXplID0gMztcbiAgICB9XG4gICAgaWYgKG5hbWUgPT09ICdTdWJtYXJpbmUnKSB7XG4gICAgICAgIHNpemUgPSAzO1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ1BhdHJvbEJvYXQnKSB7XG4gICAgICAgIHNpemUgPSAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBzaXplLFxuICAgICAgICBoaXRDb3VudDogMCxcbiAgICAgICAgaXNWZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgIHJvdGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9ICF0aGlzLmlzVmVydGljYWw7XG4gICAgICAgIH0sXG4gICAgICAgIGhpdCgpIHtcbiAgICAgICAgICAgIHRoaXMuaGl0Q291bnQgKz0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNTdW5rKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGl0Q291bnQgPT09IHNpemU7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBzaGlwRmFjdG9yeTtcbiIsImNvbnN0IHBsYXllckZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3QgY29scyA9IFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSiddO1xuICAgIGxldCBwcmV2SGl0ID0gbnVsbDtcbiAgICBsZXQgbGFzdEhpdCA9IG51bGw7XG4gICAgY29uc3QgYXR0YWNrID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBjb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FscmVhZHkgc2hvdCc7XG4gICAgfTtcbiAgICBjb25zdCByYW5kb21BdHRhY2sgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGxldCByYW5kb21Db2w7XG4gICAgICAgIGxldCByYW5kb21Sb3c7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJhbmRvbUNvbCA9IGNvbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29scy5sZW5ndGgpXTtcbiAgICAgICAgICAgIHJhbmRvbVJvdyA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdoaXQnIHx8IGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdtaXNzJyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHJhbmRvbUNvbCwgcmFuZG9tUm93KTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogcmFuZG9tQ29sLCByb3c6IHJhbmRvbVJvdyB9KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayBwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayBsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayByYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdCwgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0OiAnYWxyZWFkeSBzaG90JywgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH07XG4gICAgfTtcbiAgICBjb25zdCBmb2xsb3d1cEF0dGFjayA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXG4gICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgeyBjb2w6IDAsIHJvdzogMSB9LFxuICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IDAgfSxcbiAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgdmFsaWREaXJlY3Rpb25zID0gZGlyZWN0aW9ucy5maWx0ZXIoKGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihyb3cpICsgZGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnN0YXR1cyAhPT0gJ21pc3MnICYmIGNlbGwuc3RhdHVzICE9PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHZhbGlkRGlyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPSB2YWxpZERpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsaWREaXJlY3Rpb25zLmxlbmd0aCldO1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmRvbURpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihyb3cpICsgcmFuZG9tRGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogbmV3Q29sLCByb3c6IG5ld1JvdyB9KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZvbGxvd3VwQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZm9sbG93dXBBdHRhY2sgbGFzdEhpdCcsIGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdmb2xsb3d1cEF0dGFjayByYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdOaWUgbWEgZG9zdMSZcG55Y2gga2llcnVua8OzdyBkbyBhdGFrdScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmFuZ2UgPSAxO1xuICAgIGxldCBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICBsZXQgZ29Eb3duID0gdHJ1ZTtcbiAgICBjb25zdCBmaW5pc2hpbmdBdHRhY2sgPSAoZ2FtZWJvYXJkLCBjb2wsIHJvdywgcHJldkhpdCkgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnc3RhcnQgZmluaXNoaW5nQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3N0YXJ0IGZpbmlzaGluZ0F0dGFjayBsYXN0SGl0JywgeyBjb2wsIHJvdyB9KTtcbiAgICAgICAgaWYgKHByZXZIaXQucm93ID09PSByb3cpIHtcbiAgICAgICAgICAgIC8vIGhvcml6b250YWwgc2hpcCBjYXNlXG4gICAgICAgICAgICBpZiAoZ29SaWdodCkge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZ29SaWdodCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIG5ld0NvbCwgcm93LCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2dvTGVmdCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSAtIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgbmV3Q29sLCByb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2SGl0LmNvbCA9PT0gY29sKSB7XG4gICAgICAgICAgICAvLyB2ZXJ0aWNhbCBzaGlwIGNhc2VcbiAgICAgICAgICAgIGlmIChnb0Rvd24pIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2dvRG93bicpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyByYW5nZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld1JvdyA9IChOdW1iZXIocm93KSArIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBjb2wsIG5ld1JvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb1VwJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1JvdyA9IChOdW1iZXIocm93KSAtIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1JvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Um93ID0gKE51bWJlcihyb3cpIC0gcmFuZ2UpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1JvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyAhPT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyAhPT0gJ21pc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQcmV2SGl0KGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogY29sLCByb3c6IG5ld1JvdyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncHJldkhpdCcsIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbGFzdEhpdCcsIGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmFuZ2UnLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZ29Eb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgY29sLCBuZXdSb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZ2V0UHJldkhpdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHByZXZIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBnZXRMYXN0SGl0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbGFzdEhpdDtcbiAgICB9O1xuICAgIGNvbnN0IHNldFByZXZIaXQgPSAobmV3UHJldkhpdCkgPT4ge1xuICAgICAgICBwcmV2SGl0ID0gbmV3UHJldkhpdDtcbiAgICB9O1xuICAgIGNvbnN0IHNldExhc3RIaXQgPSAobmV3TGFzdEhpdCkgPT4ge1xuICAgICAgICBsYXN0SGl0ID0gbmV3TGFzdEhpdDtcbiAgICB9O1xuICAgIHJldHVybiB7IGF0dGFjaywgcmFuZG9tQXR0YWNrLCBmb2xsb3d1cEF0dGFjaywgZmluaXNoaW5nQXR0YWNrLCBwcmV2SGl0LCBsYXN0SGl0LCBnZXRQcmV2SGl0LCBnZXRMYXN0SGl0LCBzZXRQcmV2SGl0LCBzZXRMYXN0SGl0IH07XG59O1xuZXhwb3J0IGRlZmF1bHQgcGxheWVyRmFjdG9yeTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmNvbnN0IHVpID0gKCgpID0+IHtcbiAgICBjb25zdCBzdGF0dXNCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVzc2FnZUJveCBwJyk7XG4gICAgY29uc3QgYm9hcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2JvYXJkcycpO1xuICAgIGNvbnN0IHBWY0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwbGF5ZXJWc0NvbXB1dGVyJyk7XG4gICAgY29uc3QgbmV3R2FtZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXdHYW1lJyk7XG4gICAgY29uc3QgY1ZjQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbXB1dGVyVnNDb21wdXRlcicpO1xuICAgIGNvbnN0IHN0YXJ0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N0YXJ0Jyk7XG4gICAgY29uc3QgcmFuZG9tQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3JhbmRvbVBsYWNlbWVudCcpO1xuICAgIGNvbnN0IGFsbEJ0bnMgPSBbcFZjQnRuLCBuZXdHYW1lQnRuLCBjVmNCdG4sIHN0YXJ0QnRuLCByYW5kb21CdG5dO1xuICAgIGNvbnN0IHNwZWVkcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKCdzcGVlZCcpO1xuICAgIGNvbnN0IGNyZWF0ZUNlbGwgPSAoY2VsbCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnY2VsbCcpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2VsbC5zdGF0dXMpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1jb2wnLCBjZWxsLmNvbCk7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXJvdycsIGNlbGwucm93KTtcbiAgICAgICAgaWYgKGNlbGwudGFrZW5CeSkge1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc2hpcE5hbWUnLCBjZWxsLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlckNlbGxzID0gKGdhbWVib2FyZCwgYm9hcmQpID0+IHtcbiAgICAgICAgZ2FtZWJvYXJkLmFycmF5LmZvckVhY2goKHJvdykgPT4ge1xuICAgICAgICAgICAgcm93LmZvckVhY2goKGNvbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjcmVhdGVDZWxsKGNvbCk7XG4gICAgICAgICAgICAgICAgYm9hcmQuYXBwZW5kKGNlbGwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcmVuZGVyQm9hcmQgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGJvYXJkLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIGJvYXJkLmlkID0gJ2ZpcnN0Qm9hcmQnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZCA9PT0gY29udHJvbGxlci5jb21wdXRlckdhbWVib2FyZCkge1xuICAgICAgICAgICAgYm9hcmQuaWQgPSAnc2Vjb25kQm9hcmQnO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlckNlbGxzKGdhbWVib2FyZCwgYm9hcmQpO1xuICAgICAgICBib2FyZHMuYXBwZW5kKGJvYXJkKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlZnJlc2hCb2FyZCA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgbGV0IGJvYXJkSWQ7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIGJvYXJkSWQgPSAnZmlyc3RCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZElkID0gJ3NlY29uZEJvYXJkJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2JvYXJkSWR9YCk7XG4gICAgICAgIGJvYXJkLmlubmVySFRNTCA9ICcnO1xuICAgICAgICByZW5kZXJDZWxscyhnYW1lYm9hcmQsIGJvYXJkKTtcbiAgICB9O1xuICAgIGNvbnN0IGdldFVzZXJJbnB1dCA9IChlKSA9PiB7XG4gICAgICAgIGlmICghZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSAmJiAhZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdtaXNzJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb2wnKTtcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1yb3cnKTtcbiAgICAgICAgICAgIHJldHVybiB7IGNvbCwgcm93IH07XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhhbmRsZVVzZXJJbnB1dCA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyNzZWNvbmRCb2FyZCAuY2VsbCcpO1xuICAgICAgICBsZXQgdXNlcklucHV0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB1c2VySW5wdXQgPSB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjZWxsLmNsYXNzTGlzdC5jb250YWlucygnaGl0JykgJiYgIWNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdtaXNzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZ2V0VXNlcklucHV0KGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsgb25jZTogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gd2hpbGUgKCF1c2VySW5wdXQpO1xuICAgICAgICBjb25zdCBjb2wgPSB1c2VySW5wdXQuY29sLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHJvdyA9IHVzZXJJbnB1dC5yb3cudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHsgY29sLCByb3cgfTtcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVQdkMgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICB3YWl0aW5nKHRydWUpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IHRydWUpKTtcbiAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZ2V0U3BlZWRWYWx1ZSgpKSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgICAgIGNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBzZXRJbml0TWVzc2FnZSgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZU5ld0dhbWUgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgc2V0UmVzdGFydE1lc3NhZ2UoKTtcbiAgICAgICAgd2FpdGluZyh0cnVlKTtcbiAgICAgICAgYWxsQnRucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSB0cnVlKSk7XG4gICAgICAgIHlpZWxkIGNvbnRyb2xsZXIubmV3R2FtZSgpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IGZhbHNlKSk7XG4gICAgICAgIHdhaXRpbmcoZmFsc2UpO1xuICAgICAgICBjYW5CZVN0YXJ0ZWQoKTtcbiAgICAgICAgaWYgKHBWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNldEluaXRNZXNzYWdlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVDdkMgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgd2FpdGluZyh0cnVlKTtcbiAgICAgICAgYWxsQnRucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSB0cnVlKSk7XG4gICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGdldFNwZWVkVmFsdWUoKSkpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IGZhbHNlKSk7XG4gICAgICAgIHdhaXRpbmcoZmFsc2UpO1xuICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIGNWY0J0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlR2FtZU1vZGUgPSAoc2VsZWN0ZWRFbGVtZW50LCBkZXNlbGVjdGVkRWxlbWVudCkgPT4ge1xuICAgICAgICBkZXNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIXNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRWxlbWVudCA9PT0gcFZjQnRuKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlUHZDKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRFbGVtZW50ID09PSBjVmNCdG4pIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVDdkMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzdGFydCgpO1xuICAgICAgICAgICAgc2V0UmVzdGFydE1lc3NhZ2UoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgd2FpdGluZyA9IChib29sKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCd3YWl0JywgYm9vbCk7XG4gICAgfTtcbiAgICBjb25zdCBzZXRCb2FyZFBvaW50ZXIgPSAod2hpY2gpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIGlmICh3aGljaCA9PT0gJ3BsYXllcicpIHtcbiAgICAgICAgICAgIHNlY29uZC5jbGFzc0xpc3QuYWRkKCdib2FyZE91dGxpbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh3aGljaCA9PT0gJ2NvbXB1dGVyJykge1xuICAgICAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5yZW1vdmUoJ2JvYXJkT3V0bGluZScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVCb2FyZFBvaW50ZXIgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnYm9hcmRPdXRsaW5lJyk7XG4gICAgfTtcbiAgICBjb25zdCBjcmVhdGVTaGlwT3ZlcmxheSA9IChnYW1lYm9hcmROYW1lLCBzaGlwcykgPT4ge1xuICAgICAgICBzaGlwcy5mb3JFYWNoKChmaXJzdENlbGwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICBjb25zdCBzaGlwTmFtZSA9IGZpcnN0Q2VsbC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBTaXplID0gZmlyc3RDZWxsLnRha2VuQnkuc2l6ZTtcbiAgICAgICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSBmaXJzdENlbGwudGFrZW5CeS5pc1ZlcnRpY2FsO1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnc2hpcCcsIHNoaXBOYW1lKTtcbiAgICAgICAgICAgIHNoaXBFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zaXplJywgYCR7c2hpcFNpemV9YCk7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScsIGAke3NoaXBOYW1lfWApO1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZHJhZ2dhYmxlJyk7XG4gICAgICAgICAgICBjb25zdCBzZXRTaGlwU3R5bGUgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoaXBFbGVtZW50LnN0eWxlLndpZHRoID0gc2hpcFNpemUgKiAoY2VsbFNpemUgLyAxNikgKyAncmVtJztcbiAgICAgICAgICAgICAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gY2VsbFNpemUgLyAxNiArICdyZW0nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoaXBFbGVtZW50LnN0eWxlLndpZHRoID0gY2VsbFNpemUgLyAxNiArICdyZW0nO1xuICAgICAgICAgICAgICAgICAgICBzaGlwRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzaGlwU2l6ZSAqIChjZWxsU2l6ZSAvIDE2KSArICdyZW0nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsZXQgY2VsbFNpemUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm9hcmQgLmNlbGwnKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgIHNldFNoaXBTdHlsZSgpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjZWxsU2l6ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCAuY2VsbCcpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICAgICAgICAgIHNldFNoaXBTdHlsZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgYm9hcmQ7XG4gICAgICAgICAgICBpZiAoZ2FtZWJvYXJkTmFtZSA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgICAgICAgIGJvYXJkID0gJ2ZpcnN0Qm9hcmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkTmFtZSA9PT0gJ3NlY29uZCcpIHtcbiAgICAgICAgICAgICAgICBib2FyZCA9ICdzZWNvbmRCb2FyZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmaXJzdENlbGxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7Ym9hcmR9IC5jZWxsW2RhdGEtY29sPVwiJHtmaXJzdENlbGwuY29sfVwiXVtkYXRhLXJvdz1cIiR7Zmlyc3RDZWxsLnJvd31cIl1gKTtcbiAgICAgICAgICAgIGZpcnN0Q2VsbEVsZW1lbnQuYXBwZW5kQ2hpbGQoc2hpcEVsZW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbkJlU3RhcnRlZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQuc2hpcHNQbGFjZWQubGVuZ3RoID09PSA1ICYmIGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQuc2hpcHNQbGFjZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBmaWxsQ2VsbHMoJ3NlY29uZCcpO1xuICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRJbml0TWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gXCJVc2UgJ1JhbmRvbSBQbGFjZW1lbnQnIGJ1dHRvbiwgdGhlbiBwcmVzcyBTdGFydCFcIjtcbiAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKCcobWluLXdpZHRoOiAxMDI0cHgpJykubWF0Y2hlcykge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gXCJEcmFnIGFuZCBkcm9wIHNoaXBzIG9udG8gdGhlIGxlZnQgYm9hcmQgb3IgdXNlICdSYW5kb20gUGxhY2VtZW50JyBidXR0b24uIFJpZ2h0IGNsaWNrIHRvIHJvdGF0ZS4gV2hlbiByZWFkeSwgcHJlc3MgU3RhcnQhXCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFN0YXJ0TWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNhbkJlU3RhcnRlZCgpKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSAnWW91IGNhbiBub3cgYmVnaW4gdGhlIGdhbWUuIFByZXNzIHN0YXJ0ISc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFR1cm5NZXNzYWdlUHZDID0gKGlzUGxheWVyVHVybikgPT4ge1xuICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIlBsYXllcidzIHR1cm4uIFRha2UgYWltIGFuZCBhdHRhY2shXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIkNvbXB1dGVyJ3MgdHVybi4gVGhlIHNob3QgaXMgY29taW5nIVwiO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRUdXJuTWVzc2FnZUN2QyA9IChpc1BsYXllclR1cm4pID0+IHtcbiAgICAgICAgaWYgKGlzUGxheWVyVHVybikge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gXCJWaW9sZXQncyB0dXJuXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIkJsdWUncyB0dXJuXCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldEdhbWVPdmVyTWVzc2FnZVB2QyA9ICh3aG8pID0+IHtcbiAgICAgICAgaWYgKHdobyA9PT0gJ3BsYXllcicpIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdHYW1lIG92ZXIsIFBsYXllciB3aW5zISc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2hvID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSAnR2FtZSBvdmVyLCBDb21wdXRlciB3aW5zISc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldEdhbWVPdmVyTWVzc2FnZUN2QyA9ICh3aG8pID0+IHtcbiAgICAgICAgaWYgKHdobyA9PT0gJ3BsYXllcicpIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdHYW1lIG92ZXIsIEJsdWUgQ29tcHV0ZXIgd2lucyEnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdobyA9PT0gJ2NvbXB1dGVyJykge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gJ0dhbWUgb3ZlciwgVmlvbGV0IENvbXB1dGVyIHdpbnMhJztcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0UmVzdGFydE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdSZXN0YXJ0aW5nLi4uJztcbiAgICB9O1xuICAgIGNvbnN0IGRyYWdBbmREcm9wID0gKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIHNoaXBzKSA9PiB7XG4gICAgICAgIGxldCBzaGlwTmFtZTtcbiAgICAgICAgbGV0IHNoaXBTaXplO1xuICAgICAgICBsZXQgZ3JhYlBvaW50WCA9IDA7XG4gICAgICAgIGxldCBncmFiUG9pbnRZID0gMDtcbiAgICAgICAgbGV0IHNoaXBPYmo7XG4gICAgICAgIGxldCBvcmllbnRhdGlvbjtcbiAgICAgICAgbGV0IGhpZ2hsaWdodGVkQ2VsbHMgPSBbXTtcbiAgICAgICAgY29uc3Qgc2hpcE5hbWVUb09iaiA9IHtcbiAgICAgICAgICAgIGNhcnJpZXI6IHNoaXBzWzBdLFxuICAgICAgICAgICAgYmF0dGxlc2hpcDogc2hpcHNbMV0sXG4gICAgICAgICAgICBkZXN0cm95ZXI6IHNoaXBzWzJdLFxuICAgICAgICAgICAgc3VibWFyaW5lOiBzaGlwc1szXSxcbiAgICAgICAgICAgIHBhdHJvbGJvYXQ6IHNoaXBzWzRdLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBmaXJzdEJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgICAgIGNvbnN0IHNlY29uZEJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBjb25zdCBmaXJzdEJvYXJkQ2VsbHMgPSBmaXJzdEJvYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2VsbCcpO1xuICAgICAgICBjb25zdCBzZWNvbmRCb2FyZENlbGxzID0gc2Vjb25kQm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIGNvbnN0IG5vblNoaXBDZWxscyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjZWxsIG9mIGZpcnN0Qm9hcmRDZWxscykge1xuICAgICAgICAgICAgaWYgKCFjZWxsLmNsYXNzTGlzdC5jb250YWlucygndGFrZW4nKSkge1xuICAgICAgICAgICAgICAgIG5vblNoaXBDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGNlbGwgb2Ygc2Vjb25kQm9hcmRDZWxscykge1xuICAgICAgICAgICAgaWYgKCFjZWxsLmNsYXNzTGlzdC5jb250YWlucygndGFrZW4nKSkge1xuICAgICAgICAgICAgICAgIG5vblNoaXBDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRyYWdnYWJsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHJhZ2dhYmxlJyk7XG4gICAgICAgIGRyYWdnYWJsZXMuZm9yRWFjaCgoZHJhZ2dhYmxlKSA9PiB7XG4gICAgICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlTW91c2Vkb3duKTtcbiAgICAgICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2V1cCk7XG4gICAgICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgaGFuZGxlRHJhZ0VuZCk7XG4gICAgICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBoYW5kbGVSb3RhdGUpO1xuICAgICAgICAgICAgbm9uU2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgYmxvY2tSaWdodENsaWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxhc3REcmFnZ2VkID0gbnVsbDtcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2UoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2Uoc2Vjb25kR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFNoaXBOYW1lID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKTtcbiAgICAgICAgICAgIGxldCB1cGRhdGVkU2hpcHNQbGFjZWRGaXJzdCA9IGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZpbHRlcigoc2hpcCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRTaGlwTmFtZSAhPT0gc2hpcC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IHVwZGF0ZWRTaGlwc1BsYWNlZFRlbXAgPSBzZWNvbmRHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZmlsdGVyKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFNoaXBOYW1lICE9PSBzaGlwLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1cGRhdGVkU2hpcHNQbGFjZWRGaXJzdC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1cGRhdGVkU2hpcHNQbGFjZWRUZW1wLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKHNlY29uZEdhbWVib2FyZCwgc2hpcC5jb2wsIHNoaXAucm93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVmcmVzaEJvYXJkKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgICAgIHJlZnJlc2hCb2FyZChzZWNvbmRHYW1lYm9hcmQpO1xuICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICBkcmFnQW5kRHJvcChmaXJzdEdhbWVib2FyZCwgc2Vjb25kR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNldXAoKSB7XG4gICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWZyZXNoQm9hcmQoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgcmVmcmVzaEJvYXJkKHNlY29uZEdhbWVib2FyZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnc2Vjb25kJywgc2Vjb25kR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGUpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMCkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdkcmFnZ2luZycpO1xuICAgICAgICAgICAgICAgIHNoaXBOYW1lID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyk7XG4gICAgICAgICAgICAgICAgc2hpcFNpemUgPSBOdW1iZXIodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykpO1xuICAgICAgICAgICAgICAgIGdyYWJQb2ludFggPSBlLm9mZnNldFg7XG4gICAgICAgICAgICAgICAgZ3JhYlBvaW50WSA9IGUub2Zmc2V0WTtcbiAgICAgICAgICAgICAgICBzaGlwT2JqID0gc2hpcE5hbWVUb09ialtzaGlwTmFtZV07XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24gPSBzaGlwT2JqLmlzVmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICdmaXJzdEJvYXJkJykge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZW1vdmVTaGlwKHNoaXBPYmosIGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ3NlY29uZEJvYXJkJykge1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucmVtb3ZlU2hpcChzaGlwT2JqLCBzZWNvbmRHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdPdmVyKGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0Q2VsbCA9IGluZGV4IC0gKHNoaXBPYmouaXNWZXJ0aWNhbCA/IE1hdGguZmxvb3IoZ3JhYlBvaW50WSAvIHRoaXMub2Zmc2V0SGVpZ2h0KSAqIDEwIDogTWF0aC5mbG9vcihncmFiUG9pbnRYIC8gdGhpcy5vZmZzZXRXaWR0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9IaWdobGlnaHQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcFNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsSW5kZXggPSBzaGlwT2JqLmlzVmVydGljYWwgPyBzdGFydENlbGwgKyBpICogMTAgOiBzdGFydENlbGwgKyBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdEJvYXJkQ2VsbHNbY2VsbEluZGV4XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5wdXNoKGZpcnN0Qm9hcmRDZWxsc1tjZWxsSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxscy5wdXNoKGZpcnN0Qm9hcmRDZWxsc1tjZWxsSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZFBsYWNlbWVudCh0b0hpZ2hsaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXN0RHJhZ2dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0RHJhZ2dlZCA9IGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx0Y29uc29sZS5sb2coJ3NoaXAgaXMgb24gdGhlIGVkZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnc2Vjb25kQm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoaXBPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFydENlbGwgPSBpbmRleCAtIChzaGlwT2JqLmlzVmVydGljYWwgPyBNYXRoLmZsb29yKGdyYWJQb2ludFkgLyB0aGlzLm9mZnNldEhlaWdodCkgKiAxMCA6IE1hdGguZmxvb3IoZ3JhYlBvaW50WCAvIHRoaXMub2Zmc2V0V2lkdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvSGlnaGxpZ2h0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBTaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEluZGV4ID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gc3RhcnRDZWxsICsgaSAqIDEwIDogc3RhcnRDZWxsICsgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kQm9hcmRDZWxsc1tjZWxsSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LnB1c2goc2Vjb25kQm9hcmRDZWxsc1tjZWxsSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxscy5wdXNoKHNlY29uZEJvYXJkQ2VsbHNbY2VsbEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQbGFjZW1lbnQodG9IaWdobGlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9IaWdobGlnaHQuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGFzdERyYWdnZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdERyYWdnZWQgPSBnZXRMYXN0U2hpcFNpemVFbGVtZW50cyhoaWdobGlnaHRlZENlbGxzLCBzaGlwU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdGNvbnNvbGUubG9nKCdzaGlwIGlzIG9uIHRoZSBlZGdlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdMZWF2ZSgpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMuZm9yRWFjaCgoaGlnaGxpZ2h0ZWRDZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBoaWdobGlnaHRlZENlbGxzID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJvcChlKSB7XG4gICAgICAgICAgICBoaWdobGlnaHRlZENlbGxzLmZvckVhY2goKGhpZ2hsaWdodGVkQ2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgbGFzdCA9IGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ2ZpcnN0Qm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXBPYmogJiYgbGFzdERyYWdnZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcnN0R2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXBPYmouc2l6ZSwgbGFzdFswXS5kYXRhc2V0LmNvbCwgbGFzdFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcE9iaiwgbGFzdFswXS5kYXRhc2V0LmNvbCwgbGFzdFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnJlc2VydmVTcGFjZShmaXJzdEdhbWVib2FyZCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICdzZWNvbmRCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaiAmJiBsYXN0RHJhZ2dlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kR2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXBPYmouc2l6ZSwgbGFzdFswXS5kYXRhc2V0LmNvbCwgbGFzdFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3RbMF0uZGF0YXNldC5jb2wsIGxhc3RbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcE9iaiwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKHNlY29uZEdhbWVib2FyZCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2UoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2Uoc2Vjb25kR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZmlyc3RHYW1lYm9hcmQsIHNoaXAuY29sLCBzaGlwLnJvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnJlc2VydmVTcGFjZShzZWNvbmRHYW1lYm9hcmQsIHNoaXAuY29sLCBzaGlwLnJvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlZnJlc2hCb2FyZChmaXJzdEdhbWVib2FyZCk7XG4gICAgICAgICAgICByZWZyZXNoQm9hcmQoc2Vjb25kR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGNyZWF0ZVNoaXBPdmVybGF5KCdmaXJzdCcsIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgIGNyZWF0ZVNoaXBPdmVybGF5KCdzZWNvbmQnLCBzZWNvbmRHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgZHJhZ0FuZERyb3AoZmlyc3RHYW1lYm9hcmQsIHNlY29uZEdhbWVib2FyZCwgY29udHJvbGxlci5odW1hblNoaXBzKTtcbiAgICAgICAgICAgIGNhbkJlU3RhcnRlZCgpO1xuICAgICAgICAgICAgc2V0U3RhcnRNZXNzYWdlKCk7XG4gICAgICAgICAgICBsYXN0RHJhZ2dlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhZ0VuZChlKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xuICAgICAgICAgICAgaWYgKGhpZ2hsaWdodGVkQ2VsbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ2ZpcnN0Qm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0RHJhZ2dlZCAmJiBmaXJzdEdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwT2JqLnNpemUsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcE9iaiwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZmlyc3RHYW1lYm9hcmQsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQm9hcmQoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEJvYXJkKHNlY29uZEdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnc2Vjb25kJywgc2Vjb25kR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnc2Vjb25kQm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0RHJhZ2dlZCAmJiBzZWNvbmRHYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEJvYXJkKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hCb2FyZChzZWNvbmRHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkcmFnQW5kRHJvcChmaXJzdEdhbWVib2FyZCwgc2Vjb25kR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWRQbGFjZW1lbnQodG9IaWdobGlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiAodG9IaWdobGlnaHQuZXZlcnkoKGNlbGwpID0+IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdlbXB0eScpKSAmJlxuICAgICAgICAgICAgICAgICh0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gY2VsbC5kYXRhc2V0LmNvbCA9PT0gdG9IaWdobGlnaHRbMF0uZGF0YXNldC5jb2wpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmRhdGFzZXQucm93ID09PSB0b0hpZ2hsaWdodFswXS5kYXRhc2V0LnJvdykpICYmXG4gICAgICAgICAgICAgICAgdG9IaWdobGlnaHQubGVuZ3RoID09PSBzaGlwU2l6ZSAmJlxuICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmRhdGFzZXQuY29sID49ICdBJyAmJiBjZWxsLmRhdGFzZXQuY29sIDw9ICdKJykgJiZcbiAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gTnVtYmVyKGNlbGwuZGF0YXNldC5yb3cpID49IDEgJiYgTnVtYmVyKGNlbGwuZGF0YXNldC5yb3cpIDw9IDEwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMoaGlnaGxpZ2h0ZWRDZWxscywgc2hpcFNpemUpIHtcbiAgICAgICAgICAgIHJldHVybiBoaWdobGlnaHRlZENlbGxzLnNsaWNlKE1hdGgubWluKGhpZ2hsaWdodGVkQ2VsbHMubGVuZ3RoIC0gc2hpcFNpemUsIDApKTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdEJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBoYW5kbGVEcmFnT3ZlcihpbmRleCkpO1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBoYW5kbGVEcmFnTGVhdmUpO1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzZWNvbmRCb2FyZENlbGxzLmZvckVhY2goKGNlbGwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgaGFuZGxlRHJhZ092ZXIoaW5kZXgpKTtcbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgaGFuZGxlRHJhZ0xlYXZlKTtcbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGhhbmRsZURyb3ApO1xuICAgICAgICB9KTtcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUm90YXRlKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgbGV0IGdhbWVib2FyZDtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICdmaXJzdEJvYXJkJykge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZCA9IGZpcnN0R2FtZWJvYXJkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ3NlY29uZEJvYXJkJykge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZCA9IHNlY29uZEdhbWVib2FyZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoaXBOYW1lID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyk7XG4gICAgICAgICAgICBzaGlwU2l6ZSA9IE51bWJlcih0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSk7XG4gICAgICAgICAgICBzaGlwT2JqID0gc2hpcE5hbWVUb09ialtzaGlwTmFtZV07XG4gICAgICAgICAgICBjb25zdCB0ZW1wU2hpcCA9IHNoaXBPYmo7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZpbHRlcigoc2hpcCkgPT4gc2hpcC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gc2hpcE5hbWUpO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlbW92ZVNoaXAoc2hpcE9iaiwgZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZW1vdmVSZXNlcnZlZFNwYWNlKGdhbWVib2FyZCk7XG4gICAgICAgICAgICBnYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZW1wU2hpcC5yb3RhdGUoKTtcbiAgICAgICAgICAgIG9yaWVudGF0aW9uID0gdGVtcFNoaXAuaXNWZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmNhbkJlUGxhY2VkKHRlbXBTaGlwLnNpemUsIGN1cnJlbnRbMF0uY29sLCBjdXJyZW50WzBdLnJvdywgb3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcCh0ZW1wU2hpcCwgY3VycmVudFswXS5jb2wsIGN1cnJlbnRbMF0ucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wU2hpcC5yb3RhdGUoKTtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9IHRlbXBTaGlwLmlzVmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAodGVtcFNoaXAsIGN1cnJlbnRbMF0uY29sLCBjdXJyZW50WzBdLnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGdhbWVib2FyZCwgc2hpcC5jb2wsIHNoaXAucm93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVmcmVzaEJvYXJkKGdhbWVib2FyZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnc2Vjb25kJywgc2Vjb25kR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmxvY2tSaWdodENsaWNrKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcFZjQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBmaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgIGhhbmRsZUdhbWVNb2RlKHBWY0J0biwgY1ZjQnRuKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QucmVtb3ZlKCdzdGFydCcpO1xuICAgICAgICB1bkZpbGxDZWxscygnZmlyc3QnKTtcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBwVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNWY0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICBmaWxsQ2VsbHMoJ3NlY29uZCcpO1xuICAgICAgICBoYW5kbGVHYW1lTW9kZShjVmNCdG4sIHBWY0J0bik7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LmFkZCgnc3RhcnQnKTtcbiAgICAgICAgUHJvbWlzZS5hbGwoW3VuRmlsbENlbGxzKCdmaXJzdCcpLCB1bkZpbGxDZWxscygnc2Vjb25kJyldKTtcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICByYW5kb21CdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBjVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIG5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICBpZiAoY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBjVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICB5aWVsZCBoYW5kbGVOZXdHYW1lKCk7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuICAgICAgICBpZiAocFZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5yZW1vdmUoJ3N0YXJ0Jyk7XG4gICAgICAgICAgICB1bkZpbGxDZWxscygnZmlyc3QnKTtcbiAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHBWY0J0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNlY29uZC5jbGFzc0xpc3QuYWRkKCdzdGFydCcpO1xuICAgICAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIFByb21pc2UuYWxsKFt1bkZpbGxDZWxscygnZmlyc3QnKSwgdW5GaWxsQ2VsbHMoJ3NlY29uZCcpXSk7XG4gICAgICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICByYW5kb21CdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgY1ZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0pKTtcbiAgICBzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY29udHJvbGxlci5zdGFydCgpO1xuICAgICAgICBjb25zdCBmaXJzdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgICAgIGZpcnN0LmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QuYWRkKCdzdGFydCcpO1xuICAgICAgICB1bkZpbGxDZWxscygnc2Vjb25kJyk7XG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByYW5kb21CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgICAgICByZWZyZXNoQm9hcmQoY29udHJvbGxlci5jb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIGNvbnRyb2xsZXIucmFuZG9taXplU2hpcHNQbGFjZW1lbnQoJ2ZpcnN0JywgY29udHJvbGxlci5odW1hbkdhbWVib2FyZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQsIGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIGNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBzZXRTdGFydE1lc3NhZ2UoKTtcbiAgICAgICAgZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICB9KTtcbiAgICBsZXQgc3BlZWRWYWx1ZSA9IDEwMDA7XG4gICAgc3BlZWRzLmZvckVhY2goKHNwZWVkKSA9PiB7XG4gICAgICAgIHNwZWVkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGlucHV0ID0gc3BlZWQ7XG4gICAgICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHNwZWVkVmFsdWUgPSBOdW1iZXIoaW5wdXQudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBjb25zdCBnZXRTcGVlZFZhbHVlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3BlZWRWYWx1ZTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzZXRJbml0TWVzc2FnZSk7XG4gICAgY29uc3QgZmlsbENlbGxzID0gKGlucHV0KSA9PiB7XG4gICAgICAgIGxldCBib2FyZDtcbiAgICAgICAgaWYgKGlucHV0ID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlbGxzID0gYm9hcmQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdmaWxsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1bkZpbGxDZWxscyA9IChpbnB1dCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHdhaXRpbmcodHJ1ZSk7XG4gICAgICAgIGxldCBib2FyZDtcbiAgICAgICAgaWYgKGlucHV0ID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlbGxzID0gYm9hcmQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdmaWxsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpbGxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IGNlbGxzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIChnZXRTcGVlZFZhbHVlKCkgLyAxMjApICogaW5kZXgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB3YWl0aW5nKGZhbHNlKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJCb2FyZCxcbiAgICAgICAgcmVmcmVzaEJvYXJkLFxuICAgICAgICBoYW5kbGVVc2VySW5wdXQsXG4gICAgICAgIHBWY0J0bixcbiAgICAgICAgY1ZjQnRuLFxuICAgICAgICB3YWl0aW5nLFxuICAgICAgICBzZXRCb2FyZFBvaW50ZXIsXG4gICAgICAgIHJlbW92ZUJvYXJkUG9pbnRlcixcbiAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXksXG4gICAgICAgIGRyYWdBbmREcm9wLFxuICAgICAgICBjYW5CZVN0YXJ0ZWQsXG4gICAgICAgIHNldEluaXRNZXNzYWdlLFxuICAgICAgICBzZXRUdXJuTWVzc2FnZVB2QyxcbiAgICAgICAgc2V0VHVybk1lc3NhZ2VDdkMsXG4gICAgICAgIHNldEdhbWVPdmVyTWVzc2FnZVB2QyxcbiAgICAgICAgc2V0R2FtZU92ZXJNZXNzYWdlQ3ZDLFxuICAgICAgICBzZXRSZXN0YXJ0TWVzc2FnZSxcbiAgICAgICAgZ2V0U3BlZWRWYWx1ZSxcbiAgICAgICAgdW5GaWxsQ2VsbHMsXG4gICAgfTtcbn0pKCk7XG5leHBvcnQgZGVmYXVsdCB1aTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IGdhbWVib2FyZEZhY3RvcnkgZnJvbSAnLi9nYW1lYm9hcmQnO1xuaW1wb3J0IHNoaXBGYWN0b3J5IGZyb20gJy4vc2hpcCc7XG5pbXBvcnQgcGxheWVyRmFjdG9yeSBmcm9tICcuL3BsYXllcic7XG5pbXBvcnQgdWkgZnJvbSAnLi91aSc7XG5jb25zdCBjb250cm9sbGVyID0gKCgpID0+IHtcbiAgICBjb25zdCBodW1hbkdhbWVib2FyZCA9IGdhbWVib2FyZEZhY3RvcnkoKTtcbiAgICBjb25zdCBjb21wdXRlckdhbWVib2FyZCA9IGdhbWVib2FyZEZhY3RvcnkoKTtcbiAgICBjb25zdCBodW1hbiA9IHBsYXllckZhY3RvcnkoKTtcbiAgICBjb25zdCBjb21wdXRlciA9IHBsYXllckZhY3RvcnkoKTtcbiAgICBsZXQgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICBsZXQgaHVtYW5DYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICBsZXQgaHVtYW5CYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICBsZXQgaHVtYW5EZXN0cm95ZXIgPSBzaGlwRmFjdG9yeSgnRGVzdHJveWVyJyk7XG4gICAgbGV0IGh1bWFuU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgIGxldCBodW1hblBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sQm9hdCcpO1xuICAgIGNvbnN0IGh1bWFuU2hpcHMgPSBbaHVtYW5DYXJyaWVyLCBodW1hbkJhdHRsZXNoaXAsIGh1bWFuRGVzdHJveWVyLCBodW1hblN1Ym1hcmluZSwgaHVtYW5QYXRyb2xib2F0XTtcbiAgICBjb25zdCBwb3B1bGF0ZVNoaXBzID0gKCkgPT4ge1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5DYXJyaWVyLCAnQScsICcxJywgJ2hvcml6b250YWwnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKGh1bWFuQmF0dGxlc2hpcCwgJ0EnLCAnMycsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hbkRlc3Ryb3llciwgJ0EnLCAnNScsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hblN1Ym1hcmluZSwgJ0EnLCAnNycsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hblBhdHJvbGJvYXQsICdBJywgJzknLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5yZXNlcnZlU3BhY2UoY29tcHV0ZXJHYW1lYm9hcmQsICdBJywgJzEnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGNvbXB1dGVyR2FtZWJvYXJkLCAnQScsICczJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnJlc2VydmVTcGFjZShjb21wdXRlckdhbWVib2FyZCwgJ0EnLCAnNScpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5yZXNlcnZlU3BhY2UoY29tcHV0ZXJHYW1lYm9hcmQsICdBJywgJzcnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGNvbXB1dGVyR2FtZWJvYXJkLCAnQScsICc5Jyk7XG4gICAgfTtcbiAgICBjb25zdCBpc0dhbWVPdmVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoY29tcHV0ZXJHYW1lYm9hcmQuYWxsU3Vuayhjb21wdXRlckdhbWVib2FyZCkpIHtcbiAgICAgICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICAgICAgaWYgKHVpLnBWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRHYW1lT3Zlck1lc3NhZ2VQdkMoJ3BsYXllcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRHYW1lT3Zlck1lc3NhZ2VDdkMoJ3BsYXllcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FsbCBjb21wdXRlciBzaGlwcyBhcmUgc3Vuay4gSHVtYW4gcGxheWVyIHdvbiEnKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChodW1hbkdhbWVib2FyZC5hbGxTdW5rKGh1bWFuR2FtZWJvYXJkKSkge1xuICAgICAgICAgICAgdWkucmVtb3ZlQm9hcmRQb2ludGVyKCk7XG4gICAgICAgICAgICBpZiAodWkucFZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgIHVpLnNldEdhbWVPdmVyTWVzc2FnZVB2QygnY29tcHV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0R2FtZU92ZXJNZXNzYWdlQ3ZDKCdjb21wdXRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FsbCBodW1hbiBzaGlwcyBhcmUgc3Vuay4gQ29tcHV0ZXIgcGxheWVyIHdvbiEnKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIGNvbnN0IGNvbXB1dGVyQUkgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGxldCBwbGF5ZXI7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGh1bWFuR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBwbGF5ZXIgPSBjb21wdXRlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBwbGF5ZXIgPSBodW1hbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2FtZWJvYXJkLmhpdEJ1dE5vdFN1bmsoZ2FtZWJvYXJkKSkge1xuICAgICAgICAgICAgaWYgKHBsYXllci5nZXRQcmV2SGl0KCkgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZ2V0TGFzdEhpdCgpICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLmdldENlbGwocGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KS50YWtlbkJ5LmhpdENvdW50ID49IDIgJiZcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQuZ2V0Q2VsbChwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpLnRha2VuQnkuaGl0Q291bnQgPD0gNCkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdGSU5JU0g6ID49IDIgdHJhZmllbmlhIHcgc3RhdGVrJywgcGxheWVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgICAgICAgICAgcGxheWVyLmZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdywgcGxheWVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnNpbmtTaGlwKGdhbWVib2FyZCwgcGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpLnRha2VuQnkuaGl0Q291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZm9sbG93dXBBdHRhY2soZ2FtZWJvYXJkLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5zaW5rU2hpcChnYW1lYm9hcmQsIHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBjb2wsIHJvdyB9ID0gcGxheWVyLnJhbmRvbUF0dGFjayhnYW1lYm9hcmQpO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldFByZXZIaXQocGxheWVyLmdldExhc3RIaXQoKSk7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldExhc3RIaXQoeyBjb2wsIHJvdyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykuc3RhdHVzID09PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5zaW5rU2hpcChnYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UHJldkhpdChudWxsKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0TGFzdEhpdChudWxsKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBsYXllclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICB3aGlsZSAoIWlzR2FtZU92ZXIoKSAmJiAhaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0VHVybk1lc3NhZ2VQdkMoaXNQbGF5ZXJUdXJuKTtcbiAgICAgICAgICAgICAgICB1aS5zZXRCb2FyZFBvaW50ZXIoJ3BsYXllcicpO1xuICAgICAgICAgICAgICAgIHVpLndhaXRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sLCByb3cgfSA9IHlpZWxkIHVpLmhhbmRsZVVzZXJJbnB1dCgpO1xuICAgICAgICAgICAgICAgIGh1bWFuLmF0dGFjayhjb21wdXRlckdhbWVib2FyZCwgY29sLCByb3cpO1xuICAgICAgICAgICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnNpbmtTaGlwKGNvbXB1dGVyR2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBpc1BsYXllclR1cm4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0dhbWVPdmVyKCkgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUGxheWVyVHVybikge1xuICAgICAgICAgICAgICAgIHVpLnNldFR1cm5NZXNzYWdlUHZDKGlzUGxheWVyVHVybik7XG4gICAgICAgICAgICAgICAgdWkuc2V0Qm9hcmRQb2ludGVyKCdjb21wdXRlcicpO1xuICAgICAgICAgICAgICAgIHVpLndhaXRpbmcodHJ1ZSk7XG4gICAgICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdWkuZ2V0U3BlZWRWYWx1ZSgpKSk7XG4gICAgICAgICAgICAgICAgaWYgKCF1aS5wVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcHV0ZXJBSShodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB1aS53YWl0aW5nKGZhbHNlKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICBsZXQgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKCFpc0dhbWVPdmVyKCkgJiYgIWlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdWkud2FpdGluZyh0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRUdXJuTWVzc2FnZUN2Qyhpc1BsYXllclR1cm4pO1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHVpLmdldFNwZWVkVmFsdWUoKSkpO1xuICAgICAgICAgICAgICAgIGlmICghdWkuY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbXB1dGVyQUkoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRUdXJuTWVzc2FnZUN2Qyhpc1BsYXllclR1cm4pO1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHVpLmdldFNwZWVkVmFsdWUoKSkpO1xuICAgICAgICAgICAgICAgIGlmICghdWkuY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbXB1dGVyQUkoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdWkud2FpdGluZyhmYWxzZSk7XG4gICAgfSk7XG4gICAgY29uc3QgcmFuZG9tUGxhY2VtZW50ID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBsZXQgYWxsU2hpcHM7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGh1bWFuR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBodW1hbkNhcnJpZXIgPSBzaGlwRmFjdG9yeSgnQ2FycmllcicpO1xuICAgICAgICAgICAgaHVtYW5CYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICAgICAgICAgIGh1bWFuRGVzdHJveWVyID0gc2hpcEZhY3RvcnkoJ0Rlc3Ryb3llcicpO1xuICAgICAgICAgICAgaHVtYW5TdWJtYXJpbmUgPSBzaGlwRmFjdG9yeSgnU3VibWFyaW5lJyk7XG4gICAgICAgICAgICBodW1hblBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sQm9hdCcpO1xuICAgICAgICAgICAgYWxsU2hpcHMgPSBbaHVtYW5DYXJyaWVyLCBodW1hbkJhdHRsZXNoaXAsIGh1bWFuRGVzdHJveWVyLCBodW1hblN1Ym1hcmluZSwgaHVtYW5QYXRyb2xib2F0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlckNhcnJpZXIgPSBzaGlwRmFjdG9yeSgnQ2FycmllcicpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJCYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVyRGVzdHJveWVyID0gc2hpcEZhY3RvcnkoJ0Rlc3Ryb3llcicpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJTdWJtYXJpbmUgPSBzaGlwRmFjdG9yeSgnU3VibWFyaW5lJyk7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlclBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sQm9hdCcpO1xuICAgICAgICAgICAgYWxsU2hpcHMgPSBbY29tcHV0ZXJDYXJyaWVyLCBjb21wdXRlckJhdHRsZXNoaXAsIGNvbXB1dGVyRGVzdHJveWVyLCBjb21wdXRlclN1Ym1hcmluZSwgY29tcHV0ZXJQYXRyb2xib2F0XTtcbiAgICAgICAgfVxuICAgICAgICBjb250cm9sbGVyLmh1bWFuU2hpcHMubGVuZ3RoID0gMDtcbiAgICAgICAgY29uc3QgY29scyA9IFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSiddO1xuICAgICAgICBjb25zdCByYW5kb21Db2wgPSAoKSA9PiBjb2xzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbHMubGVuZ3RoKV07XG4gICAgICAgIGNvbnN0IHJhbmRvbVJvdyA9ICgpID0+IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKCk7XG4gICAgICAgIGNvbnN0IHJhbmRvbU9yaWVudGF0aW9uID0gKCkgPT4gKE1hdGgucmFuZG9tKCkgPiAwLjUgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnKTtcbiAgICAgICAgYWxsU2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbCA9IHJhbmRvbUNvbCgpO1xuICAgICAgICAgICAgbGV0IHJvdyA9IHJhbmRvbVJvdygpO1xuICAgICAgICAgICAgbGV0IG9yaWVudGF0aW9uID0gcmFuZG9tT3JpZW50YXRpb24oKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBnYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcC5zaXplLCBjb2wsIHJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgd2hpbGUgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBjb2wgPSByYW5kb21Db2woKTtcbiAgICAgICAgICAgICAgICByb3cgPSByYW5kb21Sb3coKTtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9IHJhbmRvbU9yaWVudGF0aW9uKCk7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gZ2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXAuc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXAsIGNvbCwgcm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlc2VydmVTcGFjZShnYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRyb2xsZXIuaHVtYW5TaGlwcy5wdXNoKHNoaXApO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50ID0gKGdhbWVib2FyZE5hbWUsIGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBnYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgICAgICByYW5kb21QbGFjZW1lbnQoZ2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGdhbWVib2FyZCk7XG4gICAgICAgIGlmIChnYW1lYm9hcmROYW1lID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICB1aS5jcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBnYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCByZXNldE9yaWVudGF0aW9uID0gKCkgPT4ge1xuICAgICAgICBodW1hblNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGlmIChzaGlwLmlzVmVydGljYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzaGlwLmlzVmVydGljYWwgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBwaWNrR2FtZU1vZGUgPSAoKSA9PiB7XG4gICAgICAgIGlmICh1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICByYW5kb21pemVTaGlwc1BsYWNlbWVudCgnZmlyc3QnLCBodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICByYW5kb21pemVTaGlwc1BsYWNlbWVudCgnc2Vjb25kJywgY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb21wdXRlclZzQ29tcHV0ZXJNb2RlKCk7XG4gICAgICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgcmFuZG9taXplU2hpcHNQbGFjZW1lbnQoJ3NlY29uZCcsIGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHBsYXllclZzQ29tcHV0ZXJNb2RlKCk7XG4gICAgfTtcbiAgICBjb25zdCByZXN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICBpc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBodW1hbi5zZXRQcmV2SGl0KG51bGwpO1xuICAgICAgICBodW1hbi5zZXRMYXN0SGl0KG51bGwpO1xuICAgICAgICBjb21wdXRlci5zZXRQcmV2SGl0KG51bGwpO1xuICAgICAgICBjb21wdXRlci5zZXRMYXN0SGl0KG51bGwpO1xuICAgICAgICBodW1hbkdhbWVib2FyZC5jbGVhckJvYXJkKCk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgcG9wdWxhdGVTaGlwcygpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICB1aS5jcmVhdGVTaGlwT3ZlcmxheSgnc2Vjb25kJywgY29tcHV0ZXJHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICB1aS5kcmFnQW5kRHJvcChodW1hbkdhbWVib2FyZCwgY29tcHV0ZXJHYW1lYm9hcmQsIGh1bWFuU2hpcHMpO1xuICAgICAgICB1aS5jYW5CZVN0YXJ0ZWQoKTtcbiAgICAgICAgcGlja0dhbWVNb2RlKCk7XG4gICAgICAgIHJlc2V0T3JpZW50YXRpb24oKTtcbiAgICB9O1xuICAgIGNvbnN0IG5ld0dhbWUgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdWkuZ2V0U3BlZWRWYWx1ZSgpKSk7XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICByZXN0YXJ0KCk7XG4gICAgfSk7XG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgdWkuc2V0SW5pdE1lc3NhZ2UoKTtcbiAgICAgICAgdWkucmVuZGVyQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZW5kZXJCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIHBvcHVsYXRlU2hpcHMoKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIGNvbXB1dGVyR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgdWkuZHJhZ0FuZERyb3AoaHVtYW5HYW1lYm9hcmQsIGNvbXB1dGVyR2FtZWJvYXJkLCBodW1hblNoaXBzKTtcbiAgICAgICAgdWkuY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHBpY2tHYW1lTW9kZSgpO1xuICAgICAgICB1aS51bkZpbGxDZWxscygnZmlyc3QnKTtcbiAgICAgICAgdWkucFZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiB7IGluaXQsIGh1bWFuR2FtZWJvYXJkLCBjb21wdXRlckdhbWVib2FyZCwgcmVzdGFydCwgbmV3R2FtZSwgc3RhcnQsIHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50LCBodW1hblNoaXBzIH07XG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgY29udHJvbGxlcjtcbiIsImltcG9ydCAnbm9ybWFsaXplLmNzcyc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuY3NzJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vbW9kdWxlcy9jb250cm9sbGVyJztcbmNvbnRyb2xsZXIuaW5pdCgpO1xuIl0sIm5hbWVzIjpbImNvbHMiLCJyb3dzIiwiYXJyYXkiLCJzaGlwc1BsYWNlZCIsImdldENlbGwiLCJjb2wiLCJyb3ciLCJjb2xJbmRleCIsImluZGV4T2YiLCJyb3dJbmRleCIsInNldENlbGwiLCJuZXdTdGF0dXMiLCJuZXdUYWtlbkJ5Iiwic3RhdHVzIiwidGFrZW5CeSIsImkiLCJqIiwiZ2VuZXJhdGVBcnJheSIsImNsZWFyQm9hcmQiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJyZW1vdmVTaGlwIiwic2hpcCIsImdhbWVib2FyZCIsImZsYXQiLCJmb3JFYWNoIiwiY2VsbCIsImJvYXJkSWQiLCJuYW1lIiwic3BsaWNlIiwiaHVtYW5HYW1lYm9hcmQiLCJjb21wdXRlckdhbWVib2FyZCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZ2V0QXR0cmlidXRlIiwidG9Mb3dlckNhc2UiLCJyZW1vdmUiLCJhZGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJwbGFjZVNoaXAiLCJvcmllbnRhdGlvbiIsImlzVmVydGljYWwiLCJpc0hvcml6b250YWwiLCJjZWxscyIsInN0YXJ0Iiwic2hpcENlbGxzIiwic2l6ZSIsImN1cnJlbnRDb2wiLCJjdXJyZW50Um93IiwicHVzaCIsInJlY2VpdmVBdHRhY2siLCJoaXQiLCJyZWNlaXZlQXJvdW5kIiwicmVzZXJ2ZVNwYWNlIiwiZmlsdGVyIiwiYyIsImRpcmVjdGlvbiIsIm5ld0NvbCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJuZXdSb3ciLCJOdW1iZXIiLCJ0b1N0cmluZyIsImhpdEJ1dE5vdFN1bmsiLCJzb21lIiwiaXNTdW5rIiwic2lua1NoaXAiLCJhbGxTdW5rIiwidGFrZW5CeUNlbGxzIiwiZXZlcnkiLCJjYW5CZVBsYWNlZCIsImFyZUVtcHR5IiwiaXRlbSIsInJlbW92ZVJlc2VydmVkU3BhY2UiLCJoaXRDb3VudCIsInJvdGF0ZSIsInRoaXMiLCJwcmV2SGl0IiwibGFzdEhpdCIsInJhbmdlIiwiZ29SaWdodCIsImdvRG93biIsImZpbmlzaGluZ0F0dGFjayIsInNldFByZXZIaXQiLCJzZXRMYXN0SGl0IiwibmV3UHJldkhpdCIsIm5ld0xhc3RIaXQiLCJhdHRhY2siLCJyZXN1bHQiLCJyYW5kb21BdHRhY2siLCJyYW5kb21Db2wiLCJyYW5kb21Sb3ciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJjZWlsIiwiZm9sbG93dXBBdHRhY2siLCJ2YWxpZERpcmVjdGlvbnMiLCJyYW5kb21EaXJlY3Rpb24iLCJnZXRQcmV2SGl0IiwiZ2V0TGFzdEhpdCIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwidmFsdWUiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJ1aSIsInN0YXR1c0JveCIsInF1ZXJ5U2VsZWN0b3IiLCJib2FyZHMiLCJwVmNCdG4iLCJuZXdHYW1lQnRuIiwiY1ZjQnRuIiwic3RhcnRCdG4iLCJyYW5kb21CdG4iLCJhbGxCdG5zIiwic3BlZWRzIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJyZW5kZXJDZWxscyIsImJvYXJkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVDZWxsIiwiYXBwZW5kIiwicmVmcmVzaEJvYXJkIiwiaW5uZXJIVE1MIiwiZ2V0VXNlcklucHV0IiwidGFyZ2V0IiwiaGFuZGxlR2FtZU1vZGUiLCJzZWxlY3RlZEVsZW1lbnQiLCJkZXNlbGVjdGVkRWxlbWVudCIsImZpbGxDZWxscyIsIndhaXRpbmciLCJidG4iLCJkaXNhYmxlZCIsInNldFRpbWVvdXQiLCJnZXRTcGVlZFZhbHVlIiwiY2FuQmVTdGFydGVkIiwic2V0SW5pdE1lc3NhZ2UiLCJyZXN0YXJ0Iiwic2V0UmVzdGFydE1lc3NhZ2UiLCJib29sIiwiZG9jdW1lbnRFbGVtZW50IiwidG9nZ2xlIiwiY3JlYXRlU2hpcE92ZXJsYXkiLCJnYW1lYm9hcmROYW1lIiwic2hpcHMiLCJmaXJzdENlbGwiLCJzaGlwRWxlbWVudCIsInNoaXBOYW1lIiwic2hpcFNpemUiLCJzZXRTaGlwU3R5bGUiLCJzdHlsZSIsIndpZHRoIiwiY2VsbFNpemUiLCJoZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0Q29udGVudCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwic2V0U3RhcnRNZXNzYWdlIiwiZHJhZ0FuZERyb3AiLCJmaXJzdEdhbWVib2FyZCIsInNlY29uZEdhbWVib2FyZCIsInNoaXBPYmoiLCJncmFiUG9pbnRYIiwiZ3JhYlBvaW50WSIsImhpZ2hsaWdodGVkQ2VsbHMiLCJzaGlwTmFtZVRvT2JqIiwiY2FycmllciIsImJhdHRsZXNoaXAiLCJkZXN0cm95ZXIiLCJzdWJtYXJpbmUiLCJwYXRyb2xib2F0IiwiZmlyc3RCb2FyZEVsZW1lbnQiLCJzZWNvbmRCb2FyZEVsZW1lbnQiLCJmaXJzdEJvYXJkQ2VsbHMiLCJzZWNvbmRCb2FyZENlbGxzIiwibm9uU2hpcENlbGxzIiwiZHJhZ2dhYmxlIiwiaGFuZGxlTW91c2Vkb3duIiwiaGFuZGxlTW91c2V1cCIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdFbmQiLCJoYW5kbGVSb3RhdGUiLCJibG9ja1JpZ2h0Q2xpY2siLCJsYXN0RHJhZ2dlZCIsInRhcmdldFNoaXBOYW1lIiwidXBkYXRlZFNoaXBzUGxhY2VkRmlyc3QiLCJ1cGRhdGVkU2hpcHNQbGFjZWRUZW1wIiwiaHVtYW5TaGlwcyIsInZpc2liaWxpdHkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsb3Nlc3QiLCJpZCIsImhhbmRsZURyYWdPdmVyIiwiaW5kZXgiLCJwcmV2ZW50RGVmYXVsdCIsInN0YXJ0Q2VsbCIsIm9mZnNldEhlaWdodCIsIm9mZnNldFdpZHRoIiwidG9IaWdobGlnaHQiLCJjZWxsSW5kZXgiLCJpc1ZhbGlkUGxhY2VtZW50IiwiZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMiLCJoYW5kbGVEcmFnTGVhdmUiLCJoaWdobGlnaHRlZENlbGwiLCJoYW5kbGVEcm9wIiwibGFzdCIsImRhdGFzZXQiLCJzbGljZSIsIm1pbiIsInRlbXBTaGlwIiwiY3VycmVudCIsInVuRmlsbENlbGxzIiwic2Vjb25kIiwiYWxsIiwicmVtb3ZlQm9hcmRQb2ludGVyIiwibmV3R2FtZSIsInJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50Iiwic3BlZWRWYWx1ZSIsInNwZWVkIiwiaW5wdXQiLCJjaGVja2VkIiwicmVuZGVyQm9hcmQiLCJoYW5kbGVVc2VySW5wdXQiLCJ1c2VySW5wdXQiLCJvbmNlIiwic2V0Qm9hcmRQb2ludGVyIiwid2hpY2giLCJzZXRUdXJuTWVzc2FnZVB2QyIsImlzUGxheWVyVHVybiIsInNldFR1cm5NZXNzYWdlQ3ZDIiwic2V0R2FtZU92ZXJNZXNzYWdlUHZDIiwid2hvIiwic2V0R2FtZU92ZXJNZXNzYWdlQ3ZDIiwiY29udHJvbGxlciIsImh1bWFuIiwicGxheWVyIiwiY29tcHV0ZXIiLCJpc1N0b3BwZWQiLCJodW1hbkNhcnJpZXIiLCJodW1hbkJhdHRsZXNoaXAiLCJodW1hbkRlc3Ryb3llciIsImh1bWFuU3VibWFyaW5lIiwiaHVtYW5QYXRyb2xib2F0IiwicG9wdWxhdGVTaGlwcyIsImlzR2FtZU92ZXIiLCJjb21wdXRlckFJIiwiYWxsU2hpcHMiLCJyYW5kb21PcmllbnRhdGlvbiIsInJhbmRvbVBsYWNlbWVudCIsInBpY2tHYW1lTW9kZSIsImluaXQiXSwic291cmNlUm9vdCI6IiJ9