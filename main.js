(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],o=(r,o)=>{const s=e.indexOf(r),l=t.indexOf(o);return-1===s||-1===l?null:a[l][s]},s=(r,o,s,l)=>{const i=e.indexOf(r),n=t.indexOf(o);return-1===i||-1===n?null:(a[n][i].status=s,l&&(a[n][i].takenBy=l),a[n][i])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let o=0;o<10;o+=1)a[r][o]={col:e[o],row:t[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;r.length=0},getCell:o,setCell:s,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let o;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),r.forEach((e=>{null===e.takenBy&&r.splice(r.indexOf(e),1)})),t===n.humanGameboard?o="firstBoard":t===n.computerGameboard?o="secondBoard":t===n.tempBoard&&(o="tempBoard");document.querySelectorAll(`#${o} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,l,i,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?l:i);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:l,r=c?i:d[u+e];if("empty"!==o(t,r).status)return!1;s(t,r,"taken",a),h.push(o(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=o(e,t);return"taken"===a.status?(a.takenBy.hit(),s(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(s(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=o(e,t);return"empty"===a.status?(s(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),o=(Number(t.row)+a.row).toString();e.getCell(r,o)&&e.receiveAround(r,o)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),o=(Number(t.row)+a.row).toString();e.getCell(r,o)&&e.receiveAttack(r,o)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,s,l)=>{const i="horizontal"===l,n=i?e:t,c=n.indexOf(i?r:s);if(c<0||c+a>n.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=i?n[c+e]:r,a=i?s:n[c+e];d.push("empty"===o(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&s(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,o=!0,s=!0;const l=(e,t,c,d)=>{if(console.log("start finishingAttack prevHit",d),console.log("start finishingAttack lastHit",{col:t,row:c}),d.row===c)if(o){r=1,console.log("goRight");let s=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)r+=1,s=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,o=!1,l(e,s,c,d))}else{r=1,console.log("goLeft");let s=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)r+=1,s=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,o=!0,l(e,s,c,d))}else if(d.col===t)if(s){r=1,console.log("goDown");let o=(Number(c)+r).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)r+=1,o=(Number(c)+r).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status&&(i(a),n({col:t,row:o})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,s=!1,l(e,t,o,d))}else{r=1,console.log("goUp");let o=(Number(c)-r).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)r+=1,o=(Number(c)-r).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status&&(i(a),n({col:t,row:o})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,s=!0,l(e,t,o,d))}},i=e=>{t=e},n=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let o=e.receiveAttack(t,r);return"hit"===o&&(i(a),n({col:t,row:r})),o}return"already shot"},randomAttack:o=>{let s,l;do{s=e[Math.floor(Math.random()*e.length)],l=Math.ceil(10*Math.random()).toString()}while("hit"===o.getCell(s,l).status||"miss"===o.getCell(s,l).status);if("hit"!==o.getCell(s,l).status&&"miss"!==o.getCell(s,l).status){const e=o.receiveAttack(s,l);return"hit"===o.getCell(s,l).status&&(i(a),n({col:s,row:l}),console.log("---------------"),console.log("randomAttack prevHit",t),console.log("randomAttack lastHit",a),console.log("randomAttack range",r)),{result:e,col:s,row:l}}return{result:"already shot",col:s,row:l}},followupAttack:(e,o,s)=>{const l=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((t=>{const a=String.fromCharCode(o.charCodeAt(0)+t.col),r=(Number(s)+t.row).toString(),l=e.getCell(a,r);return!(!l||"miss"===l.status||"hit"===l.status)}));if(l.length>0){const c=l[Math.floor(Math.random()*l.length)],d=String.fromCharCode(o.charCodeAt(0)+c.col),u=(Number(s)+c.row).toString();e.receiveAttack(d,u),r=1,"hit"===e.getCell(d,u).status&&(i(a),n({col:d,row:u}),console.log("---------------"),console.log("followupAttack prevHit",t),console.log("followupAttack lastHit",a),console.log("followupAttack range",r))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:l,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:n}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(o,s){function l(e){try{n(r.next(e))}catch(e){s(e)}}function i(e){try{n(r.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((r=r.apply(e,t||[])).next())}))};const o=(()=>{const e=document.querySelector("#wrapper"),t=document.createElement("div");t.id="boards",e.prepend(t);const a=document.querySelector("#playerVsComputer"),o=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),l=document.querySelector("#start"),i=document.querySelector("#randomPlacement"),c=[a,o,s,l,i],d=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},u=e=>{let t;e===n.humanGameboard?t="firstBoard":e===n.computerGameboard?t="secondBoard":e===n.tempBoard&&(t="tempBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",d(e,a)},h=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},m=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&r(void 0,void 0,void 0,(function*(){p(!0),c.forEach((e=>e.disabled=!0)),a.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),a.textContent="Player vs Computer",c.forEach((e=>e.disabled=!1)),p(!1)})),e===s&&r(void 0,void 0,void 0,(function*(){p(!0),c.forEach((e=>e.disabled=!0)),s.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),s.textContent="Computer vs Computer",c.forEach((e=>e.disabled=!1)),p(!1)})),n.restart())},p=e=>{document.documentElement.classList.toggle("wait",e)},f=(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),o=t.takenBy.size,s=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${o}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const l=()=>{s?s&&(a.style.width=n/16+"rem",a.style.height=o*(n/16)+"rem"):(a.style.width=o*(n/16)+"rem",a.style.height=n/16+"rem")};let i,n=document.querySelector(".board .cell").getBoundingClientRect().width;l(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,l()})),"first"===e?i="firstBoard":"temp"===e&&(i="tempBoard");document.querySelector(`#${i} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},g=()=>{5===n.humanGameboard.shipsPlaced.length&&0===n.tempBoard.shipsPlaced.length?l.disabled=!1:l.disabled=!0},v=(e,t,a)=>{let o,s,l,i,c=0,d=0,h=[];const m={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},p=document.querySelector("#firstBoard"),w=document.querySelector("#tempBoard"),B=p.querySelectorAll(".cell"),S=w.querySelectorAll(".cell"),y=[];for(let e of B)e.classList.contains("taken")||y.push(e);for(let e of S)e.classList.contains("taken")||y.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",k),e.addEventListener("mouseup",b),e.addEventListener("dragstart",L),e.addEventListener("dragend",H),e.addEventListener("contextmenu",V),y.forEach((e=>{e.addEventListener("contextmenu",x)}))}));let C=null;function k(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let o=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),s=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));o.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),s.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)}function b(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)}function L(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;r.style.visibility="hidden",this.classList.add("dragging"),o=r.getAttribute("data-name"),s=Number(r.getAttribute("data-size")),c=a.offsetX,d=a.offsetY,l=m[o],i=l.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&e.removeShip(l,e),"tempBoard"===r.closest(".board").id&&t.removeShip(l,t)}))}function A(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let r=l.isVertical?t+10*e:t+e;B[r]&&(a.push(B[r]),h.push(B[r]))}z(a)&&(a.forEach((e=>{e.classList.add("highlight")})),C||(C=q(h,s)))}if("tempBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let r=l.isVertical?t+10*e:t+e;S[r]&&(a.push(S[r]),h.push(S[r]))}z(a)&&(a.forEach((e=>{e.classList.add("highlight")})),C||(C=q(h,s)))}}}function P(){h.forEach((e=>{e.classList.remove("highlight")})),h=[]}function E(a){h.forEach((e=>{e.classList.remove("highlight")}));const r=q(h,s),o=a.target;"firstBoard"===o.closest(".board").id&&l&&null!==C&&(e.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,i)?(e.placeShip(l,r[0].dataset.col,r[0].dataset.row,i),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),e.reserveSpace(e,C[0].dataset.col,C[0].dataset.row))),"tempBoard"===o.closest(".board").id&&l&&null!==C&&(t.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,i)?(t.placeShip(l,r[0].dataset.col,r[0].dataset.row,i),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),t.reserveSpace(t,C[0].dataset.col,C[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips),g(),C=null}function H(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===h.length&&("firstBoard"===r.closest(".board").id?C&&e.canBePlaced(l.size,C[0].dataset.col,C[0].dataset.row,i)&&(e.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),e.reserveSpace(e,C[0].dataset.col,C[0].dataset.row),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)):"tempBoard"===r.closest(".board").id&&C&&t.canBePlaced(l.size,C[0].dataset.col,C[0].dataset.row,i)&&(t.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),t.reserveSpace(t,C[0].dataset.col,C[0].dataset.row),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)))}function z(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===s&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function q(e,t){return e.slice(Math.min(e.length-t,0))}function V(a){a.preventDefault();const r=a.target;let c;"firstBoard"===r.closest(".board").id&&(c=e),"tempBoard"===r.closest(".board").id&&(c=t),o=r.getAttribute("data-name"),s=Number(r.getAttribute("data-size")),l=m[o];const d=l,h=c.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===o));c.removeShip(l,c),c.removeReservedSpace(c),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),d.rotate(),i=d.isVertical?"vertical":"horizontal",c.canBePlaced(d.size,h[0].col,h[0].row,i)||(d.rotate(),i=d.isVertical?"vertical":"horizontal"),c.placeShip(d,h[0].col,h[0].row,i),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),u(c),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)}function x(e){e.preventDefault()}B.forEach(((e,t)=>{e.addEventListener("dragover",A(t)),e.addEventListener("dragleave",P),e.addEventListener("drop",E)})),S.forEach(((e,t)=>{e.addEventListener("dragover",A(t)),e.addEventListener("dragleave",P),e.addEventListener("drop",E)}))};return a.addEventListener("click",(()=>m(a,s))),s.addEventListener("click",(()=>m(s,a))),o.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){p(!0),c.forEach((e=>e.disabled=!0)),o.textContent="Restarting...",yield n.newGame(),o.textContent="New Game",c.forEach((e=>e.disabled=!1)),p(!1),g()})))),l.addEventListener("click",(()=>{n.start(),l.disabled=!0,i.disabled=!0})),i.addEventListener("click",(()=>{n.tempBoard.clearBoard(),u(n.tempBoard),n.randomizeShipsPlacement("first",n.humanGameboard),v(n.humanGameboard,n.tempBoard,n.humanShips),g()})),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===n.humanGameboard?a.id="firstBoard":e===n.computerGameboard?a.id="secondBoard":e===n.tempBoard&&(a.id="tempBoard"),d(e,a),t.append(a)},refreshBoard:u,handleUserInput:()=>r(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(h(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:s,waiting:p,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:f,removeTempBoard:()=>{document.querySelector("#tempBoard").remove()},dragAndDrop:v,canBeStarted:g}})(),s=o;var l=function(e,t,a,r){return new(a||(a=Promise))((function(o,s){function l(e){try{n(r.next(e))}catch(e){s(e)}}function i(e){try{n(r.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((r=r.apply(e,t||[])).next())}))};const i=(()=>{const r=e(),o=e(),n=e(),c=a(),d=a();let u=!0,h=t("Carrier"),m=t("Battleship"),p=t("Destroyer"),f=t("Submarine"),g=t("PatrolBoat");const v=[h,m,p,f,g],w=()=>{n.placeShip(h,"A","1","horizontal"),n.placeShip(m,"A","3","horizontal"),n.placeShip(p,"A","5","horizontal"),n.placeShip(f,"A","7","horizontal"),n.placeShip(g,"A","9","horizontal"),n.reserveSpace(n,"A","1"),n.reserveSpace(n,"A","3"),n.reserveSpace(n,"A","5"),n.reserveSpace(n,"A","7"),n.reserveSpace(n,"A","9")},B=()=>(o.allSunk(o)||!!r.allSunk(r))&&(s.removeBoardPointer(),!0),S=e=>{let t;if(e===r?t=d:e===o&&(t=c),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),B())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),B()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),B()))return}},y=(e,a)=>{a.clearBoard(),(e=>{let a;e===r?(h=t("Carrier"),m=t("Battleship"),p=t("Destroyer"),f=t("Submarine"),g=t("PatrolBoat"),a=[h,m,p,f,g]):e===o&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);i.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],l=()=>s[Math.floor(Math.random()*s.length)],n=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=l(),r=n(),o=c(),s=e.canBePlaced(t.size,a,r,o);for(;!s;)a=l(),r=n(),o=c(),s=e.canBePlaced(t.size,a,r,o);s&&(e.placeShip(t,a,r,o),e.reserveSpace(e,a,r)),i.humanShips.push(t)}))})(a),s.refreshBoard(a),"first"===e&&s.createShipOverlay("first",a.shipsPlaced)},C=()=>{s.cVcBtn.classList.contains("selected")&&(s.renderBoard(o),s.removeTempBoard(),y("first",r),y("second",o),u=!1,l(void 0,void 0,void 0,(function*(){s.removeBoardPointer();let e=!0;for(;!B()&&!u;){if(s.waiting(!0),e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;S(r),s.refreshBoard(r),e=!1}if(B()||u)break;if(!e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;S(o),s.refreshBoard(o),e=!0}}u=!1,s.waiting(!1)})))},k=()=>{u=!0,c.setPrevHit(null),c.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),r.clearBoard(),o.clearBoard(),n.clearBoard(),s.refreshBoard(r),w(),s.refreshBoard(n),s.createShipOverlay("temp",n.shipsPlaced),s.dragAndDrop(r,n,v),s.canBeStarted(),C()};return{init:()=>{s.renderBoard(r),s.renderBoard(n),w(),s.refreshBoard(n),s.createShipOverlay("temp",n.shipsPlaced),s.dragAndDrop(r,n,v),s.canBeStarted(),C()},humanGameboard:r,computerGameboard:o,tempBoard:n,restart:k,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,1e3))),u=!1,k()})),start:()=>{s.refreshBoard(r),s.renderBoard(o),s.removeTempBoard(),y("second",o),u=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!B()&&!u;){if(e){s.setBoardPointer("player"),s.waiting(!1);const{col:t,row:a}=yield s.handleUserInput();c.attack(o,t,a),o.sinkShip(o,t,a),s.refreshBoard(o),e=!1}if(B()||u)break;if(!e){if(s.setBoardPointer("computer"),s.waiting(!0),yield new Promise((e=>setTimeout(e,1e3))),!s.pVcBtn.classList.contains("selected")||u)break;S(r),s.refreshBoard(r),e=!0}}u=!1,s.waiting(!1)}))},randomizeShipsPlacement:y,humanShips:v}})(),n=i;n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RiwwQkFBeUJ6QixhQUNsSCxFQW5Qa0IsR0FvUG5CLElDOVBBLEVBQVdxRCxNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2dhbWVib2FyZC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvcGxheWVyLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy91aS50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5jb25zdCBnYW1lYm9hcmRGYWN0b3J5ID0gKCkgPT4ge1xuICAgIGNvbnN0IGNvbHMgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onXTtcbiAgICBjb25zdCByb3dzID0gWycxJywgJzInLCAnMycsICc0JywgJzUnLCAnNicsICc3JywgJzgnLCAnOScsICcxMCddO1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgY29uc3Qgc2hpcHNQbGFjZWQgPSBbXTtcbiAgICBjb25zdCBnZW5lcmF0ZUFycmF5ID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXVtqXSA9IHsgY29sOiBjb2xzW2pdLCByb3c6IHJvd3NbaV0sIHN0YXR1czogJ2VtcHR5JywgdGFrZW5CeTogbnVsbCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjbGVhckJvYXJkID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgMTA7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldW2pdLnN0YXR1cyA9ICdlbXB0eSc7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV1bal0udGFrZW5CeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaGlwc1BsYWNlZC5sZW5ndGggPSAwO1xuICAgIH07XG4gICAgY29uc3QgZ2V0Q2VsbCA9IChjb2wsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBjb2xJbmRleCA9IGNvbHMuaW5kZXhPZihjb2wpO1xuICAgICAgICBjb25zdCByb3dJbmRleCA9IHJvd3MuaW5kZXhPZihyb3cpO1xuICAgICAgICBpZiAoY29sSW5kZXggPT09IC0xIHx8IHJvd0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5W3Jvd0luZGV4XVtjb2xJbmRleF07XG4gICAgfTtcbiAgICBjb25zdCBzZXRDZWxsID0gKGNvbCwgcm93LCBuZXdTdGF0dXMsIG5ld1Rha2VuQnkpID0+IHtcbiAgICAgICAgY29uc3QgY29sSW5kZXggPSBjb2xzLmluZGV4T2YoY29sKTtcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcbiAgICAgICAgaWYgKGNvbEluZGV4ID09PSAtMSB8fCByb3dJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGFycmF5W3Jvd0luZGV4XVtjb2xJbmRleF0uc3RhdHVzID0gbmV3U3RhdHVzO1xuICAgICAgICBpZiAobmV3VGFrZW5CeSkge1xuICAgICAgICAgICAgYXJyYXlbcm93SW5kZXhdW2NvbEluZGV4XS50YWtlbkJ5ID0gbmV3VGFrZW5CeTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlbcm93SW5kZXhdW2NvbEluZGV4XTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVNoaXAgPSAoc2hpcCwgZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgZ2FtZWJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAndGFrZW4nICYmIGNlbGwudGFrZW5CeS5uYW1lID09PSBzaGlwLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjZWxsLnN0YXR1cyA9ICdlbXB0eSc7XG4gICAgICAgICAgICAgICAgY2VsbC50YWtlbkJ5ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcC50YWtlbkJ5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoaXBzUGxhY2VkLnNwbGljZShzaGlwc1BsYWNlZC5pbmRleE9mKHNoaXApLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBib2FyZElkO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZCA9PT0gY29udHJvbGxlci5odW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgICAgIGJvYXJkSWQgPSAnZmlyc3RCb2FyZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQpIHtcbiAgICAgICAgICAgICAgICBib2FyZElkID0gJ3NlY29uZEJvYXJkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZCA9PT0gY29udHJvbGxlci50ZW1wQm9hcmQpIHtcbiAgICAgICAgICAgICAgICBib2FyZElkID0gJ3RlbXBCb2FyZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCMke2JvYXJkSWR9IC5jZWxsYCk7XG4gICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWtlbicpICYmIGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXNoaXBOYW1lJykgPT09IHNoaXAubmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgndGFrZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdlbXB0eScpO1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zaGlwTmFtZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pID0+IHtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2hpcC5pc1ZlcnRpY2FsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICBjb25zdCBjZWxscyA9IGlzSG9yaXpvbnRhbCA/IGNvbHMgOiByb3dzO1xuICAgICAgICBjb25zdCBzdGFydCA9IGNlbGxzLmluZGV4T2YoaXNIb3Jpem9udGFsID8gY29sIDogcm93KTtcbiAgICAgICAgbGV0IHNoaXBDZWxscyA9IFtdO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2hpcC5zaXplID4gY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLnNpemU7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbCA9IGlzSG9yaXpvbnRhbCA/IGNlbGxzW3N0YXJ0ICsgaV0gOiBjb2w7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gaXNIb3Jpem9udGFsID8gcm93IDogY2VsbHNbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIGlmIChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyAhPT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENlbGwoY3VycmVudENvbCwgY3VycmVudFJvdywgJ3Rha2VuJywgc2hpcCk7XG4gICAgICAgICAgICBzaGlwQ2VsbHMucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpKTtcbiAgICAgICAgfVxuICAgICAgICBzaGlwc1BsYWNlZC5wdXNoKHNoaXBDZWxsc1swXSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgY2FuQmVQbGFjZWQgPSAoc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gaXNIb3Jpem9udGFsID8gY29scyA6IHJvd3M7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gY2VsbHMuaW5kZXhPZihpc0hvcml6b250YWwgPyBjb2wgOiByb3cpO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2l6ZSA+IGNlbGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZUVtcHR5ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sID0gaXNIb3Jpem9udGFsID8gY2VsbHNbc3RhcnQgKyBpXSA6IGNvbDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSBpc0hvcml6b250YWwgPyByb3cgOiBjZWxsc1tzdGFydCArIGldO1xuICAgICAgICAgICAgYXJlRW1wdHkucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyA9PT0gJ2VtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZUVtcHR5LmV2ZXJ5KChpdGVtKSA9PiBpdGVtID09PSB0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdldENlbGwoY29sLCByb3cpO1xuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICd0YWtlbicpIHtcbiAgICAgICAgICAgIGNlbGwudGFrZW5CeS5oaXQoKTtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdoaXQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICdlbXB0eScgfHwgY2VsbC5zdGF0dXMgPT09ICdyZXNlcnZlZCcpIHtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdtaXNzJyk7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZWNlaXZlQXJvdW5kID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAnZW1wdHknKSB7XG4gICAgICAgICAgICBzZXRDZWxsKGNvbCwgcm93LCAncmVzZXJ2ZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2VydmVTcGFjZSA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwudGFrZW5CeSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXJvdW5kKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVJlc2VydmVkU3BhY2UgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgZ2FtZWJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAncmVzZXJ2ZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2VsbChjZWxsLmNvbCwgY2VsbC5yb3csICdlbXB0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNpbmtTaGlwID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50YWtlbkJ5ICYmIGNlbGwudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhpdEJ1dE5vdFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgcmV0dXJuIGdhbWVib2FyZENlbGxzLnNvbWUoKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ2hpdCcgJiYgY2VsbC50YWtlbkJ5LmlzU3VuaygpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGFsbFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgbGV0IHRha2VuQnlDZWxscyA9IGdhbWVib2FyZENlbGxzLmZpbHRlcigoY2VsbCkgPT4gY2VsbC50YWtlbkJ5KTtcbiAgICAgICAgaWYgKHRha2VuQnlDZWxscy5sZW5ndGggPiAwICYmIHRha2VuQnlDZWxscy5ldmVyeSgoY2VsbCkgPT4gY2VsbC50YWtlbkJ5LmlzU3VuaygpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGdlbmVyYXRlQXJyYXkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjbGVhckJvYXJkLFxuICAgICAgICBnZXRDZWxsLFxuICAgICAgICBzZXRDZWxsLFxuICAgICAgICByZW1vdmVTaGlwLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIHJlY2VpdmVBcm91bmQsXG4gICAgICAgIHJlc2VydmVTcGFjZSxcbiAgICAgICAgaGl0QnV0Tm90U3VuayxcbiAgICAgICAgc2lua1NoaXAsXG4gICAgICAgIGFsbFN1bmssXG4gICAgICAgIGFycmF5LFxuICAgICAgICBjYW5CZVBsYWNlZCxcbiAgICAgICAgc2hpcHNQbGFjZWQsXG4gICAgICAgIHJlbW92ZVJlc2VydmVkU3BhY2UsXG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBnYW1lYm9hcmRGYWN0b3J5O1xuIiwiY29uc3Qgc2hpcEZhY3RvcnkgPSAobmFtZSkgPT4ge1xuICAgIGxldCBzaXplO1xuICAgIGlmIChuYW1lID09PSAnQ2FycmllcicpIHtcbiAgICAgICAgc2l6ZSA9IDU7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnQmF0dGxlc2hpcCcpIHtcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnRGVzdHJveWVyJykge1xuICAgICAgICBzaXplID0gMztcbiAgICB9XG4gICAgaWYgKG5hbWUgPT09ICdTdWJtYXJpbmUnKSB7XG4gICAgICAgIHNpemUgPSAzO1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ1BhdHJvbEJvYXQnKSB7XG4gICAgICAgIHNpemUgPSAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBzaXplLFxuICAgICAgICBoaXRDb3VudDogMCxcbiAgICAgICAgaXNWZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgIHJvdGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9ICF0aGlzLmlzVmVydGljYWw7XG4gICAgICAgIH0sXG4gICAgICAgIGhpdCgpIHtcbiAgICAgICAgICAgIHRoaXMuaGl0Q291bnQgKz0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNTdW5rKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGl0Q291bnQgPT09IHNpemU7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBzaGlwRmFjdG9yeTtcbiIsImNvbnN0IHBsYXllckZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3QgY29scyA9IFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSiddO1xuICAgIGxldCBwcmV2SGl0ID0gbnVsbDtcbiAgICBsZXQgbGFzdEhpdCA9IG51bGw7XG4gICAgY29uc3QgYXR0YWNrID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBjb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FscmVhZHkgc2hvdCc7XG4gICAgfTtcbiAgICBjb25zdCByYW5kb21BdHRhY2sgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGxldCByYW5kb21Db2w7XG4gICAgICAgIGxldCByYW5kb21Sb3c7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJhbmRvbUNvbCA9IGNvbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29scy5sZW5ndGgpXTtcbiAgICAgICAgICAgIHJhbmRvbVJvdyA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdoaXQnIHx8IGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdtaXNzJyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHJhbmRvbUNvbCwgcmFuZG9tUm93KTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogcmFuZG9tQ29sLCByb3c6IHJhbmRvbVJvdyB9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayBwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayBsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayByYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdCwgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0OiAnYWxyZWFkeSBzaG90JywgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH07XG4gICAgfTtcbiAgICBjb25zdCBmb2xsb3d1cEF0dGFjayA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXG4gICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgeyBjb2w6IDAsIHJvdzogMSB9LFxuICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IDAgfSxcbiAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgdmFsaWREaXJlY3Rpb25zID0gZGlyZWN0aW9ucy5maWx0ZXIoKGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihyb3cpICsgZGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnN0YXR1cyAhPT0gJ21pc3MnICYmIGNlbGwuc3RhdHVzICE9PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHZhbGlkRGlyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPSB2YWxpZERpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsaWREaXJlY3Rpb25zLmxlbmd0aCldO1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmRvbURpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihyb3cpICsgcmFuZG9tRGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogbmV3Q29sLCByb3c6IG5ld1JvdyB9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvbGxvd3VwQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZm9sbG93dXBBdHRhY2sgbGFzdEhpdCcsIGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmb2xsb3d1cEF0dGFjayByYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOaWUgbWEgZG9zdMSZcG55Y2gga2llcnVua8OzdyBkbyBhdGFrdScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmFuZ2UgPSAxO1xuICAgIGxldCBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICBsZXQgZ29Eb3duID0gdHJ1ZTtcbiAgICBjb25zdCBmaW5pc2hpbmdBdHRhY2sgPSAoZ2FtZWJvYXJkLCBjb2wsIHJvdywgcHJldkhpdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc3RhcnQgZmluaXNoaW5nQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgY29uc29sZS5sb2coJ3N0YXJ0IGZpbmlzaGluZ0F0dGFjayBsYXN0SGl0JywgeyBjb2wsIHJvdyB9KTtcbiAgICAgICAgaWYgKHByZXZIaXQucm93ID09PSByb3cpIHtcbiAgICAgICAgICAgIC8vIGhvcml6b250YWwgc2hpcCBjYXNlXG4gICAgICAgICAgICBpZiAoZ29SaWdodCkge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ29SaWdodCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIG5ld0NvbCwgcm93LCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvTGVmdCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSAtIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgbmV3Q29sLCByb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2SGl0LmNvbCA9PT0gY29sKSB7XG4gICAgICAgICAgICAvLyB2ZXJ0aWNhbCBzaGlwIGNhc2VcbiAgICAgICAgICAgIGlmIChnb0Rvd24pIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvRG93bicpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyByYW5nZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld1JvdyA9IChOdW1iZXIocm93KSArIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBjb2wsIG5ld1JvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnb1VwJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1JvdyA9IChOdW1iZXIocm93KSAtIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1JvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Um93ID0gKE51bWJlcihyb3cpIC0gcmFuZ2UpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1JvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyAhPT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyAhPT0gJ21pc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQcmV2SGl0KGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogY29sLCByb3c6IG5ld1JvdyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncHJldkhpdCcsIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnbGFzdEhpdCcsIGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmFuZ2UnLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZ29Eb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgY29sLCBuZXdSb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZ2V0UHJldkhpdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHByZXZIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBnZXRMYXN0SGl0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbGFzdEhpdDtcbiAgICB9O1xuICAgIGNvbnN0IHNldFByZXZIaXQgPSAobmV3UHJldkhpdCkgPT4ge1xuICAgICAgICBwcmV2SGl0ID0gbmV3UHJldkhpdDtcbiAgICB9O1xuICAgIGNvbnN0IHNldExhc3RIaXQgPSAobmV3TGFzdEhpdCkgPT4ge1xuICAgICAgICBsYXN0SGl0ID0gbmV3TGFzdEhpdDtcbiAgICB9O1xuICAgIHJldHVybiB7IGF0dGFjaywgcmFuZG9tQXR0YWNrLCBmb2xsb3d1cEF0dGFjaywgZmluaXNoaW5nQXR0YWNrLCBwcmV2SGl0LCBsYXN0SGl0LCBnZXRQcmV2SGl0LCBnZXRMYXN0SGl0LCBzZXRQcmV2SGl0LCBzZXRMYXN0SGl0IH07XG59O1xuZXhwb3J0IGRlZmF1bHQgcGxheWVyRmFjdG9yeTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmNvbnN0IHVpID0gKCgpID0+IHtcbiAgICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3dyYXBwZXInKTtcbiAgICBjb25zdCBib2FyZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBib2FyZHMuaWQgPSAnYm9hcmRzJztcbiAgICB3cmFwcGVyLnByZXBlbmQoYm9hcmRzKTtcbiAgICBjb25zdCBwVmNCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxheWVyVnNDb21wdXRlcicpO1xuICAgIGNvbnN0IG5ld0dhbWVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV3R2FtZScpO1xuICAgIGNvbnN0IGNWY0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wdXRlclZzQ29tcHV0ZXInKTtcbiAgICBjb25zdCBzdGFydEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydCcpO1xuICAgIGNvbnN0IHJhbmRvbUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyYW5kb21QbGFjZW1lbnQnKTtcbiAgICBjb25zdCBhbGxCdG5zID0gW3BWY0J0biwgbmV3R2FtZUJ0biwgY1ZjQnRuLCBzdGFydEJ0biwgcmFuZG9tQnRuXTtcbiAgICBjb25zdCBjcmVhdGVDZWxsID0gKGNlbGwpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNlbGwuc3RhdHVzKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJywgY2VsbC5jb2wpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1yb3cnLCBjZWxsLnJvdyk7XG4gICAgICAgIGlmIChjZWxsLnRha2VuQnkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNoaXBOYW1lJywgY2VsbC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJDZWxscyA9IChnYW1lYm9hcmQsIGJvYXJkKSA9PiB7XG4gICAgICAgIGdhbWVib2FyZC5hcnJheS5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY3JlYXRlQ2VsbChjb2wpO1xuICAgICAgICAgICAgICAgIGJvYXJkLmFwcGVuZChjZWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHJlbmRlckJvYXJkID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBib2FyZC5jbGFzc0xpc3QuYWRkKCdib2FyZCcpO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmh1bWFuR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZC5pZCA9ICdmaXJzdEJvYXJkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIGJvYXJkLmlkID0gJ3NlY29uZEJvYXJkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIudGVtcEJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZC5pZCA9ICd0ZW1wQm9hcmQnO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlckNlbGxzKGdhbWVib2FyZCwgYm9hcmQpO1xuICAgICAgICBib2FyZHMuYXBwZW5kKGJvYXJkKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlZnJlc2hCb2FyZCA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgbGV0IGJvYXJkSWQ7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIGJvYXJkSWQgPSAnZmlyc3RCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZElkID0gJ3NlY29uZEJvYXJkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIudGVtcEJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZElkID0gJ3RlbXBCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtib2FyZElkfWApO1xuICAgICAgICBib2FyZC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmVuZGVyQ2VsbHMoZ2FtZWJvYXJkLCBib2FyZCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRVc2VySW5wdXQgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaGl0JykgJiYgIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWlzcycpKSB7XG4gICAgICAgICAgICBjb25zdCBjb2wgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJyk7XG4gICAgICAgICAgICBjb25zdCByb3cgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm93Jyk7XG4gICAgICAgICAgICByZXR1cm4geyBjb2wsIHJvdyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVVc2VySW5wdXQgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2Vjb25kQm9hcmQgLmNlbGwnKTtcbiAgICAgICAgbGV0IHVzZXJJbnB1dDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdXNlcklucHV0ID0geWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpdCcpICYmICFjZWxsLmNsYXNzTGlzdC5jb250YWlucygnbWlzcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGdldFVzZXJJbnB1dChlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IHdoaWxlICghdXNlcklucHV0KTtcbiAgICAgICAgY29uc3QgY29sID0gdXNlcklucHV0LmNvbC50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByb3cgPSB1c2VySW5wdXQucm93LnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB7IGNvbCwgcm93IH07XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlUHZDID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHdhaXRpbmcodHJ1ZSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gdHJ1ZSkpO1xuICAgICAgICBwVmNCdG4udGV4dENvbnRlbnQgPSAnU3RhcnRpbmcuLi4nO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAgIHBWY0J0bi50ZXh0Q29udGVudCA9ICdQbGF5ZXIgdnMgQ29tcHV0ZXInO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IGZhbHNlKSk7XG4gICAgICAgIHdhaXRpbmcoZmFsc2UpO1xuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZU5ld0dhbWUgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgd2FpdGluZyh0cnVlKTtcbiAgICAgICAgYWxsQnRucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSB0cnVlKSk7XG4gICAgICAgIG5ld0dhbWVCdG4udGV4dENvbnRlbnQgPSAnUmVzdGFydGluZy4uLic7XG4gICAgICAgIHlpZWxkIGNvbnRyb2xsZXIubmV3R2FtZSgpO1xuICAgICAgICBuZXdHYW1lQnRuLnRleHRDb250ZW50ID0gJ05ldyBHYW1lJztcbiAgICAgICAgYWxsQnRucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSBmYWxzZSkpO1xuICAgICAgICB3YWl0aW5nKGZhbHNlKTtcbiAgICAgICAgY2FuQmVTdGFydGVkKCk7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlQ3ZDID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHdhaXRpbmcodHJ1ZSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gdHJ1ZSkpO1xuICAgICAgICBjVmNCdG4udGV4dENvbnRlbnQgPSAnU3RhcnRpbmcuLi4nO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAgIGNWY0J0bi50ZXh0Q29udGVudCA9ICdDb21wdXRlciB2cyBDb21wdXRlcic7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlR2FtZU1vZGUgPSAoc2VsZWN0ZWRFbGVtZW50LCBkZXNlbGVjdGVkRWxlbWVudCkgPT4ge1xuICAgICAgICBkZXNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIXNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdGVkRWxlbWVudCA9PT0gcFZjQnRuKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlUHZDKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRFbGVtZW50ID09PSBjVmNCdG4pIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVDdkMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzdGFydCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB3YWl0aW5nID0gKGJvb2wpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ3dhaXQnLCBib29sKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldEJvYXJkUG9pbnRlciA9ICh3aGljaCkgPT4ge1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgaWYgKHdoaWNoID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5hZGQoJ2JvYXJkT3V0bGluZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdoaWNoID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnYm9hcmRPdXRsaW5lJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUJvYXJkUG9pbnRlciA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QucmVtb3ZlKCdib2FyZE91dGxpbmUnKTtcbiAgICB9O1xuICAgIGNvbnN0IGNyZWF0ZVNoaXBPdmVybGF5ID0gKGdhbWVib2FyZE5hbWUsIHNoaXBzKSA9PiB7XG4gICAgICAgIHNoaXBzLmZvckVhY2goKGZpcnN0Q2VsbCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2hpcEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBOYW1lID0gZmlyc3RDZWxsLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3Qgc2hpcFNpemUgPSBmaXJzdENlbGwudGFrZW5CeS5zaXplO1xuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IGZpcnN0Q2VsbC50YWtlbkJ5LmlzVmVydGljYWw7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzaGlwJywgc2hpcE5hbWUpO1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBgJHtzaGlwU2l6ZX1gKTtcbiAgICAgICAgICAgIHNoaXBFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJywgYCR7c2hpcE5hbWV9YCk7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScsICd0cnVlJyk7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdkcmFnZ2FibGUnKTtcbiAgICAgICAgICAgIGNvbnN0IHNldFNoaXBTdHlsZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUud2lkdGggPSBzaGlwU2l6ZSAqIChjZWxsU2l6ZSAvIDE2KSArICdyZW0nO1xuICAgICAgICAgICAgICAgICAgICBzaGlwRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBjZWxsU2l6ZSAvIDE2ICsgJ3JlbSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUud2lkdGggPSBjZWxsU2l6ZSAvIDE2ICsgJ3JlbSc7XG4gICAgICAgICAgICAgICAgICAgIHNoaXBFbGVtZW50LnN0eWxlLmhlaWdodCA9IHNoaXBTaXplICogKGNlbGxTaXplIC8gMTYpICsgJ3JlbSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBjZWxsU2l6ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCAuY2VsbCcpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICAgICAgc2V0U2hpcFN0eWxlKCk7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNlbGxTaXplID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkIC5jZWxsJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICAgICAgc2V0U2hpcFN0eWxlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGxldCBib2FyZDtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmROYW1lID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICAgICAgYm9hcmQgPSAnZmlyc3RCb2FyZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmROYW1lID09PSAndGVtcCcpIHtcbiAgICAgICAgICAgICAgICBib2FyZCA9ICd0ZW1wQm9hcmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlyc3RDZWxsRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2JvYXJkfSAuY2VsbFtkYXRhLWNvbD1cIiR7Zmlyc3RDZWxsLmNvbH1cIl1bZGF0YS1yb3c9XCIke2ZpcnN0Q2VsbC5yb3d9XCJdYCk7XG4gICAgICAgICAgICBmaXJzdENlbGxFbGVtZW50LmFwcGVuZENoaWxkKHNoaXBFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVUZW1wQm9hcmQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbXBCb2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdGVtcEJvYXJkJyk7XG4gICAgICAgIHRlbXBCb2FyZEVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfTtcbiAgICBjb25zdCBjYW5CZVN0YXJ0ZWQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb250cm9sbGVyLmh1bWFuR2FtZWJvYXJkLnNoaXBzUGxhY2VkLmxlbmd0aCA9PT0gNSAmJiBjb250cm9sbGVyLnRlbXBCb2FyZC5zaGlwc1BsYWNlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGRyYWdBbmREcm9wID0gKGZpcnN0R2FtZWJvYXJkLCB0ZW1wR2FtZWJvYXJkLCBzaGlwcykgPT4ge1xuICAgICAgICBsZXQgc2hpcE5hbWU7XG4gICAgICAgIGxldCBzaGlwU2l6ZTtcbiAgICAgICAgbGV0IGdyYWJQb2ludFggPSAwO1xuICAgICAgICBsZXQgZ3JhYlBvaW50WSA9IDA7XG4gICAgICAgIGxldCBzaGlwT2JqO1xuICAgICAgICBsZXQgb3JpZW50YXRpb247XG4gICAgICAgIGxldCBoaWdobGlnaHRlZENlbGxzID0gW107XG4gICAgICAgIGNvbnN0IHNoaXBOYW1lVG9PYmogPSB7XG4gICAgICAgICAgICBjYXJyaWVyOiBzaGlwc1swXSxcbiAgICAgICAgICAgIGJhdHRsZXNoaXA6IHNoaXBzWzFdLFxuICAgICAgICAgICAgZGVzdHJveWVyOiBzaGlwc1syXSxcbiAgICAgICAgICAgIHN1Ym1hcmluZTogc2hpcHNbM10sXG4gICAgICAgICAgICBwYXRyb2xib2F0OiBzaGlwc1s0XSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZmlyc3RCb2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RCb2FyZCcpO1xuICAgICAgICBjb25zdCB0ZW1wQm9hcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3RlbXBCb2FyZCcpO1xuICAgICAgICBjb25zdCBmaXJzdEJvYXJkQ2VsbHMgPSBmaXJzdEJvYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2VsbCcpO1xuICAgICAgICBjb25zdCB0ZW1wQm9hcmRDZWxscyA9IHRlbXBCb2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICAgICAgY29uc3Qgbm9uU2hpcENlbGxzID0gW107XG4gICAgICAgIGZvciAobGV0IGNlbGwgb2YgZmlyc3RCb2FyZENlbGxzKSB7XG4gICAgICAgICAgICBpZiAoIWNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWtlbicpKSB7XG4gICAgICAgICAgICAgICAgbm9uU2hpcENlbGxzLnB1c2goY2VsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgY2VsbCBvZiB0ZW1wQm9hcmRDZWxscykge1xuICAgICAgICAgICAgaWYgKCFjZWxsLmNsYXNzTGlzdC5jb250YWlucygndGFrZW4nKSkge1xuICAgICAgICAgICAgICAgIG5vblNoaXBDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRyYWdnYWJsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHJhZ2dhYmxlJyk7XG4gICAgICAgIGRyYWdnYWJsZXMuZm9yRWFjaCgoZHJhZ2dhYmxlKSA9PiB7XG4gICAgICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlTW91c2Vkb3duKTtcbiAgICAgICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2V1cCk7XG4gICAgICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlRHJhZ1N0YXJ0KTtcbiAgICAgICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnZW5kJywgaGFuZGxlRHJhZ0VuZCk7XG4gICAgICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBoYW5kbGVSb3RhdGUpO1xuICAgICAgICAgICAgbm9uU2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRleHRtZW51JywgYmxvY2tSaWdodENsaWNrKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGxhc3REcmFnZ2VkID0gbnVsbDtcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTW91c2Vkb3duKGUpIHtcbiAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2UoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgdGVtcEdhbWVib2FyZC5yZW1vdmVSZXNlcnZlZFNwYWNlKHRlbXBHYW1lYm9hcmQpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0U2hpcE5hbWUgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpO1xuICAgICAgICAgICAgbGV0IHVwZGF0ZWRTaGlwc1BsYWNlZEZpcnN0ID0gZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZmlsdGVyKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFNoaXBOYW1lICE9PSBzaGlwLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgdXBkYXRlZFNoaXBzUGxhY2VkVGVtcCA9IHRlbXBHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZmlsdGVyKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFNoaXBOYW1lICE9PSBzaGlwLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1cGRhdGVkU2hpcHNQbGFjZWRGaXJzdC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1cGRhdGVkU2hpcHNQbGFjZWRUZW1wLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICB0ZW1wR2FtZWJvYXJkLnJlc2VydmVTcGFjZSh0ZW1wR2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWZyZXNoQm9hcmQoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgcmVmcmVzaEJvYXJkKHRlbXBHYW1lYm9hcmQpO1xuICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ3RlbXAnLCB0ZW1wR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCB0ZW1wR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNldXAoKSB7XG4gICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZW1wR2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICB0ZW1wR2FtZWJvYXJkLnJlc2VydmVTcGFjZSh0ZW1wR2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWZyZXNoQm9hcmQoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgcmVmcmVzaEJvYXJkKHRlbXBHYW1lYm9hcmQpO1xuICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ3RlbXAnLCB0ZW1wR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCB0ZW1wR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydChlKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKTtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0YXJnZXQuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcbiAgICAgICAgICAgICAgICBzaGlwTmFtZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpO1xuICAgICAgICAgICAgICAgIHNoaXBTaXplID0gTnVtYmVyKHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2l6ZScpKTtcbiAgICAgICAgICAgICAgICBncmFiUG9pbnRYID0gZS5vZmZzZXRYO1xuICAgICAgICAgICAgICAgIGdyYWJQb2ludFkgPSBlLm9mZnNldFk7XG4gICAgICAgICAgICAgICAgc2hpcE9iaiA9IHNoaXBOYW1lVG9PYmpbc2hpcE5hbWVdO1xuICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVtb3ZlU2hpcChzaGlwT2JqLCBmaXJzdEdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICd0ZW1wQm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBHYW1lYm9hcmQucmVtb3ZlU2hpcChzaGlwT2JqLCB0ZW1wR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVEcmFnT3ZlcihpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ2ZpcnN0Qm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNoaXBPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzdGFydENlbGwgPSBpbmRleCAtIChzaGlwT2JqLmlzVmVydGljYWwgPyBNYXRoLmZsb29yKGdyYWJQb2ludFkgLyB0aGlzLm9mZnNldEhlaWdodCkgKiAxMCA6IE1hdGguZmxvb3IoZ3JhYlBvaW50WCAvIHRoaXMub2Zmc2V0V2lkdGgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvSGlnaGxpZ2h0ID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXBTaXplOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEluZGV4ID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gc3RhcnRDZWxsICsgaSAqIDEwIDogc3RhcnRDZWxsICsgaTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RCb2FyZENlbGxzW2NlbGxJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9IaWdobGlnaHQucHVzaChmaXJzdEJvYXJkQ2VsbHNbY2VsbEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMucHVzaChmaXJzdEJvYXJkQ2VsbHNbY2VsbEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQbGFjZW1lbnQodG9IaWdobGlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9IaWdobGlnaHQuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGFzdERyYWdnZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdERyYWdnZWQgPSBnZXRMYXN0U2hpcFNpemVFbGVtZW50cyhoaWdobGlnaHRlZENlbGxzLCBzaGlwU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBcdGNvbnNvbGUubG9nKCdzaGlwIGlzIG9uIHRoZSBlZGdlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ3RlbXBCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaikge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0YXJ0Q2VsbCA9IGluZGV4IC0gKHNoaXBPYmouaXNWZXJ0aWNhbCA/IE1hdGguZmxvb3IoZ3JhYlBvaW50WSAvIHRoaXMub2Zmc2V0SGVpZ2h0KSAqIDEwIDogTWF0aC5mbG9vcihncmFiUG9pbnRYIC8gdGhpcy5vZmZzZXRXaWR0aCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9IaWdobGlnaHQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcFNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjZWxsSW5kZXggPSBzaGlwT2JqLmlzVmVydGljYWwgPyBzdGFydENlbGwgKyBpICogMTAgOiBzdGFydENlbGwgKyBpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1wQm9hcmRDZWxsc1tjZWxsSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LnB1c2godGVtcEJvYXJkQ2VsbHNbY2VsbEluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMucHVzaCh0ZW1wQm9hcmRDZWxsc1tjZWxsSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZFBsYWNlbWVudCh0b0hpZ2hsaWdodCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXN0RHJhZ2dlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0RHJhZ2dlZCA9IGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFx0Y29uc29sZS5sb2coJ3NoaXAgaXMgb24gdGhlIGVkZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhZ0xlYXZlKCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxscy5mb3JFYWNoKChoaWdobGlnaHRlZENlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRlZENlbGwuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMuZm9yRWFjaCgoaGlnaGxpZ2h0ZWRDZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMoaGlnaGxpZ2h0ZWRDZWxscywgc2hpcFNpemUpO1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaiAmJiBsYXN0RHJhZ2dlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RHYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZmlyc3RHYW1lYm9hcmQsIGxhc3RbMF0uZGF0YXNldC5jb2wsIGxhc3RbMF0uZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ3RlbXBCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaiAmJiBsYXN0RHJhZ2dlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVtcEdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwT2JqLnNpemUsIGxhc3RbMF0uZGF0YXNldC5jb2wsIGxhc3RbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcE9iaiwgbGFzdFswXS5kYXRhc2V0LmNvbCwgbGFzdFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEdhbWVib2FyZC5yZXNlcnZlU3BhY2UodGVtcEdhbWVib2FyZCwgbGFzdFswXS5kYXRhc2V0LmNvbCwgbGFzdFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wR2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBHYW1lYm9hcmQsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZW1vdmVSZXNlcnZlZFNwYWNlKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgICAgIHRlbXBHYW1lYm9hcmQucmVtb3ZlUmVzZXJ2ZWRTcGFjZSh0ZW1wR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZmlyc3RHYW1lYm9hcmQsIHNoaXAuY29sLCBzaGlwLnJvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRlbXBHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXBHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBHYW1lYm9hcmQsIHNoaXAuY29sLCBzaGlwLnJvdyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlZnJlc2hCb2FyZChmaXJzdEdhbWVib2FyZCk7XG4gICAgICAgICAgICByZWZyZXNoQm9hcmQodGVtcEdhbWVib2FyZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgndGVtcCcsIHRlbXBHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgZHJhZ0FuZERyb3AoZmlyc3RHYW1lYm9hcmQsIHRlbXBHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgICAgICBjYW5CZVN0YXJ0ZWQoKTtcbiAgICAgICAgICAgIGxhc3REcmFnZ2VkID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVEcmFnRW5kKGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgdGFyZ2V0LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJyk7XG4gICAgICAgICAgICBpZiAoaGlnaGxpZ2h0ZWRDZWxscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3REcmFnZ2VkICYmIGZpcnN0R2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXBPYmouc2l6ZSwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnJlc2VydmVTcGFjZShmaXJzdEdhbWVib2FyZCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hCb2FyZChmaXJzdEdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQm9hcmQodGVtcEdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgndGVtcCcsIHRlbXBHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJhZ0FuZERyb3AoZmlyc3RHYW1lYm9hcmQsIHRlbXBHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAndGVtcEJvYXJkJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdERyYWdnZWQgJiYgdGVtcEdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwT2JqLnNpemUsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wR2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBHYW1lYm9hcmQsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQm9hcmQoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEJvYXJkKHRlbXBHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXkoJ3RlbXAnLCB0ZW1wR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCB0ZW1wR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlzVmFsaWRQbGFjZW1lbnQodG9IaWdobGlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiAodG9IaWdobGlnaHQuZXZlcnkoKGNlbGwpID0+IGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdlbXB0eScpKSAmJlxuICAgICAgICAgICAgICAgICh0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gY2VsbC5kYXRhc2V0LmNvbCA9PT0gdG9IaWdobGlnaHRbMF0uZGF0YXNldC5jb2wpIHx8XG4gICAgICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmRhdGFzZXQucm93ID09PSB0b0hpZ2hsaWdodFswXS5kYXRhc2V0LnJvdykpICYmXG4gICAgICAgICAgICAgICAgdG9IaWdobGlnaHQubGVuZ3RoID09PSBzaGlwU2l6ZSAmJlxuICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmRhdGFzZXQuY29sID49ICdBJyAmJiBjZWxsLmRhdGFzZXQuY29sIDw9ICdKJykgJiZcbiAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gTnVtYmVyKGNlbGwuZGF0YXNldC5yb3cpID49IDEgJiYgTnVtYmVyKGNlbGwuZGF0YXNldC5yb3cpIDw9IDEwKSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMoaGlnaGxpZ2h0ZWRDZWxscywgc2hpcFNpemUpIHtcbiAgICAgICAgICAgIHJldHVybiBoaWdobGlnaHRlZENlbGxzLnNsaWNlKE1hdGgubWluKGhpZ2hsaWdodGVkQ2VsbHMubGVuZ3RoIC0gc2hpcFNpemUsIDApKTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdEJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBoYW5kbGVEcmFnT3ZlcihpbmRleCkpO1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBoYW5kbGVEcmFnTGVhdmUpO1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0ZW1wQm9hcmRDZWxscy5mb3JFYWNoKChjZWxsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGhhbmRsZURyYWdPdmVyKGluZGV4KSk7XG4gICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIGhhbmRsZURyYWdMZWF2ZSk7XG4gICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJvdGF0ZShlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGxldCBnYW1lYm9hcmQ7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQgPSBmaXJzdEdhbWVib2FyZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICd0ZW1wQm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkID0gdGVtcEdhbWVib2FyZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNoaXBOYW1lID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJyk7XG4gICAgICAgICAgICBzaGlwU2l6ZSA9IE51bWJlcih0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXNpemUnKSk7XG4gICAgICAgICAgICBzaGlwT2JqID0gc2hpcE5hbWVUb09ialtzaGlwTmFtZV07XG4gICAgICAgICAgICBjb25zdCB0ZW1wU2hpcCA9IHNoaXBPYmo7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZpbHRlcigoc2hpcCkgPT4gc2hpcC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gc2hpcE5hbWUpO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlbW92ZVNoaXAoc2hpcE9iaiwgZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZW1vdmVSZXNlcnZlZFNwYWNlKGdhbWVib2FyZCk7XG4gICAgICAgICAgICBnYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0ZW1wU2hpcC5yb3RhdGUoKTtcbiAgICAgICAgICAgIG9yaWVudGF0aW9uID0gdGVtcFNoaXAuaXNWZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmNhbkJlUGxhY2VkKHRlbXBTaGlwLnNpemUsIGN1cnJlbnRbMF0uY29sLCBjdXJyZW50WzBdLnJvdywgb3JpZW50YXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcCh0ZW1wU2hpcCwgY3VycmVudFswXS5jb2wsIGN1cnJlbnRbMF0ucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wU2hpcC5yb3RhdGUoKTtcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbiA9IHRlbXBTaGlwLmlzVmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAodGVtcFNoaXAsIGN1cnJlbnRbMF0uY29sLCBjdXJyZW50WzBdLnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGdhbWVib2FyZCwgc2hpcC5jb2wsIHNoaXAucm93KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVmcmVzaEJvYXJkKGdhbWVib2FyZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSgndGVtcCcsIHRlbXBHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgZHJhZ0FuZERyb3AoZmlyc3RHYW1lYm9hcmQsIHRlbXBHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYmxvY2tSaWdodENsaWNrKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcFZjQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gaGFuZGxlR2FtZU1vZGUocFZjQnRuLCBjVmNCdG4pKTtcbiAgICBjVmNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBoYW5kbGVHYW1lTW9kZShjVmNCdG4sIHBWY0J0bikpO1xuICAgIG5ld0dhbWVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVOZXdHYW1lKTtcbiAgICBzdGFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgY29udHJvbGxlci5zdGFydCgpO1xuICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmFuZG9tQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb250cm9sbGVyLnRlbXBCb2FyZC5jbGVhckJvYXJkKCk7XG4gICAgICAgIHJlZnJlc2hCb2FyZChjb250cm9sbGVyLnRlbXBCb2FyZCk7XG4gICAgICAgIGNvbnRyb2xsZXIucmFuZG9taXplU2hpcHNQbGFjZW1lbnQoJ2ZpcnN0JywgY29udHJvbGxlci5odW1hbkdhbWVib2FyZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQsIGNvbnRyb2xsZXIudGVtcEJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICBjYW5CZVN0YXJ0ZWQoKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJCb2FyZCxcbiAgICAgICAgcmVmcmVzaEJvYXJkLFxuICAgICAgICBoYW5kbGVVc2VySW5wdXQsXG4gICAgICAgIHBWY0J0bixcbiAgICAgICAgY1ZjQnRuLFxuICAgICAgICB3YWl0aW5nLFxuICAgICAgICBzZXRCb2FyZFBvaW50ZXIsXG4gICAgICAgIHJlbW92ZUJvYXJkUG9pbnRlcixcbiAgICAgICAgY3JlYXRlU2hpcE92ZXJsYXksXG4gICAgICAgIHJlbW92ZVRlbXBCb2FyZCxcbiAgICAgICAgZHJhZ0FuZERyb3AsXG4gICAgICAgIGNhbkJlU3RhcnRlZCxcbiAgICB9O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IHVpO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tICcuL2dhbWVib2FyZCc7XG5pbXBvcnQgc2hpcEZhY3RvcnkgZnJvbSAnLi9zaGlwJztcbmltcG9ydCBwbGF5ZXJGYWN0b3J5IGZyb20gJy4vcGxheWVyJztcbmltcG9ydCB1aSBmcm9tICcuL3VpJztcbmNvbnN0IGNvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGh1bWFuR2FtZWJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICAgIGNvbnN0IGNvbXB1dGVyR2FtZWJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICAgIGNvbnN0IHRlbXBCb2FyZCA9IGdhbWVib2FyZEZhY3RvcnkoKTtcbiAgICBjb25zdCBodW1hbiA9IHBsYXllckZhY3RvcnkoKTtcbiAgICBjb25zdCBjb21wdXRlciA9IHBsYXllckZhY3RvcnkoKTtcbiAgICBsZXQgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICBsZXQgaHVtYW5DYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICBsZXQgaHVtYW5CYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICBsZXQgaHVtYW5EZXN0cm95ZXIgPSBzaGlwRmFjdG9yeSgnRGVzdHJveWVyJyk7XG4gICAgbGV0IGh1bWFuU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgIGxldCBodW1hblBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sQm9hdCcpO1xuICAgIGNvbnN0IGh1bWFuU2hpcHMgPSBbaHVtYW5DYXJyaWVyLCBodW1hbkJhdHRsZXNoaXAsIGh1bWFuRGVzdHJveWVyLCBodW1hblN1Ym1hcmluZSwgaHVtYW5QYXRyb2xib2F0XTtcbiAgICBjb25zdCBwb3B1bGF0ZVRlbXBCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgdGVtcEJvYXJkLnBsYWNlU2hpcChodW1hbkNhcnJpZXIsICdBJywgJzEnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICB0ZW1wQm9hcmQucGxhY2VTaGlwKGh1bWFuQmF0dGxlc2hpcCwgJ0EnLCAnMycsICdob3Jpem9udGFsJyk7XG4gICAgICAgIHRlbXBCb2FyZC5wbGFjZVNoaXAoaHVtYW5EZXN0cm95ZXIsICdBJywgJzUnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICB0ZW1wQm9hcmQucGxhY2VTaGlwKGh1bWFuU3VibWFyaW5lLCAnQScsICc3JywgJ2hvcml6b250YWwnKTtcbiAgICAgICAgdGVtcEJvYXJkLnBsYWNlU2hpcChodW1hblBhdHJvbGJvYXQsICdBJywgJzknLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICB0ZW1wQm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBCb2FyZCwgJ0EnLCAnMScpO1xuICAgICAgICB0ZW1wQm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBCb2FyZCwgJ0EnLCAnMycpO1xuICAgICAgICB0ZW1wQm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBCb2FyZCwgJ0EnLCAnNScpO1xuICAgICAgICB0ZW1wQm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBCb2FyZCwgJ0EnLCAnNycpO1xuICAgICAgICB0ZW1wQm9hcmQucmVzZXJ2ZVNwYWNlKHRlbXBCb2FyZCwgJ0EnLCAnOScpO1xuICAgIH07XG4gICAgY29uc3QgaXNHYW1lT3ZlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNvbXB1dGVyR2FtZWJvYXJkLmFsbFN1bmsoY29tcHV0ZXJHYW1lYm9hcmQpKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnQWxsIGNvbXB1dGVyIHNoaXBzIGFyZSBzdW5rLiBIdW1hbiBwbGF5ZXIgd29uIScpO1xuICAgICAgICAgICAgdWkucmVtb3ZlQm9hcmRQb2ludGVyKCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHVtYW5HYW1lYm9hcmQuYWxsU3VuayhodW1hbkdhbWVib2FyZCkpIHtcbiAgICAgICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0FsbCBodW1hbiBzaGlwcyBhcmUgc3Vuay4gQ29tcHV0ZXIgcGxheWVyIHdvbiEnKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIGNvbnN0IGNvbXB1dGVyQUkgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGxldCBwbGF5ZXI7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGh1bWFuR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBwbGF5ZXIgPSBjb21wdXRlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBwbGF5ZXIgPSBodW1hbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZ2FtZWJvYXJkLmhpdEJ1dE5vdFN1bmsoZ2FtZWJvYXJkKSkge1xuICAgICAgICAgICAgaWYgKHBsYXllci5nZXRQcmV2SGl0KCkgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZ2V0TGFzdEhpdCgpICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLmdldENlbGwocGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KS50YWtlbkJ5LmhpdENvdW50ID49IDIgJiZcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQuZ2V0Q2VsbChwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpLnRha2VuQnkuaGl0Q291bnQgPD0gNCkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdGSU5JU0g6ID49IDIgdHJhZmllbmlhIHcgc3RhdGVrJywgcGxheWVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgICAgICAgICAgcGxheWVyLmZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdywgcGxheWVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnNpbmtTaGlwKGdhbWVib2FyZCwgcGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpLnRha2VuQnkuaGl0Q291bnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZm9sbG93dXBBdHRhY2soZ2FtZWJvYXJkLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5zaW5rU2hpcChnYW1lYm9hcmQsIHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeyBjb2wsIHJvdyB9ID0gcGxheWVyLnJhbmRvbUF0dGFjayhnYW1lYm9hcmQpO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldFByZXZIaXQocGxheWVyLmdldExhc3RIaXQoKSk7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldExhc3RIaXQoeyBjb2wsIHJvdyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykuc3RhdHVzID09PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5zaW5rU2hpcChnYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UHJldkhpdChudWxsKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0TGFzdEhpdChudWxsKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBsYXllclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICB3aGlsZSAoIWlzR2FtZU92ZXIoKSAmJiAhaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0Qm9hcmRQb2ludGVyKCdwbGF5ZXInKTtcbiAgICAgICAgICAgICAgICB1aS53YWl0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvbCwgcm93IH0gPSB5aWVsZCB1aS5oYW5kbGVVc2VySW5wdXQoKTtcbiAgICAgICAgICAgICAgICBodW1hbi5hdHRhY2soY29tcHV0ZXJHYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBjb21wdXRlckdhbWVib2FyZC5zaW5rU2hpcChjb21wdXRlckdhbWVib2FyZCwgY29sLCByb3cpO1xuICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRCb2FyZFBvaW50ZXIoJ2NvbXB1dGVyJyk7XG4gICAgICAgICAgICAgICAgdWkud2FpdGluZyh0cnVlKTtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAgICAgICAgICAgaWYgKCF1aS5wVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcHV0ZXJBSShodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB1aS53YWl0aW5nKGZhbHNlKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICBsZXQgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKCFpc0dhbWVPdmVyKCkgJiYgIWlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdWkud2FpdGluZyh0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAgICAgICAgICAgaWYgKCF1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcHV0ZXJBSShodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBpc1BsYXllclR1cm4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc0dhbWVPdmVyKCkgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzUGxheWVyVHVybikge1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgICAgICAgICAgICBpZiAoIXVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21wdXRlckFJKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICB1aS5yZWZyZXNoQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHVpLndhaXRpbmcoZmFsc2UpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJhbmRvbVBsYWNlbWVudCA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgbGV0IGFsbFNoaXBzO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkID09PSBodW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgaHVtYW5DYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICAgICAgICAgIGh1bWFuQmF0dGxlc2hpcCA9IHNoaXBGYWN0b3J5KCdCYXR0bGVzaGlwJyk7XG4gICAgICAgICAgICBodW1hbkRlc3Ryb3llciA9IHNoaXBGYWN0b3J5KCdEZXN0cm95ZXInKTtcbiAgICAgICAgICAgIGh1bWFuU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgICAgICAgICAgaHVtYW5QYXRyb2xib2F0ID0gc2hpcEZhY3RvcnkoJ1BhdHJvbEJvYXQnKTtcbiAgICAgICAgICAgIGFsbFNoaXBzID0gW2h1bWFuQ2FycmllciwgaHVtYW5CYXR0bGVzaGlwLCBodW1hbkRlc3Ryb3llciwgaHVtYW5TdWJtYXJpbmUsIGh1bWFuUGF0cm9sYm9hdF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb21wdXRlckdhbWVib2FyZCkge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJDYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVyQmF0dGxlc2hpcCA9IHNoaXBGYWN0b3J5KCdCYXR0bGVzaGlwJyk7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlckRlc3Ryb3llciA9IHNoaXBGYWN0b3J5KCdEZXN0cm95ZXInKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVyU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJQYXRyb2xib2F0ID0gc2hpcEZhY3RvcnkoJ1BhdHJvbEJvYXQnKTtcbiAgICAgICAgICAgIGFsbFNoaXBzID0gW2NvbXB1dGVyQ2FycmllciwgY29tcHV0ZXJCYXR0bGVzaGlwLCBjb21wdXRlckRlc3Ryb3llciwgY29tcHV0ZXJTdWJtYXJpbmUsIGNvbXB1dGVyUGF0cm9sYm9hdF07XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5odW1hblNoaXBzLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbnN0IGNvbHMgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onXTtcbiAgICAgICAgY29uc3QgcmFuZG9tQ29sID0gKCkgPT4gY29sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xzLmxlbmd0aCldO1xuICAgICAgICBjb25zdCByYW5kb21Sb3cgPSAoKSA9PiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByYW5kb21PcmllbnRhdGlvbiA9ICgpID0+IChNYXRoLnJhbmRvbSgpID4gMC41ID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJyk7XG4gICAgICAgIGFsbFNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGxldCBjb2wgPSByYW5kb21Db2woKTtcbiAgICAgICAgICAgIGxldCByb3cgPSByYW5kb21Sb3coKTtcbiAgICAgICAgICAgIGxldCBvcmllbnRhdGlvbiA9IHJhbmRvbU9yaWVudGF0aW9uKCk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZ2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXAuc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgIHdoaWxlICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29sID0gcmFuZG9tQ29sKCk7XG4gICAgICAgICAgICAgICAgcm93ID0gcmFuZG9tUm93KCk7XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24gPSByYW5kb21PcmllbnRhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwLnNpemUsIGNvbCwgcm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmh1bWFuU2hpcHMucHVzaChzaGlwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByYW5kb21pemVTaGlwc1BsYWNlbWVudCA9IChnYW1lYm9hcmROYW1lLCBnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgZ2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgcmFuZG9tUGxhY2VtZW50KGdhbWVib2FyZCk7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChnYW1lYm9hcmQpO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkTmFtZSA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZ2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcGlja0dhbWVNb2RlID0gKCkgPT4ge1xuICAgICAgICBpZiAodWkuY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgdWkucmVuZGVyQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgdWkucmVtb3ZlVGVtcEJvYXJkKCk7XG4gICAgICAgICAgICByYW5kb21pemVTaGlwc1BsYWNlbWVudCgnZmlyc3QnLCBodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICByYW5kb21pemVTaGlwc1BsYWNlbWVudCgnc2Vjb25kJywgY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgICAgICBjb21wdXRlclZzQ29tcHV0ZXJNb2RlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZW5kZXJCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIHVpLnJlbW92ZVRlbXBCb2FyZCgpO1xuICAgICAgICByYW5kb21pemVTaGlwc1BsYWNlbWVudCgnc2Vjb25kJywgY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgcGxheWVyVnNDb21wdXRlck1vZGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlc3RhcnQgPSAoKSA9PiB7XG4gICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIGh1bWFuLnNldFByZXZIaXQobnVsbCk7XG4gICAgICAgIGh1bWFuLnNldExhc3RIaXQobnVsbCk7XG4gICAgICAgIGNvbXB1dGVyLnNldFByZXZIaXQobnVsbCk7XG4gICAgICAgIGNvbXB1dGVyLnNldExhc3RIaXQobnVsbCk7XG4gICAgICAgIGh1bWFuR2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgICAgICB0ZW1wQm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICBwb3B1bGF0ZVRlbXBCb2FyZCgpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQodGVtcEJvYXJkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3RlbXAnLCB0ZW1wQm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICB1aS5kcmFnQW5kRHJvcChodW1hbkdhbWVib2FyZCwgdGVtcEJvYXJkLCBodW1hblNoaXBzKTtcbiAgICAgICAgdWkuY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHBpY2tHYW1lTW9kZSgpO1xuICAgIH07XG4gICAgY29uc3QgbmV3R2FtZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBpc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICByZXN0YXJ0KCk7XG4gICAgfSk7XG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgdWkucmVuZGVyQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZW5kZXJCb2FyZCh0ZW1wQm9hcmQpO1xuICAgICAgICBwb3B1bGF0ZVRlbXBCb2FyZCgpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQodGVtcEJvYXJkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3RlbXAnLCB0ZW1wQm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICB1aS5kcmFnQW5kRHJvcChodW1hbkdhbWVib2FyZCwgdGVtcEJvYXJkLCBodW1hblNoaXBzKTtcbiAgICAgICAgdWkuY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHBpY2tHYW1lTW9kZSgpO1xuICAgIH07XG4gICAgcmV0dXJuIHsgaW5pdCwgaHVtYW5HYW1lYm9hcmQsIGNvbXB1dGVyR2FtZWJvYXJkLCB0ZW1wQm9hcmQsIHJlc3RhcnQsIG5ld0dhbWUsIHN0YXJ0LCByYW5kb21pemVTaGlwc1BsYWNlbWVudCwgaHVtYW5TaGlwcyB9O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IGNvbnRyb2xsZXI7XG4iLCJpbXBvcnQgJ25vcm1hbGl6ZS5jc3MnO1xuaW1wb3J0ICcuL3N0eWxlL3N0eWxlLmNzcyc7XG5pbXBvcnQgY29udHJvbGxlciBmcm9tICcuL21vZHVsZXMvY29udHJvbGxlcic7XG5jb250cm9sbGVyLmluaXQoKTtcbiJdLCJuYW1lcyI6WyJjb2xzIiwicm93cyIsImFycmF5Iiwic2hpcHNQbGFjZWQiLCJnZXRDZWxsIiwiY29sIiwicm93IiwiY29sSW5kZXgiLCJpbmRleE9mIiwicm93SW5kZXgiLCJzZXRDZWxsIiwibmV3U3RhdHVzIiwibmV3VGFrZW5CeSIsInN0YXR1cyIsInRha2VuQnkiLCJpIiwiaiIsImdlbmVyYXRlQXJyYXkiLCJjbGVhckJvYXJkIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicmVtb3ZlU2hpcCIsInNoaXAiLCJnYW1lYm9hcmQiLCJmbGF0IiwiZm9yRWFjaCIsImNlbGwiLCJib2FyZElkIiwibmFtZSIsInNwbGljZSIsImh1bWFuR2FtZWJvYXJkIiwiY29tcHV0ZXJHYW1lYm9hcmQiLCJ0ZW1wQm9hcmQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImdldEF0dHJpYnV0ZSIsInRvTG93ZXJDYXNlIiwicmVtb3ZlIiwiYWRkIiwicmVtb3ZlQXR0cmlidXRlIiwicGxhY2VTaGlwIiwib3JpZW50YXRpb24iLCJpc1ZlcnRpY2FsIiwiaXNIb3Jpem9udGFsIiwiY2VsbHMiLCJzdGFydCIsInNoaXBDZWxscyIsInNpemUiLCJjdXJyZW50Q29sIiwiY3VycmVudFJvdyIsInB1c2giLCJyZWNlaXZlQXR0YWNrIiwiaGl0IiwicmVjZWl2ZUFyb3VuZCIsInJlc2VydmVTcGFjZSIsImZpbHRlciIsImMiLCJkaXJlY3Rpb24iLCJuZXdDb2wiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwibmV3Um93IiwiTnVtYmVyIiwidG9TdHJpbmciLCJoaXRCdXROb3RTdW5rIiwic29tZSIsImlzU3VuayIsInNpbmtTaGlwIiwiYWxsU3VuayIsInRha2VuQnlDZWxscyIsImV2ZXJ5IiwiY2FuQmVQbGFjZWQiLCJhcmVFbXB0eSIsIml0ZW0iLCJyZW1vdmVSZXNlcnZlZFNwYWNlIiwiaGl0Q291bnQiLCJyb3RhdGUiLCJ0aGlzIiwicHJldkhpdCIsImxhc3RIaXQiLCJyYW5nZSIsImdvUmlnaHQiLCJnb0Rvd24iLCJmaW5pc2hpbmdBdHRhY2siLCJjb25zb2xlIiwibG9nIiwic2V0UHJldkhpdCIsInNldExhc3RIaXQiLCJuZXdQcmV2SGl0IiwibmV3TGFzdEhpdCIsImF0dGFjayIsInJlc3VsdCIsInJhbmRvbUF0dGFjayIsInJhbmRvbUNvbCIsInJhbmRvbVJvdyIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsImNlaWwiLCJmb2xsb3d1cEF0dGFjayIsInZhbGlkRGlyZWN0aW9ucyIsInJhbmRvbURpcmVjdGlvbiIsImdldFByZXZIaXQiLCJnZXRMYXN0SGl0IiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJ2YWx1ZSIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwiZG9uZSIsInRoZW4iLCJhcHBseSIsInVpIiwid3JhcHBlciIsInF1ZXJ5U2VsZWN0b3IiLCJib2FyZHMiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJwcmVwZW5kIiwicFZjQnRuIiwibmV3R2FtZUJ0biIsImNWY0J0biIsInN0YXJ0QnRuIiwicmFuZG9tQnRuIiwiYWxsQnRucyIsInJlbmRlckNlbGxzIiwiYm9hcmQiLCJlbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY3JlYXRlQ2VsbCIsImFwcGVuZCIsInJlZnJlc2hCb2FyZCIsImlubmVySFRNTCIsImdldFVzZXJJbnB1dCIsInRhcmdldCIsImhhbmRsZUdhbWVNb2RlIiwic2VsZWN0ZWRFbGVtZW50IiwiZGVzZWxlY3RlZEVsZW1lbnQiLCJ3YWl0aW5nIiwiYnRuIiwiZGlzYWJsZWQiLCJ0ZXh0Q29udGVudCIsInNldFRpbWVvdXQiLCJyZXN0YXJ0IiwiYm9vbCIsImRvY3VtZW50RWxlbWVudCIsInRvZ2dsZSIsImNyZWF0ZVNoaXBPdmVybGF5IiwiZ2FtZWJvYXJkTmFtZSIsInNoaXBzIiwiZmlyc3RDZWxsIiwic2hpcEVsZW1lbnQiLCJzaGlwTmFtZSIsInNoaXBTaXplIiwic2V0U2hpcFN0eWxlIiwic3R5bGUiLCJ3aWR0aCIsImNlbGxTaXplIiwiaGVpZ2h0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImFwcGVuZENoaWxkIiwiY2FuQmVTdGFydGVkIiwiZHJhZ0FuZERyb3AiLCJmaXJzdEdhbWVib2FyZCIsInRlbXBHYW1lYm9hcmQiLCJzaGlwT2JqIiwiZ3JhYlBvaW50WCIsImdyYWJQb2ludFkiLCJoaWdobGlnaHRlZENlbGxzIiwic2hpcE5hbWVUb09iaiIsImNhcnJpZXIiLCJiYXR0bGVzaGlwIiwiZGVzdHJveWVyIiwic3VibWFyaW5lIiwicGF0cm9sYm9hdCIsImZpcnN0Qm9hcmRFbGVtZW50IiwidGVtcEJvYXJkRWxlbWVudCIsImZpcnN0Qm9hcmRDZWxscyIsInRlbXBCb2FyZENlbGxzIiwibm9uU2hpcENlbGxzIiwiZHJhZ2dhYmxlIiwiaGFuZGxlTW91c2Vkb3duIiwiaGFuZGxlTW91c2V1cCIsImhhbmRsZURyYWdTdGFydCIsImhhbmRsZURyYWdFbmQiLCJoYW5kbGVSb3RhdGUiLCJibG9ja1JpZ2h0Q2xpY2siLCJsYXN0RHJhZ2dlZCIsInRhcmdldFNoaXBOYW1lIiwidXBkYXRlZFNoaXBzUGxhY2VkRmlyc3QiLCJ1cGRhdGVkU2hpcHNQbGFjZWRUZW1wIiwiaHVtYW5TaGlwcyIsInZpc2liaWxpdHkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImNsb3Nlc3QiLCJoYW5kbGVEcmFnT3ZlciIsImluZGV4IiwicHJldmVudERlZmF1bHQiLCJzdGFydENlbGwiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsInRvSGlnaGxpZ2h0IiwiY2VsbEluZGV4IiwiaXNWYWxpZFBsYWNlbWVudCIsImdldExhc3RTaGlwU2l6ZUVsZW1lbnRzIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGlnaGxpZ2h0ZWRDZWxsIiwiaGFuZGxlRHJvcCIsImxhc3QiLCJkYXRhc2V0Iiwic2xpY2UiLCJtaW4iLCJ0ZW1wU2hpcCIsImN1cnJlbnQiLCJuZXdHYW1lIiwicmFuZG9taXplU2hpcHNQbGFjZW1lbnQiLCJyZW5kZXJCb2FyZCIsImhhbmRsZVVzZXJJbnB1dCIsInVzZXJJbnB1dCIsIm9uY2UiLCJzZXRCb2FyZFBvaW50ZXIiLCJ3aGljaCIsInNlY29uZCIsInJlbW92ZUJvYXJkUG9pbnRlciIsInJlbW92ZVRlbXBCb2FyZCIsImNvbnRyb2xsZXIiLCJodW1hbiIsInBsYXllciIsImNvbXB1dGVyIiwiaXNTdG9wcGVkIiwiaHVtYW5DYXJyaWVyIiwiaHVtYW5CYXR0bGVzaGlwIiwiaHVtYW5EZXN0cm95ZXIiLCJodW1hblN1Ym1hcmluZSIsImh1bWFuUGF0cm9sYm9hdCIsInBvcHVsYXRlVGVtcEJvYXJkIiwiaXNHYW1lT3ZlciIsImNvbXB1dGVyQUkiLCJhbGxTaGlwcyIsInJhbmRvbU9yaWVudGF0aW9uIiwicmFuZG9tUGxhY2VtZW50IiwicGlja0dhbWVNb2RlIiwiaXNQbGF5ZXJUdXJuIiwiaW5pdCJdLCJzb3VyY2VSb290IjoiIn0=