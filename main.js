(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),i=t.indexOf(s);return-1===o||-1===i?null:a[i][o]},o=(r,s,o,i)=>{const n=e.indexOf(r),l=t.indexOf(s);return-1===n||-1===l?null:(a[l][n].status=o,i&&(a[l][n].takenBy=i),a[l][n])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let s;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),r.forEach((e=>{null===e.takenBy&&r.splice(r.indexOf(e),1)})),t===l.humanGameboard?s="firstBoard":t===l.computerGameboard&&(s="secondBoard");document.querySelectorAll(`#${s} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,i,n,l)=>{a.isVertical="horizontal"!==l;const c="horizontal"===l,d=c?e:t,u=d.indexOf(c?i:n);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:i,r=c?n:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),h.push(s(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,i)=>{const n="horizontal"===i,l=n?e:t,c=l.indexOf(n?r:o);if(c<0||c+a>l.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=n?l[c+e]:r,a=n?o:l[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,s=!0,o=!0;const i=(e,t,c,d)=>{if(d.row===c)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(n(a),l({col:o,row:c})),r+=1):(r=1,s=!1,i(e,o,c,d))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(n(a),l({col:o,row:c})),r+=1):(r=1,s=!0,i(e,o,c,d))}else if(d.col===t)if(o){r=1;let s=(Number(c)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(n(a),l({col:t,row:s})),r+=1):(r=1,o=!1,i(e,t,s,d))}else{r=1;let s=(Number(c)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(n(a),l({col:t,row:s})),r+=1):(r=1,o=!0,i(e,t,s,d))}},n=e=>{t=e},l=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s&&(n(a),l({col:t,row:r})),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status&&(n(a),l({col:r,row:s})),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),i=e.getCell(r,o);return!(!i||"miss"===i.status||"hit"===i.status)}));if(o.length>0){const i=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+i.col),d=(Number(s)+i.row).toString();e.receiveAttack(c,d),r=1,"hit"===e.getCell(c,d).status&&(n(a),l({col:c,row:d}))}},finishingAttack:i,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:n,setLastHit:l}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function n(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,n)}l((r=r.apply(e,t||[])).next())}))};const s=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),o=document.querySelector("#newGame"),i=document.querySelector("#computerVsComputer"),n=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,o,i,n,c],u=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},h=e=>{let t;e===l.humanGameboard?t="firstBoard":e===l.computerGameboard&&(t="secondBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",u(e,a)},m=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},f=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&r(void 0,void 0,void 0,(function*(){p(!0),d.forEach((e=>e.disabled=!0)),a.textContent="Restarting...",yield new Promise((e=>setTimeout(e,1e3))),a.textContent="Player vs Computer",d.forEach((e=>e.disabled=!1)),p(!1),v(),w()})),e===i&&r(void 0,void 0,void 0,(function*(){p(!0),d.forEach((e=>e.disabled=!0)),i.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),i.textContent="Computer vs Computer",d.forEach((e=>e.disabled=!1)),p(!1),n.disabled=!0,c.disabled=!0})),l.restart())},p=e=>{document.documentElement.classList.toggle("wait",e)},g=(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${s}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const i=()=>{o?o&&(a.style.width=l/16+"rem",a.style.height=s*(l/16)+"rem"):(a.style.width=s*(l/16)+"rem",a.style.height=l/16+"rem")};let n,l=document.querySelector(".board .cell").getBoundingClientRect().width;i(),window.addEventListener("resize",(function(){l=document.querySelector(".board .cell").getBoundingClientRect().width,i()})),"first"===e?n="firstBoard":"second"===e&&(n="secondBoard");document.querySelector(`#${n} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},v=()=>5===l.humanGameboard.shipsPlaced.length&&0===l.computerGameboard.shipsPlaced.length?(n.disabled=!1,!0):(n.disabled=!0,!1),w=()=>{e.textContent="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!"},C=()=>{v()&&(e.textContent="You can now begin the game. Press start!")},S=(e,t,a)=>{let s,o,i,n,c=0,d=0,u=[];const m={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},f=document.querySelector("#firstBoard"),p=document.querySelector("#secondBoard"),w=f.querySelectorAll(".cell"),y=p.querySelectorAll(".cell"),B=[];for(let e of w)e.classList.contains("taken")||B.push(e);for(let e of y)e.classList.contains("taken")||B.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",b),e.addEventListener("mouseup",k),e.addEventListener("dragstart",P),e.addEventListener("dragend",G),e.addEventListener("contextmenu",x),B.forEach((e=>{e.addEventListener("contextmenu",V)}))}));let L=null;function b(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),o=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),o.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),h(e),h(t),g("first",e.shipsPlaced),g("second",t.shipsPlaced),S(e,t,l.humanShips)}function k(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),h(e),h(t),g("first",e.shipsPlaced),g("second",t.shipsPlaced),S(e,t,l.humanShips)}function P(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;r.style.visibility="hidden",this.classList.add("dragging"),s=r.getAttribute("data-name"),o=Number(r.getAttribute("data-size")),c=a.offsetX,d=a.offsetY,i=m[s],n=i.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&e.removeShip(i,e),"secondBoard"===r.closest(".board").id&&t.removeShip(i,t)}))}function A(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),i)){let t=e-(i.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<o;e++){let r=i.isVertical?t+10*e:t+e;w[r]&&(a.push(w[r]),u.push(w[r]))}z(a)&&(a.forEach((e=>{e.classList.add("highlight")})),L||(L=M(u,o)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),i)){let t=e-(i.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<o;e++){let r=i.isVertical?t+10*e:t+e;y[r]&&(a.push(y[r]),u.push(y[r]))}z(a)&&(a.forEach((e=>{e.classList.add("highlight")})),L||(L=M(u,o)))}}}function E(){u.forEach((e=>{e.classList.remove("highlight")})),u=[]}function H(a){u.forEach((e=>{e.classList.remove("highlight")}));const r=M(u,o),s=a.target;"firstBoard"===s.closest(".board").id&&i&&null!==L&&(e.canBePlaced(i.size,r[0].dataset.col,r[0].dataset.row,n)?(e.placeShip(i,r[0].dataset.col,r[0].dataset.row,n),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(i,L[0].dataset.col,L[0].dataset.row,n),e.reserveSpace(e,L[0].dataset.col,L[0].dataset.row))),"secondBoard"===s.closest(".board").id&&i&&null!==L&&(t.canBePlaced(i.size,r[0].dataset.col,r[0].dataset.row,n)?(t.placeShip(i,r[0].dataset.col,r[0].dataset.row,n),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(i,L[0].dataset.col,L[0].dataset.row,n),t.reserveSpace(t,L[0].dataset.col,L[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),h(e),h(t),g("first",e.shipsPlaced),g("second",t.shipsPlaced),S(e,t,l.humanShips),v(),C(),L=null}function G(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===u.length&&("firstBoard"===r.closest(".board").id?L&&e.canBePlaced(i.size,L[0].dataset.col,L[0].dataset.row,n)&&(e.placeShip(i,L[0].dataset.col,L[0].dataset.row,n),e.reserveSpace(e,L[0].dataset.col,L[0].dataset.row),h(e),h(t),g("first",e.shipsPlaced),g("second",t.shipsPlaced),S(e,t,l.humanShips)):"secondBoard"===r.closest(".board").id&&L&&t.canBePlaced(i.size,L[0].dataset.col,L[0].dataset.row,n)&&(t.placeShip(i,L[0].dataset.col,L[0].dataset.row,n),t.reserveSpace(t,L[0].dataset.col,L[0].dataset.row),h(e),h(t),g("first",e.shipsPlaced),g("second",t.shipsPlaced),S(e,t,l.humanShips)))}function z(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===o&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function M(e,t){return e.slice(Math.min(e.length-t,0))}function x(a){a.preventDefault();const r=a.target;let c;"firstBoard"===r.closest(".board").id&&(c=e),"secondBoard"===r.closest(".board").id&&(c=t),s=r.getAttribute("data-name"),o=Number(r.getAttribute("data-size")),i=m[s];const d=i,u=c.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===s));c.removeShip(i,c),c.removeReservedSpace(c),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),d.rotate(),n=d.isVertical?"vertical":"horizontal",c.canBePlaced(d.size,u[0].col,u[0].row,n)||(d.rotate(),n=d.isVertical?"vertical":"horizontal"),c.placeShip(d,u[0].col,u[0].row,n),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),h(c),g("first",e.shipsPlaced),g("second",t.shipsPlaced),S(e,t,l.humanShips)}function V(e){e.preventDefault()}w.forEach(((e,t)=>{e.addEventListener("dragover",A(t)),e.addEventListener("dragleave",E),e.addEventListener("drop",H)})),y.forEach(((e,t)=>{e.addEventListener("dragover",A(t)),e.addEventListener("dragleave",E),e.addEventListener("drop",H)}))};return a.addEventListener("click",(()=>{f(a,i);document.querySelector("#secondBoard").classList.remove("start")})),i.addEventListener("click",(()=>{f(i,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start")})),o.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){s.removeBoardPointer(),yield r(void 0,void 0,void 0,(function*(){p(!0),d.forEach((e=>e.disabled=!0)),o.textContent="Restarting...",yield l.newGame(),o.textContent="New Game",d.forEach((e=>e.disabled=!1)),p(!1),v(),w()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&e.classList.remove("start"),i.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0)})))),n.addEventListener("click",(()=>{l.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),n.disabled=!0,c.disabled=!0})),c.addEventListener("click",(()=>{l.computerGameboard.clearBoard(),h(l.computerGameboard),l.randomizeShipsPlacement("first",l.humanGameboard),S(l.humanGameboard,l.computerGameboard,l.humanShips),v(),C()})),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===l.humanGameboard?a.id="firstBoard":e===l.computerGameboard&&(a.id="secondBoard"),u(e,a),t.append(a)},refreshBoard:h,handleUserInput:()=>r(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(m(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:i,waiting:p,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:g,dragAndDrop:S,canBeStarted:v,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")}}})(),o=s;var i=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{l(r.next(e))}catch(e){o(e)}}function n(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,n)}l((r=r.apply(e,t||[])).next())}))};const n=(()=>{const r=e(),s=e(),l=a(),c=a();let d=!0,u=1e3,h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),p=t("Submarine"),g=t("PatrolBoat");const v=[h,m,f,p,g],w=()=>{s.placeShip(h,"A","1","horizontal"),s.placeShip(m,"A","3","horizontal"),s.placeShip(f,"A","5","horizontal"),s.placeShip(p,"A","7","horizontal"),s.placeShip(g,"A","9","horizontal"),s.reserveSpace(s,"A","1"),s.reserveSpace(s,"A","3"),s.reserveSpace(s,"A","5"),s.reserveSpace(s,"A","7"),s.reserveSpace(s,"A","9")},C=()=>s.allSunk(s)?(o.removeBoardPointer(),o.pVcBtn.classList.contains("selected")&&o.setGameOverMessagePvC("player"),o.cVcBtn.classList.contains("selected")&&o.setGameOverMessageCvC("player"),!0):!!r.allSunk(r)&&(o.removeBoardPointer(),o.pVcBtn.classList.contains("selected")&&o.setGameOverMessagePvC("computer"),o.cVcBtn.classList.contains("selected")&&o.setGameOverMessageCvC("computer"),!0),S=e=>{let t;if(e===r?t=c:e===s&&(t=l),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),C())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),C()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),C()))return}},y=(e,a)=>{a.clearBoard(),(e=>{let a;e===r?(h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),p=t("Submarine"),g=t("PatrolBoat"),a=[h,m,f,p,g]):e===s&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);n.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],i=()=>o[Math.floor(Math.random()*o.length)],l=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=i(),r=l(),s=c(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=i(),r=l(),s=c(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),n.humanShips.push(t)}))})(a),o.refreshBoard(a),"first"===e&&o.createShipOverlay("first",a.shipsPlaced)},B=()=>{o.cVcBtn.classList.contains("selected")&&(y("first",r),y("second",s),d=!1,i(void 0,void 0,void 0,(function*(){o.removeBoardPointer();let e=!0;for(;!C()&&!d;){if(o.waiting(!0),e){if(o.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,u))),!o.cVcBtn.classList.contains("selected")||d)break;S(r),o.refreshBoard(r),e=!1}if(C()||d)break;if(!e){if(o.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,u))),!o.cVcBtn.classList.contains("selected")||d)break;S(s),o.refreshBoard(s),e=!0}}d=!1,o.waiting(!1)})),o.refreshBoard(r))},L=()=>{d=!0,l.setPrevHit(null),l.setLastHit(null),c.setPrevHit(null),c.setLastHit(null),r.clearBoard(),s.clearBoard(),w(),o.refreshBoard(r),o.refreshBoard(s),o.createShipOverlay("second",s.shipsPlaced),o.dragAndDrop(r,s,v),o.canBeStarted(),B()};return{init:()=>{o.renderBoard(r),o.renderBoard(s),w(),o.refreshBoard(s),o.createShipOverlay("second",s.shipsPlaced),o.dragAndDrop(r,s,v),o.canBeStarted(),B()},humanGameboard:r,computerGameboard:s,restart:L,newGame:()=>i(void 0,void 0,void 0,(function*(){d=!0,yield new Promise((e=>setTimeout(e,u))),d=!1,L()})),start:()=>{o.refreshBoard(r),y("second",s),d=!1,i(void 0,void 0,void 0,(function*(){let e=!0;for(;!C()&&!d;){if(e){o.setTurnMessagePvC(e),o.setBoardPointer("player"),o.waiting(!1);const{col:t,row:a}=yield o.handleUserInput();l.attack(s,t,a),s.sinkShip(s,t,a),o.refreshBoard(s),e=!1}if(C()||d)break;if(!e){if(o.setTurnMessagePvC(e),o.setBoardPointer("computer"),o.waiting(!0),yield new Promise((e=>setTimeout(e,u))),!o.pVcBtn.classList.contains("selected")||d)break;S(r),o.refreshBoard(r),e=!0}}d=!1,o.waiting(!1)}))},randomizeShipsPlacement:y,humanShips:v}})(),l=n;l.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,