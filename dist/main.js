(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),n=t.indexOf(s);return-1===o||-1===n?null:a[n][o]},o=(r,s,o,n)=>{const l=e.indexOf(r),i=t.indexOf(s);return-1===l||-1===i?null:(a[i][l].status=o,n&&(a[i][l].takenBy=n),a[i][l])};return{generateArray:()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}},clearBoard:()=>{a.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const a=r.indexOf(t);null===t.takenBy&&-1!==a&&r.splice(a,1)}))},placeShip:(a,n,l,i)=>{const c="horizontal"===i,d=c?e:t,u=d.indexOf(c?n:l);a.isVertical="horizontal"!==i;let m=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:n,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),m.push(s(t,r))}return r.push(m[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},reserveSpaceForAll:function(e){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),canBeSunk:e=>e&&e.takenBy&&e.takenBy.isSunk(),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,n)=>{const l="horizontal"===n,i=l?e:t,c=i.indexOf(l?r:o);if(c<0||c+a>i.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?i[c+e]:r,a=l?o:i[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}};let a;if(function(){const e=navigator.userAgent,t=/^((?!chrome|android).)*safari/i.test(e),a=/iPad|iPhone|iPod/.test(e)||e.includes("Mac")&&"ontouchend"in document;return t||a}()){const e=new AudioContext;a=(()=>{const t={},a=e.createGain();a.connect(e.destination);const r=(a,r)=>{const s=new XMLHttpRequest;s.open("GET",a,!0),s.responseType="arraybuffer",s.onload=()=>{e.decodeAudioData(s.response,(e=>{t[r]=e}),(e=>{console.error("Error with decoding audio data",e)}))},s.send()},s={},o=r=>{if(s[r]&&(s[r].stop(),s[r].onended=()=>{},s[r]=null),t[r]){const o=e.createBufferSource();o.buffer=t[r],o.connect(a),s[r]=o,o.onended=()=>{s[r]=null},o.start(0)}else console.error("Sound not found:",r)},n=e=>{a.gain.value=e?0:1};return r("sounds/gray1wea.wav","miss"),r("sounds/explo.wav","hit"),r("sounds/explodea.wav","sunk"),r("sounds/capture.wav","gameOver"),r("sounds/barr1sel.wav","drop"),r("sounds/drain.wav","rotate"),r("sounds/exp1sel.wav","random"),r("sounds/msg.wav","select"),r("sounds/beep.wav","tick"),r("sounds/buttonRev.wav","grab"),{play:o,muteAll:n}})(),document.addEventListener("touchstart",(()=>{e.resume().then((()=>{console.log("Playback resumed successfully")})).catch((e=>{console.error("Playback resume failed",e)}))}))}else a=(()=>{const e=e=>{Object.keys(e).forEach((t=>{const a=e[t].play;e[t].play=function(){return e[t].currentTime>0&&(e[t].pause(),e[t].currentTime=0),a.call(this)}}))};return(()=>{const t={miss:new Audio("sounds/gray1wea.wav"),hit:new Audio("sounds/explo.wav"),sunk:new Audio("sounds/explodea.wav"),gameOver:new Audio("sounds/capture.wav"),drop:new Audio("sounds/barr1sel.wav"),rotate:new Audio("sounds/drain.wav"),random:new Audio("sounds/exp1sel.wav"),select:new Audio("sounds/msg.wav"),tick:new Audio("sounds/beep.wav"),grab:new Audio("sounds/buttonRev.wav")};return e(t),Object.assign(Object.assign({},t),{play:function(e){this[e]&&this[e].play&&this[e].play()}})})()})();const r=a,s=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null,s=1,o=!0,n=!0;const l=(e,t,d,u)=>{if(u.row===d)if(o){s=1;let n=String.fromCharCode(t.charCodeAt(0)+s);for(;e.getCell(n,d)&&"hit"===e.getCell(n,d).status;)s+=1,n=String.fromCharCode(t.charCodeAt(0)+s);e.getCell(n,d)&&"hit"!==e.getCell(n,d).status&&"miss"!==e.getCell(n,d).status?(e.receiveAttack(n,d),"hit"===e.getCell(n,d).status?(i(a),c({col:n,row:d}),r.play("hit")):"miss"===e.getCell(n,d).status&&r.play("miss"),s+=1):(s=1,o=!1,l(e,n,d,u))}else{s=1;let n=String.fromCharCode(t.charCodeAt(0)-s);for(;e.getCell(n,d)&&"hit"===e.getCell(n,d).status;)s+=1,n=String.fromCharCode(t.charCodeAt(0)-s);e.getCell(n,d)&&"hit"!==e.getCell(n,d).status&&"miss"!==e.getCell(n,d).status?(e.receiveAttack(n,d),"hit"===e.getCell(n,d).status?(i(a),c({col:n,row:d}),r.play("hit")):"miss"===e.getCell(n,d).status&&r.play("miss"),s+=1):(s=1,o=!0,l(e,n,d,u))}else if(u.col===t)if(n){s=1;let o=(Number(d)+s).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)s+=1,o=(Number(d)+s).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status?(i(a),c({col:t,row:o}),r.play("hit")):"miss"===e.getCell(t,o).status&&r.play("miss"),s+=1):(s=1,n=!1,l(e,t,o,u))}else{s=1;let o=(Number(d)-s).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)s+=1,o=(Number(d)-s).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status?(i(a),c({col:t,row:o}),r.play("hit")):"miss"===e.getCell(t,o).status&&r.play("miss"),s+=1):(s=1,n=!0,l(e,t,o,u))}},i=e=>{t=e},c=e=>{a=e};return{attack:(e,t,s)=>{if("hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status){let o=e.receiveAttack(t,s);return"hit"===o?(i(a),c({col:t,row:s}),r.play("hit")):"miss"===o&&r.play("miss"),o}return"already shot"},randomAttack:t=>{let s,o;do{s=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(s,o).status||"miss"===t.getCell(s,o).status);if("hit"!==t.getCell(s,o).status&&"miss"!==t.getCell(s,o).status){const e=t.receiveAttack(s,o);return"hit"===t.getCell(s,o).status?(i(a),c({col:s,row:o}),r.play("hit")):"miss"===t.getCell(s,o).status&&r.play("miss"),{result:e,col:s,row:o}}return{result:"already shot",col:s,row:o}},followupAttack:(e,t,o)=>{const n=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),s=(Number(o)+a.row).toString(),n=e.getCell(r,s);return!(!n||"miss"===n.status||"hit"===n.status)}));if(n.length>0){const l=n[Math.floor(Math.random()*n.length)],d=String.fromCharCode(t.charCodeAt(0)+l.col),u=(Number(o)+l.row).toString();e.receiveAttack(d,u),s=1,"hit"===e.getCell(d,u).status?(i(a),c({col:d,row:u}),r.play("hit")):"miss"===e.getCell(d,u).status&&r.play("miss")}},finishingAttack:l,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:c}};var o=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const n=(e,t,a)=>{const s=document.querySelector("#firstBoard"),n=document.querySelector("#secondBoard"),l=s.querySelectorAll(".cell"),i=n.querySelectorAll(".cell");let d,m,h,f,p=0,v=0,g=[];const y={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]};let w=null;const S=document.querySelectorAll(".draggable");function C(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const b=[...C(l),...C(i)];function B(e,t){return e.slice(Math.min(e.length-t,0))}function k(a){const r=a.target;let s;const o=r.closest(".board").id;return"firstBoard"===o&&(s=e),"secondBoard"===o&&(s=t),{target:r,gameboard:s}}function L(e,t){return d=t.getAttribute("data-name"),m=Number(t.getAttribute("data-size")),p=e.offsetX,v=e.offsetY,h=y[d],f=h.isVertical?"vertical":"horizontal",{shipName:d,shipObj:h}}function A(){g.forEach((e=>e.classList.remove("highlight")))}function P(e){return"firstBoard"===e||"secondBoard"===e}function E(e){const{gameboard:t}=k(e);t.removeReservedSpace(t),function(e,t){const{target:a}=k(t),r=a.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))}(t,e),u.renew(),c.setInitMessage(),0===e.button&&r.play("grab")}function x(e){return o(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const{target:t,gameboard:a}=k(e);t.style.visibility="hidden",L(e,t),a.removeShip(h,a),c.clearShip(h,a)}))}function M(e){return function(t){const{target:a}=k(t),r=a.closest(".board").id;if(P(r)&&(t.preventDefault(),h)){const a=function(e,t,a){const{target:r}=k(a);return e-(t.isVertical?10*Math.floor(v/r.offsetHeight):Math.floor(p/r.offsetWidth))}(e,h,t),s=function(e){return"firstBoard"===e?l:i}(r),o=[];!function(e,t,a,r){for(let s=0;s<m;s++){let o=e.isVertical?t+10*s:t+s;a[o]&&(r.push(a[o]),g.push(a[o]))}}(h,a,s,o),function(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===m&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}(o)&&(!function(e){e.forEach((e=>{e.classList.add("highlight")}))}(o),w||(w=B(g,m)))}}}function q(){A(),g.length=0}function O(e){A();const t=B(g,m),{target:a,gameboard:s}=k(e);P(a.closest(".board").id)&&h&&null!==w&&function(e,t,a,r){e.canBePlaced(t.size,a[0].dataset.col,a[0].dataset.row,r)?(e.placeShip(t,a[0].dataset.col,a[0].dataset.row,r),e.reserveSpace(e,a[0].dataset.col,a[0].dataset.row)):(e.placeShip(t,w[0].dataset.col,w[0].dataset.row,r),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row))}(s,h,t,f),s.removeReservedSpace(s),s.reserveSpaceForAll(s),u.renew(),c.canBeStarted(),c.setStartMessage(),w=null,r.play("drop")}function z(a){const r=a.target;r.style.visibility="visible",function(a,r){if(0===g.length){const s=a.closest(".board");if(s){let{gameboard:a}=k(r);"firstBoard"===s.id?a=e:"secondBoard"===s.id&&(a=t),a&&w&&a.canBePlaced(h.size,w[0].dataset.col,w[0].dataset.row,f)&&(a.placeShip(h,w[0].dataset.col,w[0].dataset.row,f),a.reserveSpace(a,w[0].dataset.col,w[0].dataset.row),u.renew())}}}(r,a),c.canBeStarted()&&c.fillCells("second"),c.setStartMessage()}function G(e){const{gameboard:t}=k(e);t.reserveSpaceForAll(t),u.renew(),c.setStartMessage()}function V(e){e.preventDefault();const{target:t,gameboard:a}=k(e),{shipName:s,shipObj:o}=L(e,t),n=a.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===s));a.removeShip(o,a),a.removeReservedSpace(a),a.reserveSpaceForAll(a),o.rotate(),f=o.isVertical?"vertical":"horizontal",a.canBePlaced(o.size,n[0].col,n[0].row,f)||(o.rotate(),f=o.isVertical?"vertical":"horizontal"),a.placeShip(o,n[0].col,n[0].row,f),a.reserveSpaceForAll(a),u.renew(),c.canBeStarted()&&c.fillCells("second"),r.play("rotate")}function H(e){e.preventDefault()}function N(e){e.forEach(((e,t)=>{e.addEventListener("dragover",M(t)),e.addEventListener("dragleave",q),e.addEventListener("drop",O)}))}N(l),N(i),S.forEach((e=>{e.addEventListener("mousedown",E),e.addEventListener("dragstart",x),e.addEventListener("dragend",z),e.addEventListener("mouseup",G),e.addEventListener("contextmenu",V),b.forEach((e=>e.addEventListener("contextmenu",H)))}))};var l=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const i=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),s=document.querySelector("#newGame"),o=document.querySelector("#computerVsComputer"),i=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,s,o,i,c],m=document.getElementsByName("speed");let h=1e3;const f=document.querySelector("#mute");let p=!1;const v=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},g=e=>e===u.humanGameboard?"firstBoard":e===u.computerGameboard?"secondBoard":void 0,y=e=>{const t=document.querySelector(`#${g(e)}`);t.innerHTML="",v(e,t)},w=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},S=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&l(void 0,void 0,void 0,(function*(){E("first"),C(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,M()))),d.forEach((e=>e.disabled=!1)),C(!1),k(),L()})),e===o&&l(void 0,void 0,void 0,(function*(){C(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,M()))),d.forEach((e=>e.disabled=!1)),C(!1),i.disabled=!0,c.disabled=!0,o.disabled=!0})),u.restart(),P())},C=e=>{document.documentElement.classList.toggle("wait",e)},b=()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},B=(e,t,a,r)=>{const s=document.querySelector("html"),o=parseFloat(window.getComputedStyle(s,null).getPropertyValue("font-size"));r?(e.style.width=a/o+"rem",e.style.height=t*(a/o)+"rem"):(e.style.width=t*(a/o)+"rem",e.style.height=a/o+"rem")},k=()=>5===u.humanGameboard.shipsPlaced.length&&0===u.computerGameboard.shipsPlaced.length?(E("second"),i.disabled=!1,!0):(i.disabled=!0,!1),L=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},A=()=>{k()&&(e.textContent="You can now begin the game. Press start!")},P=()=>{e.textContent="Restarting..."},E=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},x=e=>l(void 0,void 0,void 0,(function*(){let t;C(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,s)=>{setTimeout((()=>{t.classList.remove("filled"),s===a.length-1&&e(),(s+1)%6==0&&r.play("tick")}),M()/120*s)}))})),C(!1)}));a.addEventListener("click",(()=>{E("first"),S(a,o);document.querySelector("#secondBoard").classList.remove("start"),i.disabled=!0,a.disabled=!0,r.play("select"),x("first")})),o.addEventListener("click",(()=>{E("first"),E("second"),S(o,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,o.disabled=!0,r.play("select"),Promise.all([x("first"),x("second")])})),s.addEventListener("click",(()=>l(void 0,void 0,void 0,(function*(){b(),E("first"),o.classList.contains("selected")&&(E("second"),i.disabled=!0,c.disabled=!0,o.disabled=!0),r.play("select"),yield l(void 0,void 0,void 0,(function*(){P(),C(!0),d.forEach((e=>e.disabled=!0)),yield u.newGame(),d.forEach((e=>e.disabled=!1)),C(!1),k(),a.classList.contains("selected")&&L()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),x("first"),i.disabled=!0,a.disabled=!0),o.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([x("first"),x("second")]),i.disabled=!0,c.disabled=!0,o.disabled=!0)})))),i.addEventListener("click",(()=>{u.start();const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,x("second")})),c.addEventListener("click",(()=>{u.computerGameboard.clearBoard(),y(u.computerGameboard),u.randomizeShipsPlacement(u.humanGameboard),n(u.humanGameboard,u.computerGameboard,u.humanShips),k(),A(),E("second"),r.play("random")}));const M=()=>h;return m.forEach((e=>{e.addEventListener("click",(e=>{(e=>{let t=e.target;t.checked&&(h=Number(t.value))})(e),r.play("select")}))})),f.addEventListener("click",(()=>{const e=document.querySelector("#speaker");if(p){f.classList.remove("muted"),e.classList.remove("fa-volume-xmark"),e.classList.add("fa-volume-high");for(let e of Object.values(r))r.muteAll(!1)}else{f.classList.add("muted"),e.classList.remove("fa-volume-high"),e.classList.add("fa-volume-xmark");for(let e of Object.values(r))r.muteAll(!0)}p=!p,r.play("select")})),window.addEventListener("resize",L),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),a.id=g(e),v(e,a),t.append(a)},clearShip:(e,t)=>{document.querySelectorAll(`#${g(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:y,handleUserInput:()=>l(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(w(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:o,waiting:C,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:b,createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const a=(e=>{const t=document.createElement("div"),a=e.takenBy.name.toLowerCase(),r=e.takenBy.size;return t.classList.add("ship",a,"draggable"),t.setAttribute("data-size",`${r}`),t.setAttribute("data-name",`${a}`),t.setAttribute("draggable","true"),t})(t),r=document.querySelector(".board .cell").getBoundingClientRect().width,s=t.takenBy.size,o=t.takenBy.isVertical;document.querySelector(`#${g(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a),B(a,s,r,o),window.addEventListener("resize",(()=>((e,t,a)=>{const r=document.querySelector(".board .cell").getBoundingClientRect().width;B(e,t,r,a)})(a,s,o)))}))},canBeStarted:k,setInitMessage:L,setStartMessage:A,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:P,getSpeedValue:M,fillCells:E,unFillCells:x}})(),c=i;var d=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const u=(()=>{const a=e(),o=e(),l=s(),i=s();let u,m,h,f,p,v=!0,g=[u,m,h,f,p];const y=()=>{u=t("Carrier"),m=t("Battleship"),h=t("Destroyer"),f=t("Submarine"),p=t("PatrolBoat"),g=[u,m,h,f,p],o.placeShip(u,"A","1","horizontal"),o.placeShip(m,"A","3","horizontal"),o.placeShip(h,"A","5","horizontal"),o.placeShip(f,"A","7","horizontal"),o.placeShip(p,"A","9","horizontal"),o.reserveSpaceForAll(o)},w=e=>(c.removeBoardPointer(),c.pVcBtn.classList.contains("selected")&&c.setGameOverMessagePvC(e),c.cVcBtn.classList.contains("selected")&&c.setGameOverMessageCvC(e),r.play("gameOver"),!0),S=()=>o.allSunk(o)?w("player"):!!a.allSunk(a)&&w("computer"),C=e=>{let t;if(e===a?t=i:e===o&&(t=l),e.hitButNotSunk(e)){const a=t.getLastHit(),s=t.getPrevHit(),o=e.getCell(a.col,a.row),n=o.takenBy.hitCount;if(null!==s&&null!==a&&n>=2&&n<=4?t.finishingAttack(e,a.col,a.row,s):1===n&&t.followupAttack(e,a.col,a.row),e.canBeSunk(o)&&(e.sinkShip(e,a.col,a.row),r.play("sunk")),S())return}else{const{col:a,row:s}=t.randomAttack(e),o=e.getCell(a,s);if("hit"===o.status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:s}),e.canBeSunk(o)&&(e.sinkShip(e,a,s),r.play("sunk"),t.setPrevHit(null),t.setLastHit(null),S())))return}},b=(e,t)=>d(void 0,void 0,void 0,(function*(){c.waiting(!0),c.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,c.getSpeedValue()))),c.cVcBtn.classList.contains("selected")&&!v&&(C(t),c.refreshBoard(t))})),B=e=>{e.clearBoard(),(e=>{let r;e===a?(u=t("Carrier"),m=t("Battleship"),h=t("Destroyer"),f=t("Submarine"),p=t("PatrolBoat"),r=[u,m,h,f,p]):e===o&&(r=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);g.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],n=()=>s[Math.floor(Math.random()*s.length)],l=()=>Math.ceil(10*Math.random()).toString(),i=()=>Math.random()>.5?"horizontal":"vertical";r.forEach((t=>{let a=n(),r=l(),s=i(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=n(),r=l(),s=i(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),g.push(t)}))})(e),c.refreshBoard(e),e===a&&c.createShipOverlay(e)},k=()=>{c.cVcBtn.classList.contains("selected")&&(B(a),B(o),v=!1,d(void 0,void 0,void 0,(function*(){c.removeBoardPointer();let e=!0;for(;!S()&&!v;)yield b(e,e?a:o),e=!e;v=!1,c.waiting(!1)})),c.refreshBoard(a))},L=()=>{v=!0,l.setPrevHit(null),l.setLastHit(null),i.setPrevHit(null),i.setLastHit(null),a.clearBoard(),o.clearBoard(),y(),c.refreshBoard(a),c.refreshBoard(o),c.createShipOverlay(o),n(a,o,g),c.canBeStarted(),k()};return{init:()=>{c.setInitMessage(),a.generateArray(),o.generateArray(),c.renderBoard(a),c.renderBoard(o),y(),c.refreshBoard(o),c.createShipOverlay(o),n(a,o,g),c.canBeStarted(),k(),c.pVcBtn.disabled=!0},renew:()=>{c.refreshBoard(a),c.refreshBoard(o),c.createShipOverlay(a),c.createShipOverlay(o),n(a,o,g)},humanGameboard:a,computerGameboard:o,restart:L,newGame:()=>d(void 0,void 0,void 0,(function*(){v=!0,yield new Promise((e=>setTimeout(e,c.getSpeedValue()))),v=!1,L()})),start:()=>{c.refreshBoard(a),B(o),v=!1,d(void 0,void 0,void 0,(function*(){let e=!0;for(;!(S()||v||(e&&(yield d(void 0,void 0,void 0,(function*(){c.setTurnMessagePvC(!0),c.setBoardPointer("player"),c.waiting(!1);const{col:e,row:t}=yield c.handleUserInput();l.attack(o,e,t);const a=o.getCell(e,t);o.canBeSunk(a)&&(o.sinkShip(o,e,t),r.play("sunk")),c.refreshBoard(o)})),e=!1),S()||v));)e||(yield d(void 0,void 0,void 0,(function*(){c.setTurnMessagePvC(!1),c.setBoardPointer("computer"),c.waiting(!0),yield new Promise((e=>setTimeout(e,c.getSpeedValue()))),c.pVcBtn.classList.contains("selected")&&!v&&(C(a),c.refreshBoard(a))})),e=!0);v=!1,c.waiting(!1)}))},randomizeShipsPlacement:B,humanShips:g}})();u.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixHQUNYLEVBQUdFLGFBQWFGLEdBQ3BCLElBYVk4RCxHQUFlLEdBR3ZCYSxHQUFZLEVBQ1osRUFBR25FLFNBQVEsRUFDZixHQW1GMEIsRUFzQ3dEK0IsMEJBQXlCQyxhQUM5RyxFQXJRa0IsR0NabkIsRUFBVzhDLE0iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvZ2FtZWJvYXJkLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9zaGlwLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9zb3VuZHMudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL3BsYXllci50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvZHJhZ0FuZERyb3AudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL3VpLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9jb250cm9sbGVyLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZ2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBjb2xzID0gWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJ107XG4gICAgY29uc3Qgcm93cyA9IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnMTAnXTtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGNvbnN0IHNoaXBzUGxhY2VkID0gW107XG4gICAgY29uc3QgZ2VuZXJhdGVBcnJheSA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV1bal0gPSB7IGNvbDogY29sc1tqXSwgcm93OiByb3dzW2ldLCBzdGF0dXM6ICdlbXB0eScsIHRha2VuQnk6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgY2xlYXJCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgYXJyYXkuZmxhdCgpLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwuc3RhdHVzID0gJ2VtcHR5JztcbiAgICAgICAgICAgIGNlbGwudGFrZW5CeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfSk7XG4gICAgICAgIHNoaXBzUGxhY2VkLmxlbmd0aCA9IDA7XG4gICAgfTtcbiAgICBjb25zdCBnZXRDZWxsID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4ID0gY29scy5pbmRleE9mKGNvbCk7XG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcm93cy5pbmRleE9mKHJvdyk7XG4gICAgICAgIGlmIChjb2xJbmRleCA9PT0gLTEgfHwgcm93SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlbcm93SW5kZXhdW2NvbEluZGV4XTtcbiAgICB9O1xuICAgIGNvbnN0IHNldENlbGwgPSAoY29sLCByb3csIG5ld1N0YXR1cywgbmV3VGFrZW5CeSkgPT4ge1xuICAgICAgICBjb25zdCBjb2xJbmRleCA9IGNvbHMuaW5kZXhPZihjb2wpO1xuICAgICAgICBjb25zdCByb3dJbmRleCA9IHJvd3MuaW5kZXhPZihyb3cpO1xuICAgICAgICBpZiAoY29sSW5kZXggPT09IC0xIHx8IHJvd0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlbcm93SW5kZXhdW2NvbEluZGV4XS5zdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgIGlmIChuZXdUYWtlbkJ5KSB7XG4gICAgICAgICAgICBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdLnRha2VuQnkgPSBuZXdUYWtlbkJ5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdO1xuICAgIH07XG4gICAgY29uc3QgcmVtb3ZlU2hpcCA9IChzaGlwLCBnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgY29uc3QgZ2FtZWJvYXJkQ2VsbHMgPSBnYW1lYm9hcmQuYXJyYXkuZmxhdCgpO1xuICAgICAgICBnYW1lYm9hcmRDZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICd0YWtlbicgJiYgY2VsbC50YWtlbkJ5Lm5hbWUgPT09IHNoaXAubmFtZSkge1xuICAgICAgICAgICAgICAgIGNlbGwuc3RhdHVzID0gJ2VtcHR5JztcbiAgICAgICAgICAgICAgICBjZWxsLnRha2VuQnkgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgc2hpcEluZGV4ID0gc2hpcHNQbGFjZWQuaW5kZXhPZihjZWxsKTtcbiAgICAgICAgICAgIGlmIChjZWxsLnRha2VuQnkgPT09IG51bGwgJiYgc2hpcEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHNoaXBzUGxhY2VkLnNwbGljZShzaGlwSW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pID0+IHtcbiAgICAgICAgY29uc3QgaXNIb3Jpem9udGFsID0gb3JpZW50YXRpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgICAgY29uc3QgY2VsbHMgPSBpc0hvcml6b250YWwgPyBjb2xzIDogcm93cztcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBjZWxscy5pbmRleE9mKGlzSG9yaXpvbnRhbCA/IGNvbCA6IHJvdyk7XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgICBzaGlwLmlzVmVydGljYWwgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNoaXBDZWxscyA9IFtdO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2hpcC5zaXplID4gY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLnNpemU7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbCA9IGlzSG9yaXpvbnRhbCA/IGNlbGxzW3N0YXJ0ICsgaV0gOiBjb2w7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gaXNIb3Jpem9udGFsID8gcm93IDogY2VsbHNbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIGlmIChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyAhPT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENlbGwoY3VycmVudENvbCwgY3VycmVudFJvdywgJ3Rha2VuJywgc2hpcCk7XG4gICAgICAgICAgICBzaGlwQ2VsbHMucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpKTtcbiAgICAgICAgfVxuICAgICAgICBzaGlwc1BsYWNlZC5wdXNoKHNoaXBDZWxsc1swXSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgY2FuQmVQbGFjZWQgPSAoc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gaXNIb3Jpem9udGFsID8gY29scyA6IHJvd3M7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gY2VsbHMuaW5kZXhPZihpc0hvcml6b250YWwgPyBjb2wgOiByb3cpO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2l6ZSA+IGNlbGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZUVtcHR5ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sID0gaXNIb3Jpem9udGFsID8gY2VsbHNbc3RhcnQgKyBpXSA6IGNvbDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSBpc0hvcml6b250YWwgPyByb3cgOiBjZWxsc1tzdGFydCArIGldO1xuICAgICAgICAgICAgYXJlRW1wdHkucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyA9PT0gJ2VtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZUVtcHR5LmV2ZXJ5KChpdGVtKSA9PiBpdGVtID09PSB0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdldENlbGwoY29sLCByb3cpO1xuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICd0YWtlbicpIHtcbiAgICAgICAgICAgIGNlbGwudGFrZW5CeS5oaXQoKTtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdoaXQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICdlbXB0eScgfHwgY2VsbC5zdGF0dXMgPT09ICdyZXNlcnZlZCcpIHtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdtaXNzJyk7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZWNlaXZlQXJvdW5kID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAnZW1wdHknKSB7XG4gICAgICAgICAgICBzZXRDZWxsKGNvbCwgcm93LCAncmVzZXJ2ZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2VydmVTcGFjZSA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwudGFrZW5CeSkge1xuICAgICAgICAgICAgY29uc3QgZ2FtZWJvYXJkQ2VsbHMgPSBnYW1lYm9hcmQuYXJyYXkuZmxhdCgpO1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkQ2VsbHMuZmlsdGVyKChjKSA9PiBjLnRha2VuQnkgJiYgYy50YWtlbkJ5Lm5hbWUgPT09IGNlbGwudGFrZW5CeS5uYW1lKTtcbiAgICAgICAgICAgIHNoaXBDZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IFtcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IDAsIHJvdzogLTEgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IDAsIHJvdzogMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogLTEsIHJvdzogMCB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogLTEsIHJvdzogMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMSwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goKGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNlbGwuY29sLmNoYXJDb2RlQXQoMCkgKyBkaXJlY3Rpb24uY29sKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihjZWxsLnJvdykgKyBkaXJlY3Rpb24ucm93KS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCBuZXdSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUFyb3VuZChuZXdDb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiByZXNlcnZlU3BhY2VGb3JBbGwoZ2FtZWJvYXJkKSB7XG4gICAgICAgIGdhbWVib2FyZC5zaGlwc1BsYWNlZC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGdhbWVib2FyZCwgc2hpcC5jb2wsIHNoaXAucm93KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHJlbW92ZVJlc2VydmVkU3BhY2UgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgZ2FtZWJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAncmVzZXJ2ZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2VsbChjZWxsLmNvbCwgY2VsbC5yb3csICdlbXB0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbkJlU3VuayA9IChjZWxsKSA9PiB7XG4gICAgICAgIHJldHVybiBjZWxsICYmIGNlbGwudGFrZW5CeSAmJiBjZWxsLnRha2VuQnkuaXNTdW5rKCk7XG4gICAgfTtcbiAgICBjb25zdCBzaW5rU2hpcCA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGNvbnN0IHNoaXBDZWxscyA9IGdhbWVib2FyZC5hcnJheS5mbGF0KCkuZmlsdGVyKChjKSA9PiBjLnRha2VuQnkgJiYgYy50YWtlbkJ5Lm5hbWUgPT09IGNlbGwudGFrZW5CeS5uYW1lKTtcbiAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXG4gICAgICAgICAgICAgICAgeyBjb2w6IDAsIHJvdzogLTEgfSxcbiAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICB7IGNvbDogMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICB7IGNvbDogMSwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBkaXJlY3Rpb25zLmZvckVhY2goKGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1JvdyA9IChOdW1iZXIoY2VsbC5yb3cpICsgZGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCBuZXdSb3cpKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBoaXRCdXROb3RTdW5rID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBnYW1lYm9hcmRDZWxscyA9IGdhbWVib2FyZC5hcnJheS5mbGF0KCk7XG4gICAgICAgIHJldHVybiBnYW1lYm9hcmRDZWxscy5zb21lKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICdoaXQnICYmIGNlbGwudGFrZW5CeS5pc1N1bmsoKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBhbGxTdW5rID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBnYW1lYm9hcmRDZWxscyA9IGdhbWVib2FyZC5hcnJheS5mbGF0KCk7XG4gICAgICAgIGxldCB0YWtlbkJ5Q2VsbHMgPSBnYW1lYm9hcmRDZWxscy5maWx0ZXIoKGNlbGwpID0+IGNlbGwudGFrZW5CeSk7XG4gICAgICAgIGlmICh0YWtlbkJ5Q2VsbHMubGVuZ3RoID4gMCAmJiB0YWtlbkJ5Q2VsbHMuZXZlcnkoKGNlbGwpID0+IGNlbGwudGFrZW5CeS5pc1N1bmsoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZW5lcmF0ZUFycmF5LFxuICAgICAgICBjbGVhckJvYXJkLFxuICAgICAgICBnZXRDZWxsLFxuICAgICAgICBzZXRDZWxsLFxuICAgICAgICByZW1vdmVTaGlwLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIHJlY2VpdmVBcm91bmQsXG4gICAgICAgIHJlc2VydmVTcGFjZSxcbiAgICAgICAgcmVzZXJ2ZVNwYWNlRm9yQWxsLFxuICAgICAgICBoaXRCdXROb3RTdW5rLFxuICAgICAgICBjYW5CZVN1bmssXG4gICAgICAgIHNpbmtTaGlwLFxuICAgICAgICBhbGxTdW5rLFxuICAgICAgICBhcnJheSxcbiAgICAgICAgY2FuQmVQbGFjZWQsXG4gICAgICAgIHNoaXBzUGxhY2VkLFxuICAgICAgICByZW1vdmVSZXNlcnZlZFNwYWNlLFxuICAgIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgZ2FtZWJvYXJkRmFjdG9yeTtcbiIsImNvbnN0IHNoaXBGYWN0b3J5ID0gKG5hbWUpID0+IHtcbiAgICBsZXQgc2l6ZTtcbiAgICBpZiAobmFtZSA9PT0gJ0NhcnJpZXInKSB7XG4gICAgICAgIHNpemUgPSA1O1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ0JhdHRsZXNoaXAnKSB7XG4gICAgICAgIHNpemUgPSA0O1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ0Rlc3Ryb3llcicpIHtcbiAgICAgICAgc2l6ZSA9IDM7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnU3VibWFyaW5lJykge1xuICAgICAgICBzaXplID0gMztcbiAgICB9XG4gICAgaWYgKG5hbWUgPT09ICdQYXRyb2xCb2F0Jykge1xuICAgICAgICBzaXplID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgaGl0Q291bnQ6IDAsXG4gICAgICAgIGlzVmVydGljYWw6IGZhbHNlLFxuICAgICAgICByb3RhdGUoKSB7XG4gICAgICAgICAgICB0aGlzLmlzVmVydGljYWwgPSAhdGhpcy5pc1ZlcnRpY2FsO1xuICAgICAgICB9LFxuICAgICAgICBoaXQoKSB7XG4gICAgICAgICAgICB0aGlzLmhpdENvdW50ICs9IDE7XG4gICAgICAgIH0sXG4gICAgICAgIGlzU3VuaygpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhpdENvdW50ID09PSBzaXplO1xuICAgICAgICB9LFxuICAgIH07XG59O1xuZXhwb3J0IGRlZmF1bHQgc2hpcEZhY3Rvcnk7XG4iLCJmdW5jdGlvbiBpc1NhZmFyaU9ySU9TQnJvd3NlcigpIHtcbiAgICBjb25zdCB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG4gICAgY29uc3QgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KHVhKTtcbiAgICBjb25zdCBpc0lPUyA9IC9pUGFkfGlQaG9uZXxpUG9kLy50ZXN0KHVhKSB8fCAodWEuaW5jbHVkZXMoJ01hYycpICYmICdvbnRvdWNoZW5kJyBpbiBkb2N1bWVudCk7XG4gICAgcmV0dXJuIGlzU2FmYXJpIHx8IGlzSU9TO1xufVxubGV0IHNvdW5kcztcbmlmIChpc1NhZmFyaU9ySU9TQnJvd3NlcigpKSB7XG4gICAgY29uc3QgYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgc291bmRzID0gKCgpID0+IHtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IHt9O1xuICAgICAgICBjb25zdCBnYWluTm9kZSA9IGF1ZGlvQ3R4LmNyZWF0ZUdhaW4oKTtcbiAgICAgICAgZ2Fpbk5vZGUuY29ubmVjdChhdWRpb0N0eC5kZXN0aW5hdGlvbik7XG4gICAgICAgIGNvbnN0IGxvYWRTb3VuZCA9ICh1cmwsIGtleSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgcmVxdWVzdC5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgcmVxdWVzdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgYXVkaW9DdHguZGVjb2RlQXVkaW9EYXRhKHJlcXVlc3QucmVzcG9uc2UsIChidWZmZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyc1trZXldID0gYnVmZmVyO1xuICAgICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB3aXRoIGRlY29kaW5nIGF1ZGlvIGRhdGEnLCBlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBsb2FkU291bmQoJ3NvdW5kcy9ncmF5MXdlYS53YXYnLCAnbWlzcycpO1xuICAgICAgICAgICAgbG9hZFNvdW5kKCdzb3VuZHMvZXhwbG8ud2F2JywgJ2hpdCcpO1xuICAgICAgICAgICAgbG9hZFNvdW5kKCdzb3VuZHMvZXhwbG9kZWEud2F2JywgJ3N1bmsnKTtcbiAgICAgICAgICAgIGxvYWRTb3VuZCgnc291bmRzL2NhcHR1cmUud2F2JywgJ2dhbWVPdmVyJyk7XG4gICAgICAgICAgICBsb2FkU291bmQoJ3NvdW5kcy9iYXJyMXNlbC53YXYnLCAnZHJvcCcpO1xuICAgICAgICAgICAgbG9hZFNvdW5kKCdzb3VuZHMvZHJhaW4ud2F2JywgJ3JvdGF0ZScpO1xuICAgICAgICAgICAgbG9hZFNvdW5kKCdzb3VuZHMvZXhwMXNlbC53YXYnLCAncmFuZG9tJyk7XG4gICAgICAgICAgICBsb2FkU291bmQoJ3NvdW5kcy9tc2cud2F2JywgJ3NlbGVjdCcpO1xuICAgICAgICAgICAgbG9hZFNvdW5kKCdzb3VuZHMvYmVlcC53YXYnLCAndGljaycpO1xuICAgICAgICAgICAgbG9hZFNvdW5kKCdzb3VuZHMvYnV0dG9uUmV2LndhdicsICdncmFiJyk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHBsYXlpbmdTb3VyY2VzID0ge307XG4gICAgICAgIGNvbnN0IHBsYXlBdWRpbyA9IChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChwbGF5aW5nU291cmNlc1trZXldKSB7XG4gICAgICAgICAgICAgICAgcGxheWluZ1NvdXJjZXNba2V5XS5zdG9wKCk7XG4gICAgICAgICAgICAgICAgcGxheWluZ1NvdXJjZXNba2V5XS5vbmVuZGVkID0gKCkgPT4geyB9O1xuICAgICAgICAgICAgICAgIHBsYXlpbmdTb3VyY2VzW2tleV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZmZlcnNba2V5XSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGF1ZGlvQ3R4LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xuICAgICAgICAgICAgICAgIHNvdXJjZS5idWZmZXIgPSBidWZmZXJzW2tleV07XG4gICAgICAgICAgICAgICAgc291cmNlLmNvbm5lY3QoZ2Fpbk5vZGUpO1xuICAgICAgICAgICAgICAgIHBsYXlpbmdTb3VyY2VzW2tleV0gPSBzb3VyY2U7XG4gICAgICAgICAgICAgICAgc291cmNlLm9uZW5kZWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHBsYXlpbmdTb3VyY2VzW2tleV0gPSBudWxsO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgc291cmNlLnN0YXJ0KDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignU291bmQgbm90IGZvdW5kOicsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IG11dGVBbGwgPSAobXV0ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG11dGUpIHtcbiAgICAgICAgICAgICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdhaW5Ob2RlLmdhaW4udmFsdWUgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBsb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwbGF5OiBwbGF5QXVkaW8sXG4gICAgICAgICAgICAgICAgbXV0ZUFsbDogbXV0ZUFsbCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfSkoKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4ge1xuICAgICAgICBhdWRpb0N0eFxuICAgICAgICAgICAgLnJlc3VtZSgpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUGxheWJhY2sgcmVzdW1lZCBzdWNjZXNzZnVsbHknKTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1BsYXliYWNrIHJlc3VtZSBmYWlsZWQnLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZWxzZSB7XG4gICAgc291bmRzID0gKCgpID0+IHtcbiAgICAgICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3MgPSBuZXcgQXVkaW8oJ3NvdW5kcy9ncmF5MXdlYS53YXYnKTtcbiAgICAgICAgICAgIGNvbnN0IGhpdCA9IG5ldyBBdWRpbygnc291bmRzL2V4cGxvLndhdicpO1xuICAgICAgICAgICAgY29uc3Qgc3VuayA9IG5ldyBBdWRpbygnc291bmRzL2V4cGxvZGVhLndhdicpO1xuICAgICAgICAgICAgY29uc3QgZ2FtZU92ZXIgPSBuZXcgQXVkaW8oJ3NvdW5kcy9jYXB0dXJlLndhdicpO1xuICAgICAgICAgICAgY29uc3QgZHJvcCA9IG5ldyBBdWRpbygnc291bmRzL2JhcnIxc2VsLndhdicpO1xuICAgICAgICAgICAgY29uc3Qgcm90YXRlID0gbmV3IEF1ZGlvKCdzb3VuZHMvZHJhaW4ud2F2Jyk7XG4gICAgICAgICAgICBjb25zdCByYW5kb20gPSBuZXcgQXVkaW8oJ3NvdW5kcy9leHAxc2VsLndhdicpO1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ID0gbmV3IEF1ZGlvKCdzb3VuZHMvbXNnLndhdicpO1xuICAgICAgICAgICAgY29uc3QgdGljayA9IG5ldyBBdWRpbygnc291bmRzL2JlZXAud2F2Jyk7XG4gICAgICAgICAgICBjb25zdCBncmFiID0gbmV3IEF1ZGlvKCdzb3VuZHMvYnV0dG9uUmV2LndhdicpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaXNzLFxuICAgICAgICAgICAgICAgIGhpdCxcbiAgICAgICAgICAgICAgICBzdW5rLFxuICAgICAgICAgICAgICAgIGdhbWVPdmVyLFxuICAgICAgICAgICAgICAgIGRyb3AsXG4gICAgICAgICAgICAgICAgcm90YXRlLFxuICAgICAgICAgICAgICAgIHJhbmRvbSxcbiAgICAgICAgICAgICAgICBzZWxlY3QsXG4gICAgICAgICAgICAgICAgdGljayxcbiAgICAgICAgICAgICAgICBncmFiLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcGxheUF1ZGlvID0gKGF1ZGlvKSA9PiB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhhdWRpbykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheVNvdW5kID0gYXVkaW9ba2V5XS5wbGF5O1xuICAgICAgICAgICAgICAgIGF1ZGlvW2tleV0ucGxheSA9IGZ1bmN0aW9uIHNvdW5kUGxheWVyKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXVkaW9ba2V5XS5jdXJyZW50VGltZSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvW2tleV0ucGF1c2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvW2tleV0uY3VycmVudFRpbWUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwbGF5U291bmQuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBhdWRpbyA9IGluaXQoKTtcbiAgICAgICAgICAgIHBsYXlBdWRpbyhhdWRpbyk7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBhdWRpbyksIHsgcGxheTogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbbmFtZV0gJiYgdGhpc1tuYW1lXS5wbGF5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW25hbWVdLnBsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBsb2FkKCk7XG4gICAgfSkoKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHNvdW5kcztcbiIsImltcG9ydCBzb3VuZHMgZnJvbSAnLi9zb3VuZHMnO1xuY29uc3QgcGxheWVyRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBjb2xzID0gWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJ107XG4gICAgbGV0IHByZXZIaXQgPSBudWxsO1xuICAgIGxldCBsYXN0SGl0ID0gbnVsbDtcbiAgICBsZXQgcmFuZ2UgPSAxO1xuICAgIGxldCBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICBsZXQgZ29Eb3duID0gdHJ1ZTtcbiAgICBjb25zdCBhdHRhY2sgPSAoZ2FtZWJvYXJkLCBjb2wsIHJvdykgPT4ge1xuICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnN0YXR1cyAhPT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnN0YXR1cyAhPT0gJ21pc3MnKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soY29sLCByb3cpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICBzZXRQcmV2SGl0KGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiByb3cgfSk7XG4gICAgICAgICAgICAgICAgc291bmRzLnBsYXkoJ2hpdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0ID09PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnbWlzcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FscmVhZHkgc2hvdCc7XG4gICAgfTtcbiAgICBjb25zdCByYW5kb21BdHRhY2sgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGxldCByYW5kb21Db2w7XG4gICAgICAgIGxldCByYW5kb21Sb3c7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJhbmRvbUNvbCA9IGNvbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29scy5sZW5ndGgpXTtcbiAgICAgICAgICAgIHJhbmRvbVJvdyA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdoaXQnIHx8IGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdtaXNzJyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHJhbmRvbUNvbCwgcmFuZG9tUm93KTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogcmFuZG9tQ29sLCByb3c6IHJhbmRvbVJvdyB9KTtcbiAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnaGl0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzID09PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnbWlzcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgcmVzdWx0LCBjb2w6IHJhbmRvbUNvbCwgcm93OiByYW5kb21Sb3cgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyByZXN1bHQ6ICdhbHJlYWR5IHNob3QnLCBjb2w6IHJhbmRvbUNvbCwgcm93OiByYW5kb21Sb3cgfTtcbiAgICB9O1xuICAgIGNvbnN0IGZvbGxvd3VwQXR0YWNrID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IFtcbiAgICAgICAgICAgIHsgY29sOiAwLCByb3c6IC0xIH0sXG4gICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICB7IGNvbDogLTEsIHJvdzogMCB9LFxuICAgICAgICAgICAgeyBjb2w6IDEsIHJvdzogMCB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB2YWxpZERpcmVjdGlvbnMgPSBkaXJlY3Rpb25zLmZpbHRlcigoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgZGlyZWN0aW9uLmNvbCk7XG4gICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyBkaXJlY3Rpb24ucm93KS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgIGlmIChjZWxsICYmIGNlbGwuc3RhdHVzICE9PSAnbWlzcycgJiYgY2VsbC5zdGF0dXMgIT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodmFsaWREaXJlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbURpcmVjdGlvbiA9IHZhbGlkRGlyZWN0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWxpZERpcmVjdGlvbnMubGVuZ3RoKV07XG4gICAgICAgICAgICBjb25zdCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgcmFuZG9tRGlyZWN0aW9uLmNvbCk7XG4gICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyByYW5kb21EaXJlY3Rpb24ucm93KS50b1N0cmluZygpO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCBuZXdSb3cpO1xuICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogbmV3Um93IH0pO1xuICAgICAgICAgICAgICAgIHNvdW5kcy5wbGF5KCdoaXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgIHNvdW5kcy5wbGF5KCdtaXNzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGZpbmlzaGluZ0F0dGFjayA9IChnYW1lYm9hcmQsIGNvbCwgcm93LCBwcmV2SGl0KSA9PiB7XG4gICAgICAgIGlmIChwcmV2SGl0LnJvdyA9PT0gcm93KSB7XG4gICAgICAgICAgICBpZiAoZ29SaWdodCkge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29sLmNoYXJDb2RlQXQoMCkgKyByYW5nZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyAhPT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyAhPT0gJ21pc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgcm93KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQcmV2SGl0KGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogbmV3Q29sLCByb3c6IHJvdyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kcy5wbGF5KCdoaXQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzID09PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kcy5wbGF5KCdtaXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZ29SaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBuZXdDb2wsIHJvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSAtIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgc291bmRzLnBsYXkoJ2hpdCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgPT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291bmRzLnBsYXkoJ21pc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgbmV3Q29sLCByb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2SGl0LmNvbCA9PT0gY29sKSB7XG4gICAgICAgICAgICBpZiAoZ29Eb3duKSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGxldCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyByYW5nZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld1JvdyA9IChOdW1iZXIocm93KSArIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnaGl0Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyA9PT0gJ21pc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnbWlzcycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBjb2wsIG5ld1JvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGxldCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgLSByYW5nZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld1JvdyA9IChOdW1iZXIocm93KSAtIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnaGl0Jyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyA9PT0gJ21pc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnbWlzcycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIGNvbCwgbmV3Um93LCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGdldFByZXZIaXQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwcmV2SGl0O1xuICAgIH07XG4gICAgY29uc3QgZ2V0TGFzdEhpdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGxhc3RIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRQcmV2SGl0ID0gKG5ld1ByZXZIaXQpID0+IHtcbiAgICAgICAgcHJldkhpdCA9IG5ld1ByZXZIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRMYXN0SGl0ID0gKG5ld0xhc3RIaXQpID0+IHtcbiAgICAgICAgbGFzdEhpdCA9IG5ld0xhc3RIaXQ7XG4gICAgfTtcbiAgICByZXR1cm4geyBhdHRhY2ssIHJhbmRvbUF0dGFjaywgZm9sbG93dXBBdHRhY2ssIGZpbmlzaGluZ0F0dGFjaywgcHJldkhpdCwgbGFzdEhpdCwgZ2V0UHJldkhpdCwgZ2V0TGFzdEhpdCwgc2V0UHJldkhpdCwgc2V0TGFzdEhpdCB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IHBsYXllckZhY3Rvcnk7XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB1aSBmcm9tICcuL3VpJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgc291bmRzIGZyb20gJy4vc291bmRzJztcbmNvbnN0IGRyYWdBbmREcm9wID0gKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIHNoaXBzKSA9PiB7XG4gICAgY29uc3QgZmlyc3RCb2FyZEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RCb2FyZCcpO1xuICAgIGNvbnN0IHNlY29uZEJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgIGNvbnN0IGZpcnN0Qm9hcmRDZWxscyA9IGZpcnN0Qm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgY29uc3Qgc2Vjb25kQm9hcmRDZWxscyA9IHNlY29uZEJvYXJkRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY2VsbCcpO1xuICAgIGxldCBzaGlwTmFtZTtcbiAgICBsZXQgc2hpcFNpemU7XG4gICAgbGV0IGdyYWJQb2ludFggPSAwO1xuICAgIGxldCBncmFiUG9pbnRZID0gMDtcbiAgICBsZXQgc2hpcE9iajtcbiAgICBsZXQgb3JpZW50YXRpb247XG4gICAgbGV0IGhpZ2hsaWdodGVkQ2VsbHMgPSBbXTtcbiAgICBjb25zdCBzaGlwTmFtZVRvT2JqID0ge1xuICAgICAgICBjYXJyaWVyOiBzaGlwc1swXSxcbiAgICAgICAgYmF0dGxlc2hpcDogc2hpcHNbMV0sXG4gICAgICAgIGRlc3Ryb3llcjogc2hpcHNbMl0sXG4gICAgICAgIHN1Ym1hcmluZTogc2hpcHNbM10sXG4gICAgICAgIHBhdHJvbGJvYXQ6IHNoaXBzWzRdLFxuICAgIH07XG4gICAgbGV0IGxhc3REcmFnZ2VkID0gbnVsbDtcbiAgICBjb25zdCBkcmFnZ2FibGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRyYWdnYWJsZScpO1xuICAgIGZ1bmN0aW9uIGdldE5vblNoaXBDZWxscyhib2FyZENlbGxzKSB7XG4gICAgICAgIGNvbnN0IGJvYXJkQ2VsbHNBcnJheSA9IEFycmF5LmZyb20oYm9hcmRDZWxscyk7XG4gICAgICAgIHJldHVybiBib2FyZENlbGxzQXJyYXkuZmlsdGVyKChjZWxsKSA9PiAhY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rha2VuJykpO1xuICAgIH1cbiAgICBjb25zdCBub25TaGlwQ2VsbHMgPSBbLi4uZ2V0Tm9uU2hpcENlbGxzKGZpcnN0Qm9hcmRDZWxscyksIC4uLmdldE5vblNoaXBDZWxscyhzZWNvbmRCb2FyZENlbGxzKV07XG4gICAgZnVuY3Rpb24gaXNWYWxpZFBsYWNlbWVudCh0b0hpZ2hsaWdodCkge1xuICAgICAgICByZXR1cm4gKHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmNsYXNzTGlzdC5jb250YWlucygnZW1wdHknKSkgJiZcbiAgICAgICAgICAgICh0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gY2VsbC5kYXRhc2V0LmNvbCA9PT0gdG9IaWdobGlnaHRbMF0uZGF0YXNldC5jb2wpIHx8XG4gICAgICAgICAgICAgICAgdG9IaWdobGlnaHQuZXZlcnkoKGNlbGwpID0+IGNlbGwuZGF0YXNldC5yb3cgPT09IHRvSGlnaGxpZ2h0WzBdLmRhdGFzZXQucm93KSkgJiZcbiAgICAgICAgICAgIHRvSGlnaGxpZ2h0Lmxlbmd0aCA9PT0gc2hpcFNpemUgJiZcbiAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmRhdGFzZXQuY29sID49ICdBJyAmJiBjZWxsLmRhdGFzZXQuY29sIDw9ICdKJykgJiZcbiAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBOdW1iZXIoY2VsbC5kYXRhc2V0LnJvdykgPj0gMSAmJiBOdW1iZXIoY2VsbC5kYXRhc2V0LnJvdykgPD0gMTApKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMoaGlnaGxpZ2h0ZWRDZWxscywgc2hpcFNpemUpIHtcbiAgICAgICAgcmV0dXJuIGhpZ2hsaWdodGVkQ2VsbHMuc2xpY2UoTWF0aC5taW4oaGlnaGxpZ2h0ZWRDZWxscy5sZW5ndGggLSBzaGlwU2l6ZSwgMCkpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRHYW1lYm9hcmQoZSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgbGV0IGdhbWVib2FyZDtcbiAgICAgICAgY29uc3QgYm9hcmRJZCA9IHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZDtcbiAgICAgICAgaWYgKGJvYXJkSWQgPT09ICdmaXJzdEJvYXJkJykge1xuICAgICAgICAgICAgZ2FtZWJvYXJkID0gZmlyc3RHYW1lYm9hcmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvYXJkSWQgPT09ICdzZWNvbmRCb2FyZCcpIHtcbiAgICAgICAgICAgIGdhbWVib2FyZCA9IHNlY29uZEdhbWVib2FyZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyB0YXJnZXQsIGdhbWVib2FyZCB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXNlcnZlU3BhY2VGb3JSZW1haW5pbmdTaGlwcyhnYW1lYm9hcmQsIGUpIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGdldEdhbWVib2FyZChlKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2hpcE5hbWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKTtcbiAgICAgICAgbGV0IHJlbWFpbmluZ1NoaXBzID0gZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZpbHRlcigoc2hpcCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldFNoaXBOYW1lICE9PSBzaGlwLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVtYWluaW5nU2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlc2VydmVTcGFjZShnYW1lYm9hcmQsIHNoaXAuY29sLCBzaGlwLnJvdyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRTaGlwQXR0cmlidXRlcyhlLCB0YXJnZXQpIHtcbiAgICAgICAgc2hpcE5hbWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKTtcbiAgICAgICAgc2hpcFNpemUgPSBOdW1iZXIodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykpO1xuICAgICAgICBncmFiUG9pbnRYID0gZS5vZmZzZXRYO1xuICAgICAgICBncmFiUG9pbnRZID0gZS5vZmZzZXRZO1xuICAgICAgICBzaGlwT2JqID0gc2hpcE5hbWVUb09ialtzaGlwTmFtZV07XG4gICAgICAgIG9yaWVudGF0aW9uID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgcmV0dXJuIHsgc2hpcE5hbWUsIHNoaXBPYmogfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHJldmVudE9mZkJvYXJkUGxhY2VtZW50KHRhcmdldCwgZSkge1xuICAgICAgICBpZiAoaGlnaGxpZ2h0ZWRDZWxscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGJvYXJkID0gdGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpO1xuICAgICAgICAgICAgaWYgKGJvYXJkKSB7XG4gICAgICAgICAgICAgICAgbGV0IHsgZ2FtZWJvYXJkIH0gPSBnZXRHYW1lYm9hcmQoZSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvYXJkLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkID0gZmlyc3RHYW1lYm9hcmQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGJvYXJkLmlkID09PSAnc2Vjb25kQm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZCA9IHNlY29uZEdhbWVib2FyZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZCAmJiBsYXN0RHJhZ2dlZCAmJiBnYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGdhbWVib2FyZCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci5yZW5ldygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRTdGFydENlbGwoaW5kZXgsIHNoaXBPYmosIGUpIHtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQgfSA9IGdldEdhbWVib2FyZChlKTtcbiAgICAgICAgcmV0dXJuIGluZGV4IC0gKHNoaXBPYmouaXNWZXJ0aWNhbCA/IE1hdGguZmxvb3IoZ3JhYlBvaW50WSAvIHRhcmdldC5vZmZzZXRIZWlnaHQpICogMTAgOiBNYXRoLmZsb29yKGdyYWJQb2ludFggLyB0YXJnZXQub2Zmc2V0V2lkdGgpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Qm9hcmRDZWxscyhib2FyZElkKSB7XG4gICAgICAgIHJldHVybiBib2FyZElkID09PSAnZmlyc3RCb2FyZCcgPyBmaXJzdEJvYXJkQ2VsbHMgOiBzZWNvbmRCb2FyZENlbGxzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoaWdobGlnaHRDZWxscyh0b0hpZ2hsaWdodCkge1xuICAgICAgICB0b0hpZ2hsaWdodC5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2hpZ2hsaWdodCcpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGlnaGxpZ2h0Q2VsbHNPbkJvYXJkKHNoaXBPYmosIHN0YXJ0Q2VsbCwgYm9hcmRDZWxscywgdG9IaWdobGlnaHQpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwU2l6ZTsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2VsbEluZGV4ID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gc3RhcnRDZWxsICsgaSAqIDEwIDogc3RhcnRDZWxsICsgaTtcbiAgICAgICAgICAgIGlmIChib2FyZENlbGxzW2NlbGxJbmRleF0pIHtcbiAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5wdXNoKGJvYXJkQ2VsbHNbY2VsbEluZGV4XSk7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxscy5wdXNoKGJvYXJkQ2VsbHNbY2VsbEluZGV4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlSGlnaGxpZ2h0KCkge1xuICAgICAgICBoaWdobGlnaHRlZENlbGxzLmZvckVhY2goKGhpZ2hsaWdodGVkQ2VsbCkgPT4gaGlnaGxpZ2h0ZWRDZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNCb2FyZFZhbGlkKGJvYXJkSWQpIHtcbiAgICAgICAgcmV0dXJuIGJvYXJkSWQgPT09ICdmaXJzdEJvYXJkJyB8fCBib2FyZElkID09PSAnc2Vjb25kQm9hcmQnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwbGFjZVNoaXBPbkJvYXJkKGdhbWVib2FyZCwgc2hpcE9iaiwgbGFzdCwgb3JpZW50YXRpb24pIHtcbiAgICAgICAgaWYgKGdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwT2JqLnNpemUsIGxhc3RbMF0uZGF0YXNldC5jb2wsIGxhc3RbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGdhbWVib2FyZCwgbGFzdFswXS5kYXRhc2V0LmNvbCwgbGFzdFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlc2VydmVTcGFjZShnYW1lYm9hcmQsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2Vkb3duKGUpIHtcbiAgICAgICAgY29uc3QgeyBnYW1lYm9hcmQgfSA9IGdldEdhbWVib2FyZChlKTtcbiAgICAgICAgZ2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2UoZ2FtZWJvYXJkKTtcbiAgICAgICAgcmVzZXJ2ZVNwYWNlRm9yUmVtYWluaW5nU2hpcHMoZ2FtZWJvYXJkLCBlKTtcbiAgICAgICAgY29udHJvbGxlci5yZW5ldygpO1xuICAgICAgICB1aS5zZXRJbml0TWVzc2FnZSgpO1xuICAgICAgICBpZiAoZS5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIHNvdW5kcy5wbGF5KCdncmFiJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRHJhZ1N0YXJ0KGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDApKTtcbiAgICAgICAgICAgIGNvbnN0IHsgdGFyZ2V0LCBnYW1lYm9hcmQgfSA9IGdldEdhbWVib2FyZChlKTtcbiAgICAgICAgICAgIHRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBzZXRTaGlwQXR0cmlidXRlcyhlLCB0YXJnZXQpO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlbW92ZVNoaXAoc2hpcE9iaiwgZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgIHVpLmNsZWFyU2hpcChzaGlwT2JqLCBnYW1lYm9hcmQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRHJhZ092ZXIoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBjb25zdCB7IHRhcmdldCB9ID0gZ2V0R2FtZWJvYXJkKGUpO1xuICAgICAgICAgICAgY29uc3QgYm9hcmRJZCA9IHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZDtcbiAgICAgICAgICAgIGlmIChpc0JvYXJkVmFsaWQoYm9hcmRJZCkpIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXBPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnRDZWxsID0gZ2V0U3RhcnRDZWxsKGluZGV4LCBzaGlwT2JqLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9hcmRDZWxscyA9IGdldEJvYXJkQ2VsbHMoYm9hcmRJZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvSGlnaGxpZ2h0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodENlbGxzT25Cb2FyZChzaGlwT2JqLCBzdGFydENlbGwsIGJvYXJkQ2VsbHMsIHRvSGlnaGxpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWRQbGFjZW1lbnQodG9IaWdobGlnaHQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRDZWxscyh0b0hpZ2hsaWdodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxhc3REcmFnZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdERyYWdnZWQgPSBnZXRMYXN0U2hpcFNpemVFbGVtZW50cyhoaWdobGlnaHRlZENlbGxzLCBzaGlwU2l6ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdMZWF2ZSgpIHtcbiAgICAgICAgcmVtb3ZlSGlnaGxpZ2h0KCk7XG4gICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRHJvcChlKSB7XG4gICAgICAgIHJlbW92ZUhpZ2hsaWdodCgpO1xuICAgICAgICBjb25zdCBsYXN0ID0gZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMoaGlnaGxpZ2h0ZWRDZWxscywgc2hpcFNpemUpO1xuICAgICAgICBjb25zdCB7IHRhcmdldCwgZ2FtZWJvYXJkIH0gPSBnZXRHYW1lYm9hcmQoZSk7XG4gICAgICAgIGNvbnN0IGJvYXJkSWQgPSB0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQ7XG4gICAgICAgIGlmIChpc0JvYXJkVmFsaWQoYm9hcmRJZCkgJiYgc2hpcE9iaiAmJiBsYXN0RHJhZ2dlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcGxhY2VTaGlwT25Cb2FyZChnYW1lYm9hcmQsIHNoaXBPYmosIGxhc3QsIG9yaWVudGF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBnYW1lYm9hcmQucmVtb3ZlUmVzZXJ2ZWRTcGFjZShnYW1lYm9hcmQpO1xuICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlRm9yQWxsKGdhbWVib2FyZCk7XG4gICAgICAgIGNvbnRyb2xsZXIucmVuZXcoKTtcbiAgICAgICAgdWkuY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHVpLnNldFN0YXJ0TWVzc2FnZSgpO1xuICAgICAgICBsYXN0RHJhZ2dlZCA9IG51bGw7XG4gICAgICAgIHNvdW5kcy5wbGF5KCdkcm9wJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdFbmQoZSkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgdGFyZ2V0LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgICAgIHByZXZlbnRPZmZCb2FyZFBsYWNlbWVudCh0YXJnZXQsIGUpO1xuICAgICAgICBpZiAodWkuY2FuQmVTdGFydGVkKCkpIHtcbiAgICAgICAgICAgIHVpLmZpbGxDZWxscygnc2Vjb25kJyk7XG4gICAgICAgIH1cbiAgICAgICAgdWkuc2V0U3RhcnRNZXNzYWdlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1vdXNldXAoZSkge1xuICAgICAgICBjb25zdCB7IGdhbWVib2FyZCB9ID0gZ2V0R2FtZWJvYXJkKGUpO1xuICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlRm9yQWxsKGdhbWVib2FyZCk7XG4gICAgICAgIGNvbnRyb2xsZXIucmVuZXcoKTtcbiAgICAgICAgdWkuc2V0U3RhcnRNZXNzYWdlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVJvdGF0ZShlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgeyB0YXJnZXQsIGdhbWVib2FyZCB9ID0gZ2V0R2FtZWJvYXJkKGUpO1xuICAgICAgICBjb25zdCB7IHNoaXBOYW1lLCBzaGlwT2JqIH0gPSBzZXRTaGlwQXR0cmlidXRlcyhlLCB0YXJnZXQpO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZpbHRlcigoc2hpcCkgPT4gc2hpcC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gc2hpcE5hbWUpO1xuICAgICAgICBnYW1lYm9hcmQucmVtb3ZlU2hpcChzaGlwT2JqLCBnYW1lYm9hcmQpO1xuICAgICAgICBnYW1lYm9hcmQucmVtb3ZlUmVzZXJ2ZWRTcGFjZShnYW1lYm9hcmQpO1xuICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlRm9yQWxsKGdhbWVib2FyZCk7XG4gICAgICAgIHNoaXBPYmoucm90YXRlKCk7XG4gICAgICAgIG9yaWVudGF0aW9uID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgaWYgKCFnYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBjdXJyZW50WzBdLmNvbCwgY3VycmVudFswXS5yb3csIG9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgc2hpcE9iai5yb3RhdGUoKTtcbiAgICAgICAgICAgIG9yaWVudGF0aW9uID0gc2hpcE9iai5pc1ZlcnRpY2FsID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgfVxuICAgICAgICBnYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGN1cnJlbnRbMF0uY29sLCBjdXJyZW50WzBdLnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICBnYW1lYm9hcmQucmVzZXJ2ZVNwYWNlRm9yQWxsKGdhbWVib2FyZCk7XG4gICAgICAgIGNvbnRyb2xsZXIucmVuZXcoKTtcbiAgICAgICAgaWYgKHVpLmNhbkJlU3RhcnRlZCgpKSB7XG4gICAgICAgICAgICB1aS5maWxsQ2VsbHMoJ3NlY29uZCcpO1xuICAgICAgICB9XG4gICAgICAgIHNvdW5kcy5wbGF5KCdyb3RhdGUnKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmxvY2tSaWdodENsaWNrKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyc1RvQ2VsbHMoY2VsbHMpIHtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBoYW5kbGVEcmFnT3ZlcihpbmRleCkpO1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnbGVhdmUnLCBoYW5kbGVEcmFnTGVhdmUpO1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRFdmVudExpc3RlbmVyc1RvQ2VsbHMoZmlyc3RCb2FyZENlbGxzKTtcbiAgICBhZGRFdmVudExpc3RlbmVyc1RvQ2VsbHMoc2Vjb25kQm9hcmRDZWxscyk7XG4gICAgZHJhZ2dhYmxlcy5mb3JFYWNoKChkcmFnZ2FibGUpID0+IHtcbiAgICAgICAgZHJhZ2dhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZU1vdXNlZG93bik7XG4gICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIGhhbmRsZURyYWdFbmQpO1xuICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZU1vdXNldXApO1xuICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBoYW5kbGVSb3RhdGUpO1xuICAgICAgICBub25TaGlwQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4gY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIGJsb2NrUmlnaHRDbGljaykpO1xuICAgIH0pO1xufTtcbmV4cG9ydCBkZWZhdWx0IGRyYWdBbmREcm9wO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgZHJhZ0FuZERyb3AgZnJvbSAnLi9kcmFnQW5kRHJvcCc7XG5pbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHNvdW5kcyBmcm9tICcuL3NvdW5kcyc7XG5jb25zdCB1aSA9ICgoKSA9PiB7XG4gICAgY29uc3Qgc3RhdHVzQm94ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lc3NhZ2VCb3ggcCcpO1xuICAgIGNvbnN0IGJvYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNib2FyZHMnKTtcbiAgICBjb25zdCBwVmNCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcGxheWVyVnNDb21wdXRlcicpO1xuICAgIGNvbnN0IG5ld0dhbWVCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV3R2FtZScpO1xuICAgIGNvbnN0IGNWY0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb21wdXRlclZzQ29tcHV0ZXInKTtcbiAgICBjb25zdCBzdGFydEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdGFydCcpO1xuICAgIGNvbnN0IHJhbmRvbUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyYW5kb21QbGFjZW1lbnQnKTtcbiAgICBjb25zdCBhbGxCdG5zID0gW3BWY0J0biwgbmV3R2FtZUJ0biwgY1ZjQnRuLCBzdGFydEJ0biwgcmFuZG9tQnRuXTtcbiAgICBjb25zdCBzcGVlZHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSgnc3BlZWQnKTtcbiAgICBsZXQgc3BlZWRWYWx1ZSA9IDEwMDA7XG4gICAgY29uc3QgbXV0ZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtdXRlJyk7XG4gICAgbGV0IGlzTXV0ZWQgPSBmYWxzZTtcbiAgICBjb25zdCBjcmVhdGVDZWxsID0gKGNlbGwpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNlbGwuc3RhdHVzKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJywgY2VsbC5jb2wpO1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1yb3cnLCBjZWxsLnJvdyk7XG4gICAgICAgIGlmIChjZWxsLnRha2VuQnkpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNoaXBOYW1lJywgY2VsbC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJDZWxscyA9IChnYW1lYm9hcmQsIGJvYXJkKSA9PiB7XG4gICAgICAgIGdhbWVib2FyZC5hcnJheS5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgICAgIHJvdy5mb3JFYWNoKChjb2wpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsID0gY3JlYXRlQ2VsbChjb2wpO1xuICAgICAgICAgICAgICAgIGJvYXJkLmFwcGVuZChjZWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGdldEJvYXJkSWQgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIHJldHVybiAnZmlyc3RCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3NlY29uZEJvYXJkJztcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVuZGVyQm9hcmQgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGJvYXJkLmNsYXNzTGlzdC5hZGQoJ2JvYXJkJyk7XG4gICAgICAgIGJvYXJkLmlkID0gZ2V0Qm9hcmRJZChnYW1lYm9hcmQpO1xuICAgICAgICByZW5kZXJDZWxscyhnYW1lYm9hcmQsIGJvYXJkKTtcbiAgICAgICAgYm9hcmRzLmFwcGVuZChib2FyZCk7XG4gICAgfTtcbiAgICBjb25zdCBjbGVhclNoaXAgPSAoc2hpcCwgZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgIyR7Z2V0Qm9hcmRJZChnYW1lYm9hcmQpfSAuY2VsbGApO1xuICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rha2VuJykgJiYgY2VsbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc2hpcE5hbWUnKSA9PT0gc2hpcC5uYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ3Rha2VuJyk7XG4gICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdlbXB0eScpO1xuICAgICAgICAgICAgICAgIGNlbGwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXNoaXBOYW1lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcmVmcmVzaEJvYXJkID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2dldEJvYXJkSWQoZ2FtZWJvYXJkKX1gKTtcbiAgICAgICAgYm9hcmQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHJlbmRlckNlbGxzKGdhbWVib2FyZCwgYm9hcmQpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VXNlcklucHV0ID0gKGUpID0+IHtcbiAgICAgICAgaWYgKCFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpdCcpICYmICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21pc3MnKSkge1xuICAgICAgICAgICAgY29uc3QgY29sID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbCcpO1xuICAgICAgICAgICAgY29uc3Qgcm93ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdycpO1xuICAgICAgICAgICAgcmV0dXJuIHsgY29sLCByb3cgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlVXNlcklucHV0ID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3NlY29uZEJvYXJkIC5jZWxsJyk7XG4gICAgICAgIGxldCB1c2VySW5wdXQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHVzZXJJbnB1dCA9IHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSAmJiAhY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ21pc3MnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShnZXRVc2VySW5wdXQoZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSB3aGlsZSAoIXVzZXJJbnB1dCk7XG4gICAgICAgIGNvbnN0IGNvbCA9IHVzZXJJbnB1dC5jb2wudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3Qgcm93ID0gdXNlcklucHV0LnJvdy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4geyBjb2wsIHJvdyB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZVB2QyA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBmaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgIHdhaXRpbmcodHJ1ZSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gdHJ1ZSkpO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBnZXRTcGVlZFZhbHVlKCkpKTtcbiAgICAgICAgYWxsQnRucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSBmYWxzZSkpO1xuICAgICAgICB3YWl0aW5nKGZhbHNlKTtcbiAgICAgICAgY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHNldEluaXRNZXNzYWdlKCk7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlTmV3R2FtZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBzZXRSZXN0YXJ0TWVzc2FnZSgpO1xuICAgICAgICB3YWl0aW5nKHRydWUpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IHRydWUpKTtcbiAgICAgICAgeWllbGQgY29udHJvbGxlci5uZXdHYW1lKCk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgICAgIGNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBpZiAocFZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgc2V0SW5pdE1lc3NhZ2UoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZUN2QyA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB3YWl0aW5nKHRydWUpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IHRydWUpKTtcbiAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZ2V0U3BlZWRWYWx1ZSgpKSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgY1ZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVHYW1lTW9kZSA9IChzZWxlY3RlZEVsZW1lbnQsIGRlc2VsZWN0ZWRFbGVtZW50KSA9PiB7XG4gICAgICAgIGRlc2VsZWN0ZWRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGlmICghc2VsZWN0ZWRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRFbGVtZW50ID09PSBwVmNCdG4pIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVQdkMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEVsZW1lbnQgPT09IGNWY0J0bikge1xuICAgICAgICAgICAgICAgIGhhbmRsZUN2QygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICBzZXRSZXN0YXJ0TWVzc2FnZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB3YWl0aW5nID0gKGJvb2wpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ3dhaXQnLCBib29sKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldEJvYXJkUG9pbnRlciA9ICh3aGljaCkgPT4ge1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgaWYgKHdoaWNoID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5hZGQoJ2JvYXJkT3V0bGluZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdoaWNoID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnYm9hcmRPdXRsaW5lJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUJvYXJkUG9pbnRlciA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QucmVtb3ZlKCdib2FyZE91dGxpbmUnKTtcbiAgICB9O1xuICAgIGNvbnN0IGNyZWF0ZVNoaXBFbGVtZW50ID0gKGZpcnN0Q2VsbCkgPT4ge1xuICAgICAgICBjb25zdCBzaGlwRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjb25zdCBzaGlwTmFtZSA9IGZpcnN0Q2VsbC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3Qgc2hpcFNpemUgPSBmaXJzdENlbGwudGFrZW5CeS5zaXplO1xuICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzaGlwJywgc2hpcE5hbWUsICdkcmFnZ2FibGUnKTtcbiAgICAgICAgc2hpcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBgJHtzaGlwU2l6ZX1gKTtcbiAgICAgICAgc2hpcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnLCBgJHtzaGlwTmFtZX1gKTtcbiAgICAgICAgc2hpcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCAndHJ1ZScpO1xuICAgICAgICByZXR1cm4gc2hpcEVsZW1lbnQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRTaGlwU3R5bGUgPSAoc2hpcEVsZW1lbnQsIHNoaXBTaXplLCBjZWxsU2l6ZSwgaXNWZXJ0aWNhbCkgPT4ge1xuICAgICAgICBjb25zdCBodG1sRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKTtcbiAgICAgICAgY29uc3Qgcm9vdEZvbnRTaXplID0gcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShodG1sRWxlbWVudCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZm9udC1zaXplJykpO1xuICAgICAgICBpZiAoIWlzVmVydGljYWwpIHtcbiAgICAgICAgICAgIHNoaXBFbGVtZW50LnN0eWxlLndpZHRoID0gc2hpcFNpemUgKiAoY2VsbFNpemUgLyByb290Rm9udFNpemUpICsgJ3JlbSc7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBjZWxsU2l6ZSAvIHJvb3RGb250U2l6ZSArICdyZW0nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUud2lkdGggPSBjZWxsU2l6ZSAvIHJvb3RGb250U2l6ZSArICdyZW0nO1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gc2hpcFNpemUgKiAoY2VsbFNpemUgLyByb290Rm9udFNpemUpICsgJ3JlbSc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlc2l6ZUhhbmRsZXIgPSAoc2hpcEVsZW1lbnQsIHNoaXBTaXplLCBpc1ZlcnRpY2FsKSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGxTaXplID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkIC5jZWxsJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIHNldFNoaXBTdHlsZShzaGlwRWxlbWVudCwgc2hpcFNpemUsIGNlbGxTaXplLCBpc1ZlcnRpY2FsKTtcbiAgICB9O1xuICAgIGNvbnN0IGNyZWF0ZVNoaXBPdmVybGF5ID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBnYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoZmlyc3RDZWxsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzaGlwRWxlbWVudCA9IGNyZWF0ZVNoaXBFbGVtZW50KGZpcnN0Q2VsbCk7XG4gICAgICAgICAgICBjb25zdCBjZWxsU2l6ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5ib2FyZCAuY2VsbCcpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoO1xuICAgICAgICAgICAgY29uc3Qgc2hpcFNpemUgPSBmaXJzdENlbGwudGFrZW5CeS5zaXplO1xuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IGZpcnN0Q2VsbC50YWtlbkJ5LmlzVmVydGljYWw7XG4gICAgICAgICAgICBjb25zdCBmaXJzdENlbGxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7Z2V0Qm9hcmRJZChnYW1lYm9hcmQpfSAuY2VsbFtkYXRhLWNvbD1cIiR7Zmlyc3RDZWxsLmNvbH1cIl1bZGF0YS1yb3c9XCIke2ZpcnN0Q2VsbC5yb3d9XCJdYCk7XG4gICAgICAgICAgICBmaXJzdENlbGxFbGVtZW50LmFwcGVuZENoaWxkKHNoaXBFbGVtZW50KTtcbiAgICAgICAgICAgIHNldFNoaXBTdHlsZShzaGlwRWxlbWVudCwgc2hpcFNpemUsIGNlbGxTaXplLCBpc1ZlcnRpY2FsKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiByZXNpemVIYW5kbGVyKHNoaXBFbGVtZW50LCBzaGlwU2l6ZSwgaXNWZXJ0aWNhbCkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbkJlU3RhcnRlZCA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQuc2hpcHNQbGFjZWQubGVuZ3RoID09PSA1ICYmIGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQuc2hpcHNQbGFjZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBmaWxsQ2VsbHMoJ3NlY29uZCcpO1xuICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRJbml0TWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdHVzVGV4dE1vYmlsZSA9IFwiVXNlICdSYW5kb20gUGxhY2VtZW50JyBidXR0b24sIHRoZW4gcHJlc3MgU3RhcnQhXCI7XG4gICAgICAgIGNvbnN0IHN0YXR1c1RleHREZXNrdG9wID0gXCJEcmFnIGFuZCBkcm9wIHNoaXBzIG9udG8gdGhlIGxlZnQgYm9hcmQgb3IgdXNlICdSYW5kb20gUGxhY2VtZW50JyBidXR0b24uIFJpZ2h0IGNsaWNrIHRvIHJvdGF0ZS4gV2hlbiByZWFkeSwgcHJlc3MgU3RhcnQhXCI7XG4gICAgICAgIGlmIChzdGF0dXNCb3gudGV4dENvbnRlbnQgPT09IHN0YXR1c1RleHRNb2JpbGUgfHxcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9PT0gc3RhdHVzVGV4dERlc2t0b3AgfHxcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9PT0gJ1Jlc3RhcnRpbmcuLi4nIHx8XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPT09ICdZb3UgY2FuIG5vdyBiZWdpbiB0aGUgZ2FtZS4gUHJlc3Mgc3RhcnQhJykge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gc3RhdHVzVGV4dE1vYmlsZTtcbiAgICAgICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogMTAyNHB4KScpLm1hdGNoZXMpIHtcbiAgICAgICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBzdGF0dXNUZXh0RGVza3RvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0U3RhcnRNZXNzYWdlID0gKCkgPT4ge1xuICAgICAgICBpZiAoY2FuQmVTdGFydGVkKCkpIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdZb3UgY2FuIG5vdyBiZWdpbiB0aGUgZ2FtZS4gUHJlc3Mgc3RhcnQhJztcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0VHVybk1lc3NhZ2VQdkMgPSAoaXNQbGF5ZXJUdXJuKSA9PiB7XG4gICAgICAgIGlmIChpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9IFwiUGxheWVyJ3MgdHVybi4gVGFrZSBhaW0gYW5kIGF0dGFjayFcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9IFwiQ29tcHV0ZXIncyB0dXJuLiBUaGUgc2hvdCBpcyBjb21pbmchXCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFR1cm5NZXNzYWdlQ3ZDID0gKGlzUGxheWVyVHVybikgPT4ge1xuICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIlZpb2xldCdzIHR1cm5cIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9IFwiQmx1ZSdzIHR1cm5cIjtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0R2FtZU92ZXJNZXNzYWdlUHZDID0gKHdobykgPT4ge1xuICAgICAgICBpZiAod2hvID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gJ0dhbWUgb3ZlciwgUGxheWVyIHdpbnMhJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh3aG8gPT09ICdjb21wdXRlcicpIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdHYW1lIG92ZXIsIENvbXB1dGVyIHdpbnMhJztcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0R2FtZU92ZXJNZXNzYWdlQ3ZDID0gKHdobykgPT4ge1xuICAgICAgICBpZiAod2hvID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gJ0dhbWUgb3ZlciwgQmx1ZSBDb21wdXRlciB3aW5zISc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2hvID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSAnR2FtZSBvdmVyLCBWaW9sZXQgQ29tcHV0ZXIgd2lucyEnO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRSZXN0YXJ0TWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gJ1Jlc3RhcnRpbmcuLi4nO1xuICAgIH07XG4gICAgY29uc3QgZmlsbENlbGxzID0gKGlucHV0KSA9PiB7XG4gICAgICAgIGxldCBib2FyZDtcbiAgICAgICAgaWYgKGlucHV0ID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlbGxzID0gYm9hcmQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdmaWxsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCB1bkZpbGxDZWxscyA9IChpbnB1dCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHdhaXRpbmcodHJ1ZSk7XG4gICAgICAgIGxldCBib2FyZDtcbiAgICAgICAgaWYgKGlucHV0ID09PSAnZmlyc3QnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICBib2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNlbGxzID0gYm9hcmQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdmaWxsZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2ZpbGxlZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPT09IGNlbGxzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoKGluZGV4ICsgMSkgJSA2ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgndGljaycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgKGdldFNwZWVkVmFsdWUoKSAvIDEyMCkgKiBpbmRleCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHdhaXRpbmcoZmFsc2UpO1xuICAgIH0pO1xuICAgIGNvbnN0IHRvZ2dsZU11dGUgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNwZWFrZXJJY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NwZWFrZXInKTtcbiAgICAgICAgaWYgKCFpc011dGVkKSB7XG4gICAgICAgICAgICBtdXRlQnRuLmNsYXNzTGlzdC5hZGQoJ211dGVkJyk7XG4gICAgICAgICAgICBzcGVha2VySWNvbi5jbGFzc0xpc3QucmVtb3ZlKCdmYS12b2x1bWUtaGlnaCcpO1xuICAgICAgICAgICAgc3BlYWtlckljb24uY2xhc3NMaXN0LmFkZCgnZmEtdm9sdW1lLXhtYXJrJyk7XG4gICAgICAgICAgICBmb3IgKGxldCBzb3VuZCBvZiBPYmplY3QudmFsdWVzKHNvdW5kcykpIHtcbiAgICAgICAgICAgICAgICBzb3VuZHMubXV0ZUFsbCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG11dGVCdG4uY2xhc3NMaXN0LnJlbW92ZSgnbXV0ZWQnKTtcbiAgICAgICAgICAgIHNwZWFrZXJJY29uLmNsYXNzTGlzdC5yZW1vdmUoJ2ZhLXZvbHVtZS14bWFyaycpO1xuICAgICAgICAgICAgc3BlYWtlckljb24uY2xhc3NMaXN0LmFkZCgnZmEtdm9sdW1lLWhpZ2gnKTtcbiAgICAgICAgICAgIGZvciAobGV0IHNvdW5kIG9mIE9iamVjdC52YWx1ZXMoc291bmRzKSkge1xuICAgICAgICAgICAgICAgIHNvdW5kcy5tdXRlQWxsKGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpc011dGVkID0gIWlzTXV0ZWQ7XG4gICAgICAgIHNvdW5kcy5wbGF5KCdzZWxlY3QnKTtcbiAgICB9O1xuICAgIHBWY0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICBoYW5kbGVHYW1lTW9kZShwVmNCdG4sIGNWY0J0bik7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnc3RhcnQnKTtcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBwVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBzb3VuZHMucGxheSgnc2VsZWN0Jyk7XG4gICAgICAgIHVuRmlsbENlbGxzKCdmaXJzdCcpO1xuICAgIH0pO1xuICAgIGNWY0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICBmaWxsQ2VsbHMoJ3NlY29uZCcpO1xuICAgICAgICBoYW5kbGVHYW1lTW9kZShjVmNCdG4sIHBWY0J0bik7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LmFkZCgnc3RhcnQnKTtcbiAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICByYW5kb21CdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBjVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICBzb3VuZHMucGxheSgnc2VsZWN0Jyk7XG4gICAgICAgIFByb21pc2UuYWxsKFt1bkZpbGxDZWxscygnZmlyc3QnKSwgdW5GaWxsQ2VsbHMoJ3NlY29uZCcpXSk7XG4gICAgfSk7XG4gICAgbmV3R2FtZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICByZW1vdmVCb2FyZFBvaW50ZXIoKTtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICBpZiAoY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBjVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHNvdW5kcy5wbGF5KCdzZWxlY3QnKTtcbiAgICAgICAgeWllbGQgaGFuZGxlTmV3R2FtZSgpO1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICAgICAgaWYgKHBWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNlY29uZC5jbGFzc0xpc3QucmVtb3ZlKCdzdGFydCcpO1xuICAgICAgICAgICAgdW5GaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBwVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LmFkZCgnc3RhcnQnKTtcbiAgICAgICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChbdW5GaWxsQ2VsbHMoJ2ZpcnN0JyksIHVuRmlsbENlbGxzKCdzZWNvbmQnKV0pO1xuICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNWY0J0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuc3RhcnQoKTtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QuYWRkKCdzdGFydCcpO1xuICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHVuRmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICB9KTtcbiAgICByYW5kb21CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgICAgICByZWZyZXNoQm9hcmQoY29udHJvbGxlci5jb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIGNvbnRyb2xsZXIucmFuZG9taXplU2hpcHNQbGFjZW1lbnQoY29udHJvbGxlci5odW1hbkdhbWVib2FyZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQsIGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIGNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBzZXRTdGFydE1lc3NhZ2UoKTtcbiAgICAgICAgZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICAgICAgc291bmRzLnBsYXkoJ3JhbmRvbScpO1xuICAgIH0pO1xuICAgIGNvbnN0IHNldFNwZWVkVmFsdWUgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgbGV0IGlucHV0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBpZiAoaW5wdXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgc3BlZWRWYWx1ZSA9IE51bWJlcihpbnB1dC52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGdldFNwZWVkVmFsdWUgPSAoKSA9PiBzcGVlZFZhbHVlO1xuICAgIHNwZWVkcy5mb3JFYWNoKChzcGVlZEJ0bikgPT4ge1xuICAgICAgICBzcGVlZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBzZXRTcGVlZFZhbHVlKGUpO1xuICAgICAgICAgICAgc291bmRzLnBsYXkoJ3NlbGVjdCcpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICBtdXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdG9nZ2xlTXV0ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHNldEluaXRNZXNzYWdlKTtcbiAgICByZXR1cm4ge1xuICAgICAgICByZW5kZXJCb2FyZCxcbiAgICAgICAgY2xlYXJTaGlwLFxuICAgICAgICByZWZyZXNoQm9hcmQsXG4gICAgICAgIGhhbmRsZVVzZXJJbnB1dCxcbiAgICAgICAgcFZjQnRuLFxuICAgICAgICBjVmNCdG4sXG4gICAgICAgIHdhaXRpbmcsXG4gICAgICAgIHNldEJvYXJkUG9pbnRlcixcbiAgICAgICAgcmVtb3ZlQm9hcmRQb2ludGVyLFxuICAgICAgICBjcmVhdGVTaGlwT3ZlcmxheSxcbiAgICAgICAgY2FuQmVTdGFydGVkLFxuICAgICAgICBzZXRJbml0TWVzc2FnZSxcbiAgICAgICAgc2V0U3RhcnRNZXNzYWdlLFxuICAgICAgICBzZXRUdXJuTWVzc2FnZVB2QyxcbiAgICAgICAgc2V0VHVybk1lc3NhZ2VDdkMsXG4gICAgICAgIHNldEdhbWVPdmVyTWVzc2FnZVB2QyxcbiAgICAgICAgc2V0R2FtZU92ZXJNZXNzYWdlQ3ZDLFxuICAgICAgICBzZXRSZXN0YXJ0TWVzc2FnZSxcbiAgICAgICAgZ2V0U3BlZWRWYWx1ZSxcbiAgICAgICAgZmlsbENlbGxzLFxuICAgICAgICB1bkZpbGxDZWxscyxcbiAgICB9O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IHVpO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tICcuL2dhbWVib2FyZCc7XG5pbXBvcnQgc2hpcEZhY3RvcnkgZnJvbSAnLi9zaGlwJztcbmltcG9ydCBwbGF5ZXJGYWN0b3J5IGZyb20gJy4vcGxheWVyJztcbmltcG9ydCB1aSBmcm9tICcuL3VpJztcbmltcG9ydCBkcmFnQW5kRHJvcCBmcm9tICcuL2RyYWdBbmREcm9wJztcbmltcG9ydCBzb3VuZHMgZnJvbSAnLi9zb3VuZHMnO1xuY29uc3QgY29udHJvbGxlciA9ICgoKSA9PiB7XG4gICAgY29uc3QgaHVtYW5HYW1lYm9hcmQgPSBnYW1lYm9hcmRGYWN0b3J5KCk7XG4gICAgY29uc3QgY29tcHV0ZXJHYW1lYm9hcmQgPSBnYW1lYm9hcmRGYWN0b3J5KCk7XG4gICAgY29uc3QgaHVtYW4gPSBwbGF5ZXJGYWN0b3J5KCk7XG4gICAgY29uc3QgY29tcHV0ZXIgPSBwbGF5ZXJGYWN0b3J5KCk7XG4gICAgbGV0IGlzU3RvcHBlZCA9IHRydWU7XG4gICAgbGV0IGh1bWFuQ2FycmllcjtcbiAgICBsZXQgaHVtYW5CYXR0bGVzaGlwO1xuICAgIGxldCBodW1hbkRlc3Ryb3llcjtcbiAgICBsZXQgaHVtYW5TdWJtYXJpbmU7XG4gICAgbGV0IGh1bWFuUGF0cm9sYm9hdDtcbiAgICBsZXQgaHVtYW5TaGlwcyA9IFtodW1hbkNhcnJpZXIsIGh1bWFuQmF0dGxlc2hpcCwgaHVtYW5EZXN0cm95ZXIsIGh1bWFuU3VibWFyaW5lLCBodW1hblBhdHJvbGJvYXRdO1xuICAgIGNvbnN0IHBvcHVsYXRlU2hpcHMgPSAoKSA9PiB7XG4gICAgICAgIGh1bWFuQ2FycmllciA9IHNoaXBGYWN0b3J5KCdDYXJyaWVyJyk7XG4gICAgICAgIGh1bWFuQmF0dGxlc2hpcCA9IHNoaXBGYWN0b3J5KCdCYXR0bGVzaGlwJyk7XG4gICAgICAgIGh1bWFuRGVzdHJveWVyID0gc2hpcEZhY3RvcnkoJ0Rlc3Ryb3llcicpO1xuICAgICAgICBodW1hblN1Ym1hcmluZSA9IHNoaXBGYWN0b3J5KCdTdWJtYXJpbmUnKTtcbiAgICAgICAgaHVtYW5QYXRyb2xib2F0ID0gc2hpcEZhY3RvcnkoJ1BhdHJvbEJvYXQnKTtcbiAgICAgICAgaHVtYW5TaGlwcyA9IFtodW1hbkNhcnJpZXIsIGh1bWFuQmF0dGxlc2hpcCwgaHVtYW5EZXN0cm95ZXIsIGh1bWFuU3VibWFyaW5lLCBodW1hblBhdHJvbGJvYXRdO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5DYXJyaWVyLCAnQScsICcxJywgJ2hvcml6b250YWwnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKGh1bWFuQmF0dGxlc2hpcCwgJ0EnLCAnMycsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hbkRlc3Ryb3llciwgJ0EnLCAnNScsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hblN1Ym1hcmluZSwgJ0EnLCAnNycsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hblBhdHJvbGJvYXQsICdBJywgJzknLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5yZXNlcnZlU3BhY2VGb3JBbGwoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgIH07XG4gICAgY29uc3QgcmVuZXcgPSAoKSA9PiB7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChodW1hbkdhbWVib2FyZCk7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICBkcmFnQW5kRHJvcChodW1hbkdhbWVib2FyZCwgY29tcHV0ZXJHYW1lYm9hcmQsIGh1bWFuU2hpcHMpO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlR2FtZU92ZXIgPSAod2lubmVyKSA9PiB7XG4gICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICBpZiAodWkucFZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgdWkuc2V0R2FtZU92ZXJNZXNzYWdlUHZDKHdpbm5lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHVpLnNldEdhbWVPdmVyTWVzc2FnZUN2Qyh3aW5uZXIpO1xuICAgICAgICB9XG4gICAgICAgIHNvdW5kcy5wbGF5KCdnYW1lT3ZlcicpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIGNvbnN0IGlzR2FtZU92ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb21wdXRlckdhbWVib2FyZC5hbGxTdW5rKGNvbXB1dGVyR2FtZWJvYXJkKSkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZUdhbWVPdmVyKCdwbGF5ZXInKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHVtYW5HYW1lYm9hcmQuYWxsU3VuayhodW1hbkdhbWVib2FyZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVHYW1lT3ZlcignY29tcHV0ZXInKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBjb21wdXRlckFJID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBsZXQgcGxheWVyO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkID09PSBodW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgcGxheWVyID0gY29tcHV0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb21wdXRlckdhbWVib2FyZCkge1xuICAgICAgICAgICAgcGxheWVyID0gaHVtYW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdhbWVib2FyZC5oaXRCdXROb3RTdW5rKGdhbWVib2FyZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RIaXQgPSBwbGF5ZXIuZ2V0TGFzdEhpdCgpO1xuICAgICAgICAgICAgY29uc3QgcHJldkhpdCA9IHBsYXllci5nZXRQcmV2SGl0KCk7XG4gICAgICAgICAgICBjb25zdCBjZWxsID0gZ2FtZWJvYXJkLmdldENlbGwobGFzdEhpdC5jb2wsIGxhc3RIaXQucm93KTtcbiAgICAgICAgICAgIGNvbnN0IGhpdENvdW50ID0gY2VsbC50YWtlbkJ5LmhpdENvdW50O1xuICAgICAgICAgICAgaWYgKHByZXZIaXQgIT09IG51bGwgJiYgbGFzdEhpdCAhPT0gbnVsbCAmJiBoaXRDb3VudCA+PSAyICYmIGhpdENvdW50IDw9IDQpIHtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgbGFzdEhpdC5jb2wsIGxhc3RIaXQucm93LCBwcmV2SGl0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGhpdENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLmZvbGxvd3VwQXR0YWNrKGdhbWVib2FyZCwgbGFzdEhpdC5jb2wsIGxhc3RIaXQucm93KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuY2FuQmVTdW5rKGNlbGwpKSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnNpbmtTaGlwKGdhbWVib2FyZCwgbGFzdEhpdC5jb2wsIGxhc3RIaXQucm93KTtcbiAgICAgICAgICAgICAgICBzb3VuZHMucGxheSgnc3VuaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY29sLCByb3cgfSA9IHBsYXllci5yYW5kb21BdHRhY2soZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldFByZXZIaXQocGxheWVyLmdldExhc3RIaXQoKSk7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldExhc3RIaXQoeyBjb2wsIHJvdyB9KTtcbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmNhbkJlU3VuayhjZWxsKSkge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQuc2lua1NoaXAoZ2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIHNvdW5kcy5wbGF5KCdzdW5rJyk7XG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5zZXRQcmV2SGl0KG51bGwpO1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0TGFzdEhpdChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwbGF5ZXJUdXJuID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHVpLnNldFR1cm5NZXNzYWdlUHZDKHRydWUpO1xuICAgICAgICB1aS5zZXRCb2FyZFBvaW50ZXIoJ3BsYXllcicpO1xuICAgICAgICB1aS53YWl0aW5nKGZhbHNlKTtcbiAgICAgICAgY29uc3QgeyBjb2wsIHJvdyB9ID0geWllbGQgdWkuaGFuZGxlVXNlcklucHV0KCk7XG4gICAgICAgIGh1bWFuLmF0dGFjayhjb21wdXRlckdhbWVib2FyZCwgY29sLCByb3cpO1xuICAgICAgICBjb25zdCBjZWxsID0gY29tcHV0ZXJHYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGlmIChjb21wdXRlckdhbWVib2FyZC5jYW5CZVN1bmsoY2VsbCkpIHtcbiAgICAgICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnNpbmtTaGlwKGNvbXB1dGVyR2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICBzb3VuZHMucGxheSgnc3VuaycpO1xuICAgICAgICB9XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgfSk7XG4gICAgY29uc3QgY29tcHV0ZXJUdXJuID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHVpLnNldFR1cm5NZXNzYWdlUHZDKGZhbHNlKTtcbiAgICAgICAgdWkuc2V0Qm9hcmRQb2ludGVyKCdjb21wdXRlcicpO1xuICAgICAgICB1aS53YWl0aW5nKHRydWUpO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCB1aS5nZXRTcGVlZFZhbHVlKCkpKTtcbiAgICAgICAgaWYgKCF1aS5wVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbXB1dGVyQUkoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgIH0pO1xuICAgIGNvbnN0IHBsYXllclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICB3aGlsZSAoIWlzR2FtZU92ZXIoKSAmJiAhaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgcGxheWVyVHVybigpO1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgY29tcHV0ZXJUdXJuKCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdWkud2FpdGluZyhmYWxzZSk7XG4gICAgfSk7XG4gICAgY29uc3QgY3B1VHVybiA9IChpc1BsYXllclR1cm4sIGdhbWVib2FyZCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHVpLndhaXRpbmcodHJ1ZSk7XG4gICAgICAgIHVpLnNldFR1cm5NZXNzYWdlQ3ZDKGlzUGxheWVyVHVybik7XG4gICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHVpLmdldFNwZWVkVmFsdWUoKSkpO1xuICAgICAgICBpZiAoIXVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29tcHV0ZXJBSShnYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoZ2FtZWJvYXJkKTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICBsZXQgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKCFpc0dhbWVPdmVyKCkgJiYgIWlzU3RvcHBlZCkge1xuICAgICAgICAgICAgeWllbGQgY3B1VHVybihpc1BsYXllclR1cm4sIGlzUGxheWVyVHVybiA/IGh1bWFuR2FtZWJvYXJkIDogY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gIWlzUGxheWVyVHVybjtcbiAgICAgICAgfVxuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdWkud2FpdGluZyhmYWxzZSk7XG4gICAgfSk7XG4gICAgY29uc3QgcmFuZG9tUGxhY2VtZW50ID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBsZXQgYWxsU2hpcHM7XG4gICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGh1bWFuR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBodW1hbkNhcnJpZXIgPSBzaGlwRmFjdG9yeSgnQ2FycmllcicpO1xuICAgICAgICAgICAgaHVtYW5CYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICAgICAgICAgIGh1bWFuRGVzdHJveWVyID0gc2hpcEZhY3RvcnkoJ0Rlc3Ryb3llcicpO1xuICAgICAgICAgICAgaHVtYW5TdWJtYXJpbmUgPSBzaGlwRmFjdG9yeSgnU3VibWFyaW5lJyk7XG4gICAgICAgICAgICBodW1hblBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sQm9hdCcpO1xuICAgICAgICAgICAgYWxsU2hpcHMgPSBbaHVtYW5DYXJyaWVyLCBodW1hbkJhdHRsZXNoaXAsIGh1bWFuRGVzdHJveWVyLCBodW1hblN1Ym1hcmluZSwgaHVtYW5QYXRyb2xib2F0XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlckNhcnJpZXIgPSBzaGlwRmFjdG9yeSgnQ2FycmllcicpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJCYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVyRGVzdHJveWVyID0gc2hpcEZhY3RvcnkoJ0Rlc3Ryb3llcicpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJTdWJtYXJpbmUgPSBzaGlwRmFjdG9yeSgnU3VibWFyaW5lJyk7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlclBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sQm9hdCcpO1xuICAgICAgICAgICAgYWxsU2hpcHMgPSBbY29tcHV0ZXJDYXJyaWVyLCBjb21wdXRlckJhdHRsZXNoaXAsIGNvbXB1dGVyRGVzdHJveWVyLCBjb21wdXRlclN1Ym1hcmluZSwgY29tcHV0ZXJQYXRyb2xib2F0XTtcbiAgICAgICAgfVxuICAgICAgICBodW1hblNoaXBzLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbnN0IGNvbHMgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onXTtcbiAgICAgICAgY29uc3QgcmFuZG9tQ29sID0gKCkgPT4gY29sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xzLmxlbmd0aCldO1xuICAgICAgICBjb25zdCByYW5kb21Sb3cgPSAoKSA9PiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByYW5kb21PcmllbnRhdGlvbiA9ICgpID0+IChNYXRoLnJhbmRvbSgpID4gMC41ID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJyk7XG4gICAgICAgIGFsbFNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGxldCBjb2wgPSByYW5kb21Db2woKTtcbiAgICAgICAgICAgIGxldCByb3cgPSByYW5kb21Sb3coKTtcbiAgICAgICAgICAgIGxldCBvcmllbnRhdGlvbiA9IHJhbmRvbU9yaWVudGF0aW9uKCk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZ2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXAuc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgIHdoaWxlICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29sID0gcmFuZG9tQ29sKCk7XG4gICAgICAgICAgICAgICAgcm93ID0gcmFuZG9tUm93KCk7XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24gPSByYW5kb21PcmllbnRhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwLnNpemUsIGNvbCwgcm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBodW1hblNoaXBzLnB1c2goc2hpcCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcmFuZG9taXplU2hpcHNQbGFjZW1lbnQgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGdhbWVib2FyZC5jbGVhckJvYXJkKCk7XG4gICAgICAgIHJhbmRvbVBsYWNlbWVudChnYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoZ2FtZWJvYXJkKTtcbiAgICAgICAgaWYgKGdhbWVib2FyZCA9PT0gaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KGdhbWVib2FyZCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBpY2tHYW1lTW9kZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50KGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50KGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29tcHV0ZXJWc0NvbXB1dGVyTW9kZSgpO1xuICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChodW1hbkdhbWVib2FyZCk7XG4gICAgICAgIHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50KGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHBsYXllclZzQ29tcHV0ZXJNb2RlKCk7XG4gICAgfTtcbiAgICBjb25zdCByZXN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICBpc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBodW1hbi5zZXRQcmV2SGl0KG51bGwpO1xuICAgICAgICBodW1hbi5zZXRMYXN0SGl0KG51bGwpO1xuICAgICAgICBjb21wdXRlci5zZXRQcmV2SGl0KG51bGwpO1xuICAgICAgICBjb21wdXRlci5zZXRMYXN0SGl0KG51bGwpO1xuICAgICAgICBodW1hbkdhbWVib2FyZC5jbGVhckJvYXJkKCk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgcG9wdWxhdGVTaGlwcygpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICB1aS5jcmVhdGVTaGlwT3ZlcmxheShjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGh1bWFuR2FtZWJvYXJkLCBjb21wdXRlckdhbWVib2FyZCwgaHVtYW5TaGlwcyk7XG4gICAgICAgIHVpLmNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBwaWNrR2FtZU1vZGUoKTtcbiAgICB9O1xuICAgIGNvbnN0IG5ld0dhbWUgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdWkuZ2V0U3BlZWRWYWx1ZSgpKSk7XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICByZXN0YXJ0KCk7XG4gICAgfSk7XG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgdWkuc2V0SW5pdE1lc3NhZ2UoKTtcbiAgICAgICAgaHVtYW5HYW1lYm9hcmQuZ2VuZXJhdGVBcnJheSgpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5nZW5lcmF0ZUFycmF5KCk7XG4gICAgICAgIHVpLnJlbmRlckJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVuZGVyQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICBwb3B1bGF0ZVNoaXBzKCk7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgZHJhZ0FuZERyb3AoaHVtYW5HYW1lYm9hcmQsIGNvbXB1dGVyR2FtZWJvYXJkLCBodW1hblNoaXBzKTtcbiAgICAgICAgdWkuY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHBpY2tHYW1lTW9kZSgpO1xuICAgICAgICB1aS5wVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIHsgaW5pdCwgcmVuZXcsIGh1bWFuR2FtZWJvYXJkLCBjb21wdXRlckdhbWVib2FyZCwgcmVzdGFydCwgbmV3R2FtZSwgc3RhcnQsIHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50LCBodW1hblNoaXBzIH07XG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgY29udHJvbGxlcjtcbiIsImltcG9ydCAnbm9ybWFsaXplLmNzcyc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuY3NzJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vbW9kdWxlcy9jb250cm9sbGVyJztcbmNvbnRyb2xsZXIuaW5pdCgpO1xuIl0sIm5hbWVzIjpbImNvbHMiLCJyb3dzIiwiYXJyYXkiLCJzaGlwc1BsYWNlZCIsImdldENlbGwiLCJjb2wiLCJyb3ciLCJjb2xJbmRleCIsImluZGV4T2YiLCJyb3dJbmRleCIsInNldENlbGwiLCJuZXdTdGF0dXMiLCJuZXdUYWtlbkJ5Iiwic3RhdHVzIiwidGFrZW5CeSIsImdlbmVyYXRlQXJyYXkiLCJpIiwiaiIsImNsZWFyQm9hcmQiLCJmbGF0IiwiZm9yRWFjaCIsImNlbGwiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJyZW1vdmVTaGlwIiwic2hpcCIsImdhbWVib2FyZCIsIm5hbWUiLCJzaGlwSW5kZXgiLCJzcGxpY2UiLCJwbGFjZVNoaXAiLCJvcmllbnRhdGlvbiIsImlzSG9yaXpvbnRhbCIsImNlbGxzIiwic3RhcnQiLCJpc1ZlcnRpY2FsIiwic2hpcENlbGxzIiwic2l6ZSIsImN1cnJlbnRDb2wiLCJjdXJyZW50Um93IiwicHVzaCIsInJlY2VpdmVBdHRhY2siLCJoaXQiLCJyZWNlaXZlQXJvdW5kIiwicmVzZXJ2ZVNwYWNlIiwiZmlsdGVyIiwiYyIsImRpcmVjdGlvbiIsIm5ld0NvbCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJuZXdSb3ciLCJOdW1iZXIiLCJ0b1N0cmluZyIsInJlc2VydmVTcGFjZUZvckFsbCIsImhpdEJ1dE5vdFN1bmsiLCJzb21lIiwiaXNTdW5rIiwiY2FuQmVTdW5rIiwic2lua1NoaXAiLCJhbGxTdW5rIiwidGFrZW5CeUNlbGxzIiwiZXZlcnkiLCJjYW5CZVBsYWNlZCIsImFyZUVtcHR5IiwiaXRlbSIsInJlbW92ZVJlc2VydmVkU3BhY2UiLCJoaXRDb3VudCIsInJvdGF0ZSIsInRoaXMiLCJzb3VuZHMiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzU2FmYXJpIiwidGVzdCIsImlzSU9TIiwiaW5jbHVkZXMiLCJkb2N1bWVudCIsImlzU2FmYXJpT3JJT1NCcm93c2VyIiwiYXVkaW9DdHgiLCJBdWRpb0NvbnRleHQiLCJidWZmZXJzIiwiZ2Fpbk5vZGUiLCJjcmVhdGVHYWluIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwibG9hZFNvdW5kIiwidXJsIiwia2V5IiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInJlc3BvbnNlVHlwZSIsIm9ubG9hZCIsImRlY29kZUF1ZGlvRGF0YSIsInJlc3BvbnNlIiwiYnVmZmVyIiwiZXJyb3IiLCJjb25zb2xlIiwic2VuZCIsInBsYXlpbmdTb3VyY2VzIiwicGxheUF1ZGlvIiwic3RvcCIsIm9uZW5kZWQiLCJzb3VyY2UiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJtdXRlQWxsIiwibXV0ZSIsImdhaW4iLCJ2YWx1ZSIsInBsYXkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVzdW1lIiwidGhlbiIsImxvZyIsImNhdGNoIiwiYXVkaW8iLCJPYmplY3QiLCJrZXlzIiwicGxheVNvdW5kIiwiY3VycmVudFRpbWUiLCJwYXVzZSIsImNhbGwiLCJtaXNzIiwiQXVkaW8iLCJzdW5rIiwiZ2FtZU92ZXIiLCJkcm9wIiwicmFuZG9tIiwic2VsZWN0IiwidGljayIsImdyYWIiLCJhc3NpZ24iLCJsb2FkIiwicHJldkhpdCIsImxhc3RIaXQiLCJyYW5nZSIsImdvUmlnaHQiLCJnb0Rvd24iLCJmaW5pc2hpbmdBdHRhY2siLCJzZXRQcmV2SGl0Iiwic2V0TGFzdEhpdCIsIm5ld1ByZXZIaXQiLCJuZXdMYXN0SGl0IiwiYXR0YWNrIiwicmVzdWx0IiwicmFuZG9tQXR0YWNrIiwicmFuZG9tQ29sIiwicmFuZG9tUm93IiwiTWF0aCIsImZsb29yIiwiY2VpbCIsImZvbGxvd3VwQXR0YWNrIiwidmFsaWREaXJlY3Rpb25zIiwicmFuZG9tRGlyZWN0aW9uIiwiZ2V0UHJldkhpdCIsImdldExhc3RIaXQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwiZG9uZSIsImFwcGx5IiwiZmlyc3RHYW1lYm9hcmQiLCJzZWNvbmRHYW1lYm9hcmQiLCJzaGlwcyIsImZpcnN0Qm9hcmRFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsInNlY29uZEJvYXJkRWxlbWVudCIsImZpcnN0Qm9hcmRDZWxscyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJzZWNvbmRCb2FyZENlbGxzIiwic2hpcE5hbWUiLCJzaGlwU2l6ZSIsInNoaXBPYmoiLCJncmFiUG9pbnRYIiwiZ3JhYlBvaW50WSIsImhpZ2hsaWdodGVkQ2VsbHMiLCJzaGlwTmFtZVRvT2JqIiwiY2FycmllciIsImJhdHRsZXNoaXAiLCJkZXN0cm95ZXIiLCJzdWJtYXJpbmUiLCJwYXRyb2xib2F0IiwibGFzdERyYWdnZWQiLCJkcmFnZ2FibGVzIiwiZ2V0Tm9uU2hpcENlbGxzIiwiYm9hcmRDZWxscyIsIkFycmF5IiwiZnJvbSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibm9uU2hpcENlbGxzIiwiZ2V0TGFzdFNoaXBTaXplRWxlbWVudHMiLCJzbGljZSIsIm1pbiIsImdldEdhbWVib2FyZCIsInRhcmdldCIsImJvYXJkSWQiLCJjbG9zZXN0IiwiaWQiLCJzZXRTaGlwQXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicmVtb3ZlSGlnaGxpZ2h0IiwiaGlnaGxpZ2h0ZWRDZWxsIiwicmVtb3ZlIiwiaXNCb2FyZFZhbGlkIiwiaGFuZGxlTW91c2Vkb3duIiwidGFyZ2V0U2hpcE5hbWUiLCJyZW1haW5pbmdTaGlwcyIsInRvTG93ZXJDYXNlIiwicmVzZXJ2ZVNwYWNlRm9yUmVtYWluaW5nU2hpcHMiLCJyZW5ldyIsInNldEluaXRNZXNzYWdlIiwiYnV0dG9uIiwiaGFuZGxlRHJhZ1N0YXJ0Iiwic2V0VGltZW91dCIsInN0eWxlIiwidmlzaWJpbGl0eSIsImNsZWFyU2hpcCIsImhhbmRsZURyYWdPdmVyIiwiaW5kZXgiLCJwcmV2ZW50RGVmYXVsdCIsInN0YXJ0Q2VsbCIsIm9mZnNldEhlaWdodCIsIm9mZnNldFdpZHRoIiwiZ2V0U3RhcnRDZWxsIiwiZ2V0Qm9hcmRDZWxscyIsInRvSGlnaGxpZ2h0IiwiY2VsbEluZGV4IiwiaGlnaGxpZ2h0Q2VsbHNPbkJvYXJkIiwiZGF0YXNldCIsImlzVmFsaWRQbGFjZW1lbnQiLCJhZGQiLCJoaWdobGlnaHRDZWxscyIsImhhbmRsZURyYWdMZWF2ZSIsImhhbmRsZURyb3AiLCJsYXN0IiwicGxhY2VTaGlwT25Cb2FyZCIsImNhbkJlU3RhcnRlZCIsInNldFN0YXJ0TWVzc2FnZSIsImhhbmRsZURyYWdFbmQiLCJib2FyZCIsInByZXZlbnRPZmZCb2FyZFBsYWNlbWVudCIsImZpbGxDZWxscyIsImhhbmRsZU1vdXNldXAiLCJoYW5kbGVSb3RhdGUiLCJjdXJyZW50IiwiYmxvY2tSaWdodENsaWNrIiwiYWRkRXZlbnRMaXN0ZW5lcnNUb0NlbGxzIiwiZHJhZ2dhYmxlIiwidWkiLCJzdGF0dXNCb3giLCJib2FyZHMiLCJwVmNCdG4iLCJuZXdHYW1lQnRuIiwiY1ZjQnRuIiwic3RhcnRCdG4iLCJyYW5kb21CdG4iLCJhbGxCdG5zIiwic3BlZWRzIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJzcGVlZFZhbHVlIiwibXV0ZUJ0biIsImlzTXV0ZWQiLCJyZW5kZXJDZWxscyIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiY3JlYXRlQ2VsbCIsImFwcGVuZCIsImdldEJvYXJkSWQiLCJodW1hbkdhbWVib2FyZCIsImNvbXB1dGVyR2FtZWJvYXJkIiwicmVmcmVzaEJvYXJkIiwiaW5uZXJIVE1MIiwiZ2V0VXNlcklucHV0IiwiaGFuZGxlR2FtZU1vZGUiLCJzZWxlY3RlZEVsZW1lbnQiLCJkZXNlbGVjdGVkRWxlbWVudCIsIndhaXRpbmciLCJidG4iLCJkaXNhYmxlZCIsImdldFNwZWVkVmFsdWUiLCJyZXN0YXJ0Iiwic2V0UmVzdGFydE1lc3NhZ2UiLCJib29sIiwiZG9jdW1lbnRFbGVtZW50IiwidG9nZ2xlIiwicmVtb3ZlQm9hcmRQb2ludGVyIiwic2V0U2hpcFN0eWxlIiwic2hpcEVsZW1lbnQiLCJjZWxsU2l6ZSIsImh0bWxFbGVtZW50Iiwicm9vdEZvbnRTaXplIiwicGFyc2VGbG9hdCIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwid2lkdGgiLCJoZWlnaHQiLCJzdGF0dXNUZXh0TW9iaWxlIiwic3RhdHVzVGV4dERlc2t0b3AiLCJ0ZXh0Q29udGVudCIsIm1hdGNoTWVkaWEiLCJtYXRjaGVzIiwiaW5wdXQiLCJ1bkZpbGxDZWxscyIsInNlY29uZCIsImFsbCIsIm5ld0dhbWUiLCJyYW5kb21pemVTaGlwc1BsYWNlbWVudCIsImh1bWFuU2hpcHMiLCJzcGVlZEJ0biIsImV2ZW50IiwiY2hlY2tlZCIsInNldFNwZWVkVmFsdWUiLCJzcGVha2VySWNvbiIsInNvdW5kIiwidmFsdWVzIiwicmVuZGVyQm9hcmQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJoYW5kbGVVc2VySW5wdXQiLCJ1c2VySW5wdXQiLCJvbmNlIiwic2V0Qm9hcmRQb2ludGVyIiwid2hpY2giLCJjcmVhdGVTaGlwT3ZlcmxheSIsImZpcnN0Q2VsbCIsImNyZWF0ZVNoaXBFbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYXBwZW5kQ2hpbGQiLCJyZXNpemVIYW5kbGVyIiwic2V0VHVybk1lc3NhZ2VQdkMiLCJpc1BsYXllclR1cm4iLCJzZXRUdXJuTWVzc2FnZUN2QyIsInNldEdhbWVPdmVyTWVzc2FnZVB2QyIsIndobyIsInNldEdhbWVPdmVyTWVzc2FnZUN2QyIsImh1bWFuIiwicGxheWVyIiwiY29tcHV0ZXIiLCJodW1hbkNhcnJpZXIiLCJodW1hbkJhdHRsZXNoaXAiLCJodW1hbkRlc3Ryb3llciIsImh1bWFuU3VibWFyaW5lIiwiaHVtYW5QYXRyb2xib2F0IiwiaXNTdG9wcGVkIiwicG9wdWxhdGVTaGlwcyIsImhhbmRsZUdhbWVPdmVyIiwid2lubmVyIiwiaXNHYW1lT3ZlciIsImNvbXB1dGVyQUkiLCJjcHVUdXJuIiwiYWxsU2hpcHMiLCJyYW5kb21PcmllbnRhdGlvbiIsInJhbmRvbVBsYWNlbWVudCIsInBpY2tHYW1lTW9kZSIsImluaXQiXSwic291cmNlUm9vdCI6IiJ9