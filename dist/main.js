(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],o=[],r=(r,l)=>{const s=t.indexOf(r),n=e.indexOf(l);return-1===s||-1===n?null:o[n][s]},l=(r,l,s,n)=>{const a=t.indexOf(r),i=e.indexOf(l);return-1===a||-1===i?null:(o[i][a].status=s,n&&(o[i][a].takenBy=n),o[i][a])};return(()=>{for(let r=0;r<10;r+=1){o[r]=[];for(let l=0;l<10;l+=1)o[r][l]={col:t[l],row:e[r],status:"empty",takenBy:void 0}}})(),{clearBoard:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)o[t][e].status="empty",o[t][e].takenBy=void 0},getCell:r,setCell:l,placeShip:(o,s,n,a)=>{const i="horizontal"===a,c=i?t:e,u=c.indexOf(i?s:n);if(u<0||u+o.size>c.length)return!1;for(let t=0;t<o.size;t+=1){const e=i?c[u+t]:s,a=i?n:c[u+t];if("empty"!==r(e,a).status)return!1;l(e,a,"taken",o)}return!0},receiveAttack:(t,e)=>{const o=r(t,e);return"taken"===o.status?(o.takenBy.hit(),l(t,e,"hit"),o.status):"empty"===o.status?(l(t,e,"miss"),o.status):null},sinkShip:(t,e,o)=>{const r=t.getCell(e,o);if(r&&r.takenBy&&r.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===r.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((o=>{const r=String.fromCharCode(e.col.charCodeAt(0)+o.col),l=(Number(e.row)+o.row).toString();t.getCell(r,l)&&t.receiveAttack(r,l)}))}))}},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===o[t][e].status&&!o[t][e].takenBy.isSunk())return!1;return!0},array:o}},e=t=>{let e;return"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2),{name:t,size:e,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===e}}},o=()=>{const t=["A","B","C","D","E","F","G","H","I","J"];let e=1,o=!1;const r=(t,l,s)=>{if(i.prevHit.row===i.lastHit.row)if(o){console.log("goRight");let n=String.fromCharCode(l.charCodeAt(0)+e);for(;t.getCell(n,s)&&"hit"===t.getCell(n,s).status;)e+=1,n=String.fromCharCode(l.charCodeAt(0)+e);if(t.getCell(n,s)&&"hit"!==t.getCell(n,s).status&&"miss"!==t.getCell(n,s).status){t.receiveAttack(n,s);const o=t.getCell(n,s);"hit"===o.status&&(i.prevHit=i.lastHit,i.lastHit={col:o.col,row:o.row}),console.log("prevHit",i.prevHit),console.log("lastHit",i.lastHit),console.log("range",e),console.log("---------------"),e+=1}t.getCell(n,s)&&"miss"!==t.getCell(n,s).status||(e=1,o=!1,r(t,l,s))}else{console.log("goLeft");let n=String.fromCharCode(l.charCodeAt(0)-e);for(;t.getCell(n,s)&&"hit"===t.getCell(n,s).status;)e+=1,n=String.fromCharCode(l.charCodeAt(0)-e);if(t.getCell(n,s)&&"hit"!==t.getCell(n,s).status&&"miss"!==t.getCell(n,s).status){t.receiveAttack(n,s);const o=t.getCell(n,s);"hit"===o.status&&(i.prevHit=i.lastHit,i.lastHit={col:o.col,row:o.row}),console.log("prevHit",i.prevHit),console.log("lastHit",i.lastHit),console.log("range",e),console.log("---------------"),e+=1}t.getCell(n,s)&&"miss"!==t.getCell(n,s).status||(e=1,o=!0,r(t,l,s))}};return{attack:(t,e,o)=>"hit"!==t.getCell(e,o).status&&"miss"!==t.getCell(e,o).status?t.receiveAttack(e,o):"already shot",randomAttack:e=>{let o,r;do{o=t[Math.floor(Math.random()*t.length)],r=Math.ceil(10*Math.random()).toString()}while("hit"===e.getCell(o,r).status||"miss"===e.getCell(o,r).status);if("hit"!==e.getCell(o,r).status&&"miss"!==e.getCell(o,r).status){const t=e.receiveAttack(o,r),l=e.getCell(o,r);return"hit"===l.status&&(i.prevHit=i.lastHit,i.lastHit={col:l.col,row:l.row}),{result:t,col:o,row:r}}return{result:"already shot",col:o,row:r}},followupAttack:(t,o,r)=>{const l=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((e=>{const l=String.fromCharCode(o.charCodeAt(0)+e.col),s=(Number(r)+e.row).toString(),n=t.getCell(l,s);return!(!n||"miss"===n.status||"hit"===n.status)}));if(l.length>0){const s=l[Math.floor(Math.random()*l.length)],n=String.fromCharCode(o.charCodeAt(0)+s.col),a=(Number(r)+s.row).toString();t.receiveAttack(n,a),e=1;const c=t.getCell(n,a);"hit"===c.status&&(i.prevHit=i.lastHit,i.lastHit={col:c.col,row:c.row}),console.log("prevHit",i.prevHit),console.log("lastHit",i.lastHit),console.log("range",e),console.log("---------------")}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:r}};var r=function(t,e,o,r){return new(o||(o=Promise))((function(l,s){function n(t){try{i(r.next(t))}catch(t){s(t)}}function a(t){try{i(r.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?l(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,a)}i((r=r.apply(t,e||[])).next())}))};const l=(()=>{const t=document.querySelector("#wrapper"),e=document.createElement("div");e.id="boards",t.prepend(e);const o=document.querySelector("#playerVsComputer"),l=document.querySelector("#computerVsComputer"),s=document.querySelector("#newGame"),n=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const o=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(o)}))}))},a=t=>{if(!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}};const c=(t,e)=>{e.classList.remove("selected"),t.classList.contains("selected")||(t.classList.add("selected"),i.restart())};return o.addEventListener("click",(()=>c(o,l))),l.addEventListener("click",(()=>c(l,o))),s.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){s.disabled=!0,s.textContent="Restarting",yield i.newGame(),s.textContent="New Game",s.disabled=!1})))),{renderBoard:t=>{const o=document.createElement("div");o.classList.add("board"),t===i.humanGameboard?o.id="firstBoard":t===i.computerGameboard&&(o.id="secondBoard"),n(t,o),e.append(o)},refreshBoard:t=>{const e=t===i.humanGameboard?"firstBoard":"secondBoard",o=document.querySelector(`#${e}`);o.innerHTML="",n(t,o)},handleUserInput:function(){return r(this,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(a(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}}))},pVcBtn:o,cVcBtn:l}})(),s=l;var n=function(t,e,o,r){return new(o||(o=Promise))((function(l,s){function n(t){try{i(r.next(t))}catch(t){s(t)}}function a(t){try{i(r.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?l(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,a)}i((r=r.apply(t,e||[])).next())}))};const a=(()=>{const r=t(),l=t(),i=o(),c=o();let u=!1;const d=e("Carrier"),h=e("Battleship"),g=e("Destroyer"),f=e("Submarine"),m=e("Patrol Boat"),p=e("Carrier"),C=e("Battleship"),w=e("Destroyer"),k=e("Submarine"),v=e("Patrol Boat"),y=()=>{r.placeShip(d,"A","1","horizontal"),r.placeShip(h,"A","3","horizontal"),r.placeShip(g,"A","5","horizontal"),r.placeShip(f,"A","7","horizontal"),r.placeShip(m,"A","9","horizontal"),l.placeShip(p,"A","1","vertical"),l.placeShip(C,"C","1","vertical"),l.placeShip(w,"E","1","vertical"),l.placeShip(k,"G","1","vertical"),l.placeShip(v,"I","1","vertical")},S=()=>l.allSunk()?(console.log("All computer ships are sunk. Human player won!"),!0):!!r.allSunk()&&(console.log("All human ships are sunk. Computer player won!"),!0);let B=null,A=null;console.log(B),console.log(A),console.log("---------------");const H=t=>{if((t=>t.array.flat().some((t=>"hit"===t.status&&!1===t.takenBy.isSunk())))(t))null!==B&&null!==A&&t.getCell(A.col,A.row).takenBy.hitCount>=2&&t.getCell(A.col,A.row).takenBy.hitCount<=4?(console.log("FINISH: >= 2 trafienia w statek"),c.finishingAttack(t,A.col,A.row),t.sinkShip(t,A.col,A.row)):(c.followupAttack(t,A.col,A.row),t.sinkShip(t,A.col,A.row));else{const{col:e,row:o}=c.randomAttack(t);"hit"===t.getCell(e,o).status&&(B=A,A={col:e,row:o},console.log("prevHit",a.prevHit),console.log("lastHit",a.lastHit),console.log("---------------")),"hit"===t.getCell(e,o).status&&t.getCell(e,o).takenBy.isSunk()&&(t.sinkShip(t,e,o),S()&&console.log("koniec"))}},b=()=>s.pVcBtn.classList.contains("selected")?n(void 0,void 0,void 0,(function*(){let t=!0;for(;!S()&&!u;){if(t){const{col:e,row:o}=yield s.handleUserInput();i.attack(l,e,o),l.sinkShip(l,e,o),s.refreshBoard(l),t=!1}if(!t){if(yield new Promise((t=>setTimeout(t,100))),!s.pVcBtn.classList.contains("selected")||u)break;H(r),s.refreshBoard(r),t=!0}}u=!1})):s.cVcBtn.classList.contains("selected")?n(void 0,void 0,void 0,(function*(){let t=!0;for(;!S()&&!u;){if(t){if(yield new Promise((t=>setTimeout(t,500))),!s.cVcBtn.classList.contains("selected")||u)break;const{col:e,row:o}=c.randomAttack(r);r.sinkShip(r,e,o),s.refreshBoard(r),t=!1}if(!t){if(yield new Promise((t=>setTimeout(t,500))),!s.cVcBtn.classList.contains("selected")||u)break;const{col:e,row:o}=i.randomAttack(l);l.sinkShip(l,e,o),s.refreshBoard(l),t=!0}}u=!1})):void 0,L=()=>{B=null,A=null,r.clearBoard(),l.clearBoard(),y(),s.refreshBoard(r),s.refreshBoard(l),b()};return{start:()=>{y(),s.renderBoard(r),s.renderBoard(l),b()},humanGameboard:r,computerGameboard:l,newGame:()=>n(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((t=>setTimeout(t,1e3))),u=!1,L()})),restart:L,lastHit:A,prevHit:B}})(),i=a;i.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,