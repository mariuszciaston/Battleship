(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],o=[],l=(l,r)=>{const s=t.indexOf(l),a=e.indexOf(r);return-1===s||-1===a?null:o[a][s]},r=(l,r,s,a)=>{const n=t.indexOf(l),i=e.indexOf(r);return-1===n||-1===i?null:(o[i][n].status=s,a&&(o[i][n].takenBy=a),o[i][n])};return(()=>{for(let l=0;l<10;l+=1){o[l]=[];for(let r=0;r<10;r+=1)o[l][r]={col:t[r],row:e[l],status:"empty",takenBy:void 0}}})(),{clearBoard:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)o[t][e].status="empty",o[t][e].takenBy=void 0},getCell:l,setCell:r,placeShip:(o,s,a,n)=>{const i="horizontal"===n,c=i?t:e,u=c.indexOf(i?s:a);if(u<0||u+o.size>c.length)return!1;for(let t=0;t<o.size;t+=1){const e=i?c[u+t]:s,n=i?a:c[u+t];if("empty"!==l(e,n).status)return!1;r(e,n,"taken",o)}return!0},receiveAttack:(t,e)=>{const o=l(t,e);return"taken"===o.status?(o.takenBy.hit(),r(t,e,"hit"),o.status):"empty"===o.status?(r(t,e,"miss"),o.status):null},hitButNotSunk:t=>t.array.flat().some((t=>"hit"===t.status&&!1===t.takenBy.isSunk())),sinkShip:(t,e,o)=>{const l=t.getCell(e,o);if(l&&l.takenBy&&l.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===l.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((o=>{const l=String.fromCharCode(e.col.charCodeAt(0)+o.col),r=(Number(e.row)+o.row).toString();t.getCell(l,r)&&t.receiveAttack(l,r)}))}))}},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===o[t][e].status&&!o[t][e].takenBy.isSunk())return!1;return!0},array:o}},e=t=>{let e;return"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2),{name:t,size:e,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===e}}},o=()=>{const t=["A","B","C","D","E","F","G","H","I","J"];let e=null,o=null;let l=1,r=!0,s=!0;const a=(t,e,c,u)=>{if(console.log("start finishingAttack prevHit",u),console.log("start finishingAttack lastHit",{col:e,row:c}),u.row===c)if(r){l=1,console.log("goRight");let s=String.fromCharCode(e.charCodeAt(0)+l);for(;t.getCell(s,c)&&"hit"===t.getCell(s,c).status;)l+=1,s=String.fromCharCode(e.charCodeAt(0)+l);t.getCell(s,c)&&"hit"!==t.getCell(s,c).status&&"miss"!==t.getCell(s,c).status?(t.receiveAttack(s,c),"hit"===t.getCell(s,c).status&&(n(o),i({col:s,row:c})),console.log("prevHit",u),console.log("lastHit",o),console.log("range",l),console.log("---------------"),l+=1):(l=1,r=!1,a(t,s,c,u))}else{l=1,console.log("goLeft");let s=String.fromCharCode(e.charCodeAt(0)-l);for(;t.getCell(s,c)&&"hit"===t.getCell(s,c).status;)l+=1,s=String.fromCharCode(e.charCodeAt(0)-l);t.getCell(s,c)&&"hit"!==t.getCell(s,c).status&&"miss"!==t.getCell(s,c).status?(t.receiveAttack(s,c),"hit"===t.getCell(s,c).status&&(n(o),i({col:s,row:c})),console.log("prevHit",u),console.log("lastHit",o),console.log("range",l),console.log("---------------"),l+=1):(l=1,r=!0,a(t,s,c,u))}else if(u.col===e)if(s){l=1,console.log("goDown");let r=String.fromCharCode(c.charCodeAt(0)+l);for(;t.getCell(e,r)&&"hit"===t.getCell(e,r).status;)l+=1,r=String.fromCharCode(c.charCodeAt(0)+l);t.getCell(e,r)&&"hit"!==t.getCell(e,r).status&&"miss"!==t.getCell(e,r).status?(t.receiveAttack(e,r),"hit"===t.getCell(e,r).status&&(n(o),i({col:e,row:r})),console.log("prevHit",u),console.log("lastHit",o),console.log("range",l),console.log("---------------"),l+=1):(l=1,s=!1,a(t,e,r,u))}else{l=1,console.log("goUp");let r=String.fromCharCode(c.charCodeAt(0)-l);for(;t.getCell(e,r)&&"hit"===t.getCell(e,r).status;)l+=1,r=String.fromCharCode(c.charCodeAt(0)-l);t.getCell(e,r)&&"hit"!==t.getCell(e,r).status&&"miss"!==t.getCell(e,r).status?(t.receiveAttack(e,r),"hit"===t.getCell(e,r).status&&(n(o),i({col:e,row:r})),console.log("prevHit",u),console.log("lastHit",o),console.log("range",l),console.log("---------------"),l+=1):(l=1,s=!0,a(t,e,r,u))}},n=t=>{e=t},i=t=>{o=t};return{attack:(t,e,l)=>{if("hit"!==t.getCell(e,l).status&&"miss"!==t.getCell(e,l).status){let r=t.receiveAttack(e,l);return"hit"===r&&(n(o),i({col:e,row:l})),r}return"already shot"},randomAttack:r=>{let s,a;do{s=t[Math.floor(Math.random()*t.length)],a=Math.ceil(10*Math.random()).toString()}while("hit"===r.getCell(s,a).status||"miss"===r.getCell(s,a).status);if("hit"!==r.getCell(s,a).status&&"miss"!==r.getCell(s,a).status){const t=r.receiveAttack(s,a);return"hit"===r.getCell(s,a).status&&(n(o),i({col:s,row:a}),console.log("---------------"),console.log("randomAttack prevHit",e),console.log("randomAttack lastHit",o),console.log("randomAttack range",l)),{result:t,col:s,row:a}}return{result:"already shot",col:s,row:a}},followupAttack:(t,r,s)=>{const a=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((e=>{const o=String.fromCharCode(r.charCodeAt(0)+e.col),l=(Number(s)+e.row).toString(),a=t.getCell(o,l);return!(!a||"miss"===a.status||"hit"===a.status)}));if(a.length>0){const c=a[Math.floor(Math.random()*a.length)],u=String.fromCharCode(r.charCodeAt(0)+c.col),g=(Number(s)+c.row).toString();t.receiveAttack(u,g),l=1,"hit"===t.getCell(u,g).status&&(n(o),i({col:u,row:g}),console.log("---------------"),console.log("followupAttack prevHit",e),console.log("followupAttack lastHit",o),console.log("followupAttack range",l))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:a,prevHit:e,lastHit:o,getPrevHit:()=>e,getLastHit:()=>o,setPrevHit:n,setLastHit:i}};var l=function(t,e,o,l){return new(o||(o=Promise))((function(r,s){function a(t){try{i(l.next(t))}catch(t){s(t)}}function n(t){try{i(l.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,n)}i((l=l.apply(t,e||[])).next())}))};const r=(()=>{const t=document.querySelector("#wrapper"),e=document.createElement("div");e.id="boards",t.prepend(e);const o=document.querySelector("#playerVsComputer"),r=document.querySelector("#computerVsComputer"),s=document.querySelector("#newGame"),a=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const o=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(o)}))}))},i=t=>{if(!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}},c=(t,e)=>{e.classList.remove("selected"),t.classList.contains("selected")||(t.classList.add("selected"),n.restart())};return o.addEventListener("click",(()=>c(o,r))),r.addEventListener("click",(()=>c(r,o))),s.addEventListener("click",(()=>l(void 0,void 0,void 0,(function*(){s.disabled=!0,s.textContent="Restarting",yield n.newGame(),s.textContent="New Game",s.disabled=!1})))),{renderBoard:t=>{const o=document.createElement("div");o.classList.add("board"),t===n.humanGameboard?o.id="firstBoard":t===n.computerGameboard&&(o.id="secondBoard"),a(t,o),e.append(o)},refreshBoard:t=>{const e=t===n.humanGameboard?"firstBoard":"secondBoard",o=document.querySelector(`#${e}`);o.innerHTML="",a(t,o)},handleUserInput:()=>l(void 0,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(i(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}})),pVcBtn:o,cVcBtn:r}})(),s=r;var a=function(t,e,o,l){return new(o||(o=Promise))((function(r,s){function a(t){try{i(l.next(t))}catch(t){s(t)}}function n(t){try{i(l.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?r(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,n)}i((l=l.apply(t,e||[])).next())}))};const n=(()=>{const l=t(),r=t(),n=o(),i=o();let c=!1;const u=()=>{const t=e("Carrier"),o=e("Battleship"),s=e("Destroyer"),a=e("Submarine"),n=e("Patrol Boat"),i=e("Carrier"),c=e("Battleship"),u=e("Destroyer"),g=e("Submarine"),d=e("Patrol Boat");l.placeShip(t,"A","1","horizontal"),l.placeShip(o,"A","3","horizontal"),l.placeShip(s,"A","5","horizontal"),l.placeShip(a,"A","7","horizontal"),l.placeShip(n,"A","9","horizontal"),r.placeShip(i,"A","1","vertical"),r.placeShip(c,"C","1","vertical"),r.placeShip(u,"E","1","vertical"),r.placeShip(g,"G","1","vertical"),r.placeShip(d,"I","1","vertical")},g=()=>r.allSunk()?(console.log("All computer ships are sunk. Human player won!"),!0):!!l.allSunk()&&(console.log("All human ships are sunk. Computer player won!"),!0),d=t=>{let e;if(t===l?e=i:t===r&&(e=n),console.log("start computerAI",e.getPrevHit()),t.hitButNotSunk(t)){if(null!==e.getPrevHit()&&null!==e.getLastHit()&&t.getCell(e.getLastHit().col,e.getLastHit().row).takenBy.hitCount>=2&&t.getCell(e.getLastHit().col,e.getLastHit().row).takenBy.hitCount<=4){if(console.log("FINISH: >= 2 trafienia w statek",e.getPrevHit()),e.finishingAttack(t,e.getLastHit().col,e.getLastHit().row,e.getPrevHit()),t.sinkShip(t,e.getLastHit().col,e.getLastHit().row),g())return}else if(1===t.getCell(e.getLastHit().col,e.getLastHit().row).takenBy.hitCount&&(e.followupAttack(t,e.getLastHit().col,e.getLastHit().row),t.sinkShip(t,e.getLastHit().col,e.getLastHit().row),g()))return}else{const{col:o,row:l}=e.randomAttack(t);if("hit"===t.getCell(o,l).status?(console.log("Cell hit, assigning new values to prevHit and lastHit"),e.setPrevHit(e.getLastHit()),e.setLastHit({col:o,row:l}),console.log("New value of prevHit:",e.getPrevHit())):console.log("Cell not hit, prevHit remains:",e.getPrevHit()),"hit"===t.getCell(o,l).status&&t.getCell(o,l).takenBy.isSunk()&&(t.sinkShip(t,o,l),e.setPrevHit(null),e.setLastHit(null),g()))return}},h=()=>(console.log("start pickGameMode",i.getPrevHit()),s.pVcBtn.classList.contains("selected")?a(void 0,void 0,void 0,(function*(){console.log("start playerVsComputerMode",i.getPrevHit());let t=!0;for(;!g()&&!c;){if(t){const{col:e,row:o}=yield s.handleUserInput();n.attack(r,e,o),r.sinkShip(r,e,o),s.refreshBoard(r),t=!1}if(!t){if(yield new Promise((t=>setTimeout(t,100))),!s.pVcBtn.classList.contains("selected")||c)break;console.log("before computerAI",i.getPrevHit()),d(l),s.refreshBoard(l),t=!0}}c=!1})):s.cVcBtn.classList.contains("selected")?a(void 0,void 0,void 0,(function*(){let t=!0;for(;!g()&&!c;){if(t){if(yield new Promise((t=>setTimeout(t,500))),!s.cVcBtn.classList.contains("selected")||c)break;d(l),s.refreshBoard(l),t=!1}if(!t){if(yield new Promise((t=>setTimeout(t,500))),!s.cVcBtn.classList.contains("selected")||c)break;d(r),s.refreshBoard(r),t=!0}}c=!1})):void 0),f=()=>{i.setPrevHit(null),i.setLastHit(null),l.clearBoard(),r.clearBoard(),u(),s.refreshBoard(l),s.refreshBoard(r),h()};return{start:()=>{u(),s.renderBoard(l),s.renderBoard(r),console.log("before pickGameMode",i.getPrevHit()),h()},humanGameboard:l,computerGameboard:r,restart:f,newGame:()=>a(void 0,void 0,void 0,(function*(){c=!0,yield new Promise((t=>setTimeout(t,1e3))),c=!1,f()}))}})();n.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNOLElBQUl4RCxTQUFTQyxHQUFZdUUsV0FBV3ZFLEVBQVMsT0FDbkR1RCxHQUFZLEVBQ1psQixHQUNKLElBRUgsRUFuTGtCLEdDVm5CLEVBQVdwRyxPIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2dhbWVib2FyZC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvcGxheWVyLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy91aS50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvY29udHJvbGxlci50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGdhbWVib2FyZEZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3QgY29scyA9IFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSiddO1xuICAgIGNvbnN0IHJvd3MgPSBbJzEnLCAnMicsICczJywgJzQnLCAnNScsICc2JywgJzcnLCAnOCcsICc5JywgJzEwJ107XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBjb25zdCBnZW5lcmF0ZUFycmF5ID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGFycmF5W2ldID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXVtqXSA9IHsgY29sOiBjb2xzW2pdLCByb3c6IHJvd3NbaV0sIHN0YXR1czogJ2VtcHR5JywgdGFrZW5CeTogdW5kZWZpbmVkIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGNsZWFyQm9hcmQgPSAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV1bal0uc3RhdHVzID0gJ2VtcHR5JztcbiAgICAgICAgICAgICAgICBhcnJheVtpXVtqXS50YWtlbkJ5ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBnZXRDZWxsID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4ID0gY29scy5pbmRleE9mKGNvbCk7XG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcm93cy5pbmRleE9mKHJvdyk7XG4gICAgICAgIGlmIChjb2xJbmRleCA9PT0gLTEgfHwgcm93SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXlbcm93SW5kZXhdW2NvbEluZGV4XTtcbiAgICB9O1xuICAgIGNvbnN0IHNldENlbGwgPSAoY29sLCByb3csIG5ld1N0YXR1cywgbmV3VGFrZW5CeSkgPT4ge1xuICAgICAgICBjb25zdCBjb2xJbmRleCA9IGNvbHMuaW5kZXhPZihjb2wpO1xuICAgICAgICBjb25zdCByb3dJbmRleCA9IHJvd3MuaW5kZXhPZihyb3cpO1xuICAgICAgICBpZiAoY29sSW5kZXggPT09IC0xIHx8IHJvd0luZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYXJyYXlbcm93SW5kZXhdW2NvbEluZGV4XS5zdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgIGlmIChuZXdUYWtlbkJ5KSB7XG4gICAgICAgICAgICBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdLnRha2VuQnkgPSBuZXdUYWtlbkJ5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdO1xuICAgIH07XG4gICAgY29uc3QgcGxhY2VTaGlwID0gKHNoaXAsIGNvbCwgcm93LCBvcmllbnRhdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICBjb25zdCBjZWxscyA9IGlzSG9yaXpvbnRhbCA/IGNvbHMgOiByb3dzO1xuICAgICAgICBjb25zdCBzdGFydCA9IGNlbGxzLmluZGV4T2YoaXNIb3Jpem9udGFsID8gY29sIDogcm93KTtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCArIHNoaXAuc2l6ZSA+IGNlbGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcC5zaXplOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb2wgPSBpc0hvcml6b250YWwgPyBjZWxsc1tzdGFydCArIGldIDogY29sO1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFJvdyA9IGlzSG9yaXpvbnRhbCA/IHJvdyA6IGNlbGxzW3N0YXJ0ICsgaV07XG4gICAgICAgICAgICBpZiAoZ2V0Q2VsbChjdXJyZW50Q29sLCBjdXJyZW50Um93KS5zdGF0dXMgIT09ICdlbXB0eScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3csICd0YWtlbicsIHNoaXApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChjb2wsIHJvdykgPT4ge1xuICAgICAgICBjb25zdCBjZWxsID0gZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ3Rha2VuJykge1xuICAgICAgICAgICAgY2VsbC50YWtlbkJ5LmhpdCgpO1xuICAgICAgICAgICAgc2V0Q2VsbChjb2wsIHJvdywgJ2hpdCcpO1xuICAgICAgICAgICAgcmV0dXJuIGNlbGwuc3RhdHVzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgc2V0Q2VsbChjb2wsIHJvdywgJ21pc3MnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IGhpdEJ1dE5vdFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgcmV0dXJuIGdhbWVib2FyZENlbGxzLnNvbWUoKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ2hpdCcgJiYgY2VsbC50YWtlbkJ5LmlzU3VuaygpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNpbmtTaGlwID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50YWtlbkJ5ICYmIGNlbGwudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGFsbFN1bmsgPSAoKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkgKz0gMSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFycmF5W2ldW2pdLnN0YXR1cyA9PT0gJ3Rha2VuJyAmJiAhYXJyYXlbaV1bal0udGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgZ2VuZXJhdGVBcnJheSgpO1xuICAgIHJldHVybiB7IGNsZWFyQm9hcmQsIGdldENlbGwsIHNldENlbGwsIHBsYWNlU2hpcCwgcmVjZWl2ZUF0dGFjaywgaGl0QnV0Tm90U3Vuaywgc2lua1NoaXAsIGFsbFN1bmssIGFycmF5IH07XG59O1xuZXhwb3J0IGRlZmF1bHQgZ2FtZWJvYXJkRmFjdG9yeTtcbiIsImNvbnN0IHNoaXBGYWN0b3J5ID0gKG5hbWUpID0+IHtcbiAgICBsZXQgc2l6ZTtcbiAgICBpZiAobmFtZSA9PT0gJ0NhcnJpZXInKSB7XG4gICAgICAgIHNpemUgPSA1O1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ0JhdHRsZXNoaXAnKSB7XG4gICAgICAgIHNpemUgPSA0O1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ0Rlc3Ryb3llcicpIHtcbiAgICAgICAgc2l6ZSA9IDM7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnU3VibWFyaW5lJykge1xuICAgICAgICBzaXplID0gMztcbiAgICB9XG4gICAgaWYgKG5hbWUgPT09ICdQYXRyb2wgQm9hdCcpIHtcbiAgICAgICAgc2l6ZSA9IDI7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIG5hbWUsXG4gICAgICAgIHNpemUsXG4gICAgICAgIGhpdENvdW50OiAwLFxuICAgICAgICBpc1ZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgcm90YXRlKCkge1xuICAgICAgICAgICAgdGhpcy5pc1ZlcnRpY2FsID0gIXRoaXMuaXNWZXJ0aWNhbDtcbiAgICAgICAgfSxcbiAgICAgICAgaGl0KCkge1xuICAgICAgICAgICAgdGhpcy5oaXRDb3VudCArPSAxO1xuICAgICAgICB9LFxuICAgICAgICBpc1N1bmsoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5oaXRDb3VudCA9PT0gc2l6ZTtcbiAgICAgICAgfSxcbiAgICB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IHNoaXBGYWN0b3J5O1xuIiwiY29uc3QgcGxheWVyRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBjb2xzID0gWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJ107XG4gICAgbGV0IHByZXZIaXQgPSBudWxsO1xuICAgIGxldCBsYXN0SGl0ID0gbnVsbDtcbiAgICBjb25zdCBhdHRhY2sgPSAoZ2FtZWJvYXJkLCBjb2wsIHJvdykgPT4ge1xuICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnN0YXR1cyAhPT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnN0YXR1cyAhPT0gJ21pc3MnKSB7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2soY29sLCByb3cpO1xuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICBzZXRQcmV2SGl0KGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiByb3cgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnYWxyZWFkeSBzaG90JztcbiAgICB9O1xuICAgIGNvbnN0IHJhbmRvbUF0dGFjayA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgbGV0IHJhbmRvbUNvbDtcbiAgICAgICAgbGV0IHJhbmRvbVJvdztcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgcmFuZG9tQ29sID0gY29sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xzLmxlbmd0aCldO1xuICAgICAgICAgICAgcmFuZG9tUm93ID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkgKiAxMCkudG9TdHJpbmcoKTtcbiAgICAgICAgfSB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwocmFuZG9tQ29sLCByYW5kb21Sb3cpLnN0YXR1cyA9PT0gJ2hpdCcgfHwgZ2FtZWJvYXJkLmdldENlbGwocmFuZG9tQ29sLCByYW5kb21Sb3cpLnN0YXR1cyA9PT0gJ21pc3MnKTtcbiAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2socmFuZG9tQ29sLCByYW5kb21Sb3cpO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmFuZG9tQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmFuZG9tQXR0YWNrIGxhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncmFuZG9tQXR0YWNrIHJhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgcmVzdWx0LCBjb2w6IHJhbmRvbUNvbCwgcm93OiByYW5kb21Sb3cgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyByZXN1bHQ6ICdhbHJlYWR5IHNob3QnLCBjb2w6IHJhbmRvbUNvbCwgcm93OiByYW5kb21Sb3cgfTtcbiAgICB9O1xuICAgIGNvbnN0IGZvbGxvd3VwQXR0YWNrID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9ucyA9IFtcbiAgICAgICAgICAgIHsgY29sOiAwLCByb3c6IC0xIH0sXG4gICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICB7IGNvbDogLTEsIHJvdzogMCB9LFxuICAgICAgICAgICAgeyBjb2w6IDEsIHJvdzogMCB9LFxuICAgICAgICBdO1xuICAgICAgICBjb25zdCB2YWxpZERpcmVjdGlvbnMgPSBkaXJlY3Rpb25zLmZpbHRlcigoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgZGlyZWN0aW9uLmNvbCk7XG4gICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyBkaXJlY3Rpb24ucm93KS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgIGlmIChjZWxsICYmIGNlbGwuc3RhdHVzICE9PSAnbWlzcycgJiYgY2VsbC5zdGF0dXMgIT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodmFsaWREaXJlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbURpcmVjdGlvbiA9IHZhbGlkRGlyZWN0aW9uc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB2YWxpZERpcmVjdGlvbnMubGVuZ3RoKV07XG4gICAgICAgICAgICBjb25zdCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgcmFuZG9tRGlyZWN0aW9uLmNvbCk7XG4gICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyByYW5kb21EaXJlY3Rpb24ucm93KS50b1N0cmluZygpO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCBuZXdSb3cpO1xuICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogbmV3Um93IH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZm9sbG93dXBBdHRhY2sgcHJldkhpdCcsIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmb2xsb3d1cEF0dGFjayBsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvbGxvd3VwQXR0YWNrIHJhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ05pZSBtYSBkb3N0xJlwbnljaCBraWVydW5rw7N3IGRvIGF0YWt1Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCByYW5nZSA9IDE7XG4gICAgbGV0IGdvUmlnaHQgPSB0cnVlO1xuICAgIGxldCBnb0Rvd24gPSB0cnVlO1xuICAgIGNvbnN0IGZpbmlzaGluZ0F0dGFjayA9IChnYW1lYm9hcmQsIGNvbCwgcm93LCBwcmV2SGl0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCBmaW5pc2hpbmdBdHRhY2sgcHJldkhpdCcsIHByZXZIaXQpO1xuICAgICAgICBjb25zb2xlLmxvZygnc3RhcnQgZmluaXNoaW5nQXR0YWNrIGxhc3RIaXQnLCB7IGNvbCwgcm93IH0pO1xuICAgICAgICBpZiAocHJldkhpdC5yb3cgPT09IHJvdykge1xuICAgICAgICAgICAgLy8gaG9yaXpvbnRhbCBzaGlwIGNhc2VcbiAgICAgICAgICAgIGlmIChnb1JpZ2h0KSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnb1JpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29sLmNoYXJDb2RlQXQoMCkgKyByYW5nZSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhuZXdDb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IG5ld0NvbCwgcm93OiByb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvUmlnaHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgbmV3Q29sLCByb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ29MZWZ0Jyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29sLmNoYXJDb2RlQXQoMCkgLSByYW5nZSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhuZXdDb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IG5ld0NvbCwgcm93OiByb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvUmlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBuZXdDb2wsIHJvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHByZXZIaXQuY29sID09PSBjb2wpIHtcbiAgICAgICAgICAgIC8vIHZlcnRpY2FsIHNoaXAgY2FzZVxuICAgICAgICAgICAgaWYgKGdvRG93bikge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ29Eb3duJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1JvdyA9IFN0cmluZy5mcm9tQ2hhckNvZGUocm93LmNoYXJDb2RlQXQoMCkgKyByYW5nZSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBuZXdSb3cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJvdy5jaGFyQ29kZUF0KDApICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBjb2wsIG5ld1JvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnb1VwJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1JvdyA9IFN0cmluZy5mcm9tQ2hhckNvZGUocm93LmNoYXJDb2RlQXQoMCkgLSByYW5nZSk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgICAgICBuZXdSb3cgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHJvdy5jaGFyQ29kZUF0KDApIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIGNvbCwgbmV3Um93LCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGdldFByZXZIaXQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwcmV2SGl0O1xuICAgIH07XG4gICAgY29uc3QgZ2V0TGFzdEhpdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGxhc3RIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRQcmV2SGl0ID0gKG5ld1ByZXZIaXQpID0+IHtcbiAgICAgICAgcHJldkhpdCA9IG5ld1ByZXZIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBzZXRMYXN0SGl0ID0gKG5ld0xhc3RIaXQpID0+IHtcbiAgICAgICAgbGFzdEhpdCA9IG5ld0xhc3RIaXQ7XG4gICAgfTtcbiAgICByZXR1cm4geyBhdHRhY2ssIHJhbmRvbUF0dGFjaywgZm9sbG93dXBBdHRhY2ssIGZpbmlzaGluZ0F0dGFjaywgcHJldkhpdCwgbGFzdEhpdCwgZ2V0UHJldkhpdCwgZ2V0TGFzdEhpdCwgc2V0UHJldkhpdCwgc2V0TGFzdEhpdCB9O1xufTtcbmV4cG9ydCBkZWZhdWx0IHBsYXllckZhY3Rvcnk7XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5jb25zdCB1aSA9ICgoKSA9PiB7XG4gICAgY29uc3Qgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyN3cmFwcGVyJyk7XG4gICAgY29uc3QgYm9hcmRzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgYm9hcmRzLmlkID0gJ2JvYXJkcyc7XG4gICAgd3JhcHBlci5wcmVwZW5kKGJvYXJkcyk7XG4gICAgY29uc3QgcFZjQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllclZzQ29tcHV0ZXInKTtcbiAgICBjb25zdCBjVmNCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29tcHV0ZXJWc0NvbXB1dGVyJyk7XG4gICAgY29uc3QgbmV3R2FtZUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXdHYW1lJyk7XG4gICAgY29uc3QgY3JlYXRlQ2VsbCA9IChjb2wpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ2NlbGwnKTtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKGNvbC5zdGF0dXMpO1xuICAgICAgICBjZWxsLnNldEF0dHJpYnV0ZSgnZGF0YS1jb2wnLCBjb2wuY29sKTtcbiAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcm93JywgY29sLnJvdyk7XG4gICAgICAgIHJldHVybiBjZWxsO1xuICAgIH07XG4gICAgY29uc3QgcmVuZGVyQ2VsbHMgPSAoZ2FtZWJvYXJkLCBib2FyZCkgPT4ge1xuICAgICAgICBnYW1lYm9hcmQuYXJyYXkuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgICByb3cuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNyZWF0ZUNlbGwoY29sKTtcbiAgICAgICAgICAgICAgICBib2FyZC5hcHBlbmQoY2VsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJCb2FyZCA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm9hcmQuY2xhc3NMaXN0LmFkZCgnYm9hcmQnKTtcbiAgICAgICAgaWYgKGdhbWVib2FyZCA9PT0gY29udHJvbGxlci5odW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgYm9hcmQuaWQgPSAnZmlyc3RCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZC5pZCA9ICdzZWNvbmRCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyQ2VsbHMoZ2FtZWJvYXJkLCBib2FyZCk7XG4gICAgICAgIGJvYXJkcy5hcHBlbmQoYm9hcmQpO1xuICAgIH07XG4gICAgY29uc3QgcmVmcmVzaEJvYXJkID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBib2FyZElkID0gZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmh1bWFuR2FtZWJvYXJkID8gJ2ZpcnN0Qm9hcmQnIDogJ3NlY29uZEJvYXJkJztcbiAgICAgICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtib2FyZElkfWApO1xuICAgICAgICBib2FyZC5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgcmVuZGVyQ2VsbHMoZ2FtZWJvYXJkLCBib2FyZCk7XG4gICAgfTtcbiAgICBjb25zdCBnZXRVc2VySW5wdXQgPSAoZSkgPT4ge1xuICAgICAgICBpZiAoIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaGl0JykgJiYgIWUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnbWlzcycpKSB7XG4gICAgICAgICAgICBjb25zdCBjb2wgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29sJyk7XG4gICAgICAgICAgICBjb25zdCByb3cgPSBlLnRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtcm93Jyk7XG4gICAgICAgICAgICByZXR1cm4geyBjb2wsIHJvdyB9O1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBoYW5kbGVVc2VySW5wdXQgPSAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgY29uc3QgY2VsbHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjc2Vjb25kQm9hcmQgLmNlbGwnKTtcbiAgICAgICAgbGV0IHVzZXJJbnB1dDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgdXNlcklucHV0ID0geWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpdCcpICYmICFjZWxsLmNsYXNzTGlzdC5jb250YWlucygnbWlzcycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGdldFVzZXJJbnB1dChlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB7IG9uY2U6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IHdoaWxlICghdXNlcklucHV0KTtcbiAgICAgICAgY29uc3QgY29sID0gdXNlcklucHV0LmNvbC50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByb3cgPSB1c2VySW5wdXQucm93LnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiB7IGNvbCwgcm93IH07XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlTmV3R2FtZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBuZXdHYW1lQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgbmV3R2FtZUJ0bi50ZXh0Q29udGVudCA9ICdSZXN0YXJ0aW5nJztcbiAgICAgICAgeWllbGQgY29udHJvbGxlci5uZXdHYW1lKCk7XG4gICAgICAgIG5ld0dhbWVCdG4udGV4dENvbnRlbnQgPSAnTmV3IEdhbWUnO1xuICAgICAgICBuZXdHYW1lQnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlR2FtZU1vZGUgPSAoc2VsZWN0ZWRFbGVtZW50LCBkZXNlbGVjdGVkRWxlbWVudCkgPT4ge1xuICAgICAgICBkZXNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgICBpZiAoIXNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgY29udHJvbGxlci5yZXN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHBWY0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGhhbmRsZUdhbWVNb2RlKHBWY0J0biwgY1ZjQnRuKSk7XG4gICAgY1ZjQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gaGFuZGxlR2FtZU1vZGUoY1ZjQnRuLCBwVmNCdG4pKTtcbiAgICBuZXdHYW1lQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGFuZGxlTmV3R2FtZSk7XG4gICAgcmV0dXJuIHsgcmVuZGVyQm9hcmQsIHJlZnJlc2hCb2FyZCwgaGFuZGxlVXNlcklucHV0LCBwVmNCdG4sIGNWY0J0biB9O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IHVpO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgZ2FtZWJvYXJkRmFjdG9yeSBmcm9tICcuL2dhbWVib2FyZCc7XG5pbXBvcnQgc2hpcEZhY3RvcnkgZnJvbSAnLi9zaGlwJztcbmltcG9ydCBwbGF5ZXJGYWN0b3J5IGZyb20gJy4vcGxheWVyJztcbmltcG9ydCB1aSBmcm9tICcuL3VpJztcbmNvbnN0IGNvbnRyb2xsZXIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IGh1bWFuR2FtZWJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICAgIGNvbnN0IGNvbXB1dGVyR2FtZWJvYXJkID0gZ2FtZWJvYXJkRmFjdG9yeSgpO1xuICAgIGNvbnN0IGh1bWFuID0gcGxheWVyRmFjdG9yeSgpO1xuICAgIGNvbnN0IGNvbXB1dGVyID0gcGxheWVyRmFjdG9yeSgpO1xuICAgIGxldCBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICBjb25zdCBwb3B1bGF0ZUdhbWVib2FyZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaHVtYW5DYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICAgICAgY29uc3QgaHVtYW5CYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICAgICAgY29uc3QgaHVtYW5EZXN0cm95ZXIgPSBzaGlwRmFjdG9yeSgnRGVzdHJveWVyJyk7XG4gICAgICAgIGNvbnN0IGh1bWFuU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgICAgICBjb25zdCBodW1hblBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sIEJvYXQnKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZXJDYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZXJCYXR0bGVzaGlwID0gc2hpcEZhY3RvcnkoJ0JhdHRsZXNoaXAnKTtcbiAgICAgICAgY29uc3QgY29tcHV0ZXJEZXN0cm95ZXIgPSBzaGlwRmFjdG9yeSgnRGVzdHJveWVyJyk7XG4gICAgICAgIGNvbnN0IGNvbXB1dGVyU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgICAgICBjb25zdCBjb21wdXRlclBhdHJvbGJvYXQgPSBzaGlwRmFjdG9yeSgnUGF0cm9sIEJvYXQnKTtcbiAgICAgICAgaHVtYW5HYW1lYm9hcmQucGxhY2VTaGlwKGh1bWFuQ2FycmllciwgJ0EnLCAnMScsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGh1bWFuR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hbkJhdHRsZXNoaXAsICdBJywgJzMnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBodW1hbkdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5EZXN0cm95ZXIsICdBJywgJzUnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBodW1hbkdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5TdWJtYXJpbmUsICdBJywgJzcnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBodW1hbkdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5QYXRyb2xib2F0LCAnQScsICc5JywgJ2hvcml6b250YWwnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKGNvbXB1dGVyQ2FycmllciwgJ0EnLCAnMScsICd2ZXJ0aWNhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoY29tcHV0ZXJCYXR0bGVzaGlwLCAnQycsICcxJywgJ3ZlcnRpY2FsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChjb21wdXRlckRlc3Ryb3llciwgJ0UnLCAnMScsICd2ZXJ0aWNhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoY29tcHV0ZXJTdWJtYXJpbmUsICdHJywgJzEnLCAndmVydGljYWwnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKGNvbXB1dGVyUGF0cm9sYm9hdCwgJ0knLCAnMScsICd2ZXJ0aWNhbCcpO1xuICAgICAgICAvLyBodW1hbkdhbWVib2FyZC5hcnJheS5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgICAgLy8gXHRyb3cuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAvLyBcdFx0aWYgKGNlbGwuc3RhdHVzID09PSAnZW1wdHknKSB7XG4gICAgICAgIC8vIFx0XHRcdGNvbXB1dGVyLmF0dGFjayhodW1hbkdhbWVib2FyZCwgY2VsbC5jb2wsIGNlbGwucm93KTtcbiAgICAgICAgLy8gXHRcdH1cbiAgICAgICAgLy8gXHR9KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICAgIC8vIGNvbXB1dGVyLmF0dGFjayhodW1hbkdhbWVib2FyZCwgJ0QnLCAnMScpO1xuICAgICAgICAvLyBjb21wdXRlci5hdHRhY2soaHVtYW5HYW1lYm9hcmQsICdFJywgJzEnKTtcbiAgICB9O1xuICAgIGNvbnN0IGlzR2FtZU92ZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb21wdXRlckdhbWVib2FyZC5hbGxTdW5rKCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdBbGwgY29tcHV0ZXIgc2hpcHMgYXJlIHN1bmsuIEh1bWFuIHBsYXllciB3b24hJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHVtYW5HYW1lYm9hcmQuYWxsU3VuaygpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQWxsIGh1bWFuIHNoaXBzIGFyZSBzdW5rLiBDb21wdXRlciBwbGF5ZXIgd29uIScpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG4gICAgY29uc3QgY29tcHV0ZXJBSSA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgbGV0IHBsYXllcjtcbiAgICAgICAgaWYgKGdhbWVib2FyZCA9PT0gaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIHBsYXllciA9IGNvbXB1dGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZCA9PT0gY29tcHV0ZXJHYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIHBsYXllciA9IGh1bWFuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCBjb21wdXRlckFJJywgcGxheWVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuaGl0QnV0Tm90U3VuayhnYW1lYm9hcmQpKSB7XG4gICAgICAgICAgICBpZiAocGxheWVyLmdldFByZXZIaXQoKSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIHBsYXllci5nZXRMYXN0SGl0KCkgIT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQuZ2V0Q2VsbChwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpLnRha2VuQnkuaGl0Q291bnQgPj0gMiAmJlxuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5nZXRDZWxsKHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdykudGFrZW5CeS5oaXRDb3VudCA8PSA0KSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0ZJTklTSDogPj0gMiB0cmFmaWVuaWEgdyBzdGF0ZWsnLCBwbGF5ZXIuZ2V0UHJldkhpdCgpKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgcGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93LCBwbGF5ZXIuZ2V0UHJldkhpdCgpKTtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQuc2lua1NoaXAoZ2FtZWJvYXJkLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpO1xuICAgICAgICAgICAgICAgIGlmIChpc0dhbWVPdmVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZC5nZXRDZWxsKHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdykudGFrZW5CeS5oaXRDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHBsYXllci5mb2xsb3d1cEF0dGFjayhnYW1lYm9hcmQsIHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdyk7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnNpbmtTaGlwKGdhbWVib2FyZCwgcGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB7IGNvbCwgcm93IH0gPSBwbGF5ZXIucmFuZG9tQXR0YWNrKGdhbWVib2FyZCk7XG4gICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ2VsbCBoaXQsIGFzc2lnbmluZyBuZXcgdmFsdWVzIHRvIHByZXZIaXQgYW5kIGxhc3RIaXQnKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UHJldkhpdChwbGF5ZXIuZ2V0TGFzdEhpdCgpKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0TGFzdEhpdCh7IGNvbCwgcm93IH0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOZXcgdmFsdWUgb2YgcHJldkhpdDonLCBwbGF5ZXIuZ2V0UHJldkhpdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDZWxsIG5vdCBoaXQsIHByZXZIaXQgcmVtYWluczonLCBwbGF5ZXIuZ2V0UHJldkhpdCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykuc3RhdHVzID09PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5zaW5rU2hpcChnYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UHJldkhpdChudWxsKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0TGFzdEhpdChudWxsKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHBsYXllclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzdGFydCBwbGF5ZXJWc0NvbXB1dGVyTW9kZScsIGNvbXB1dGVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgIGxldCBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICB3aGlsZSAoIWlzR2FtZU92ZXIoKSAmJiAhaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBjb2wsIHJvdyB9ID0geWllbGQgdWkuaGFuZGxlVXNlcklucHV0KCk7XG4gICAgICAgICAgICAgICAgaHVtYW4uYXR0YWNrKGNvbXB1dGVyR2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQuc2lua1NoaXAoY29tcHV0ZXJHYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICB1aS5yZWZyZXNoQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDApKTtcbiAgICAgICAgICAgICAgICBpZiAoIXVpLnBWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYmVmb3JlIGNvbXB1dGVyQUknLCBjb21wdXRlci5nZXRQcmV2SGl0KCkpO1xuICAgICAgICAgICAgICAgIGNvbXB1dGVyQUkoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICB9KTtcbiAgICBjb25zdCBjb21wdXRlclZzQ29tcHV0ZXJNb2RlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGxldCBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICB3aGlsZSAoIWlzR2FtZU92ZXIoKSAmJiAhaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7XG4gICAgICAgICAgICAgICAgaWYgKCF1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcHV0ZXJBSShodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBpc1BsYXllclR1cm4gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTAwKSk7XG4gICAgICAgICAgICAgICAgaWYgKCF1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29tcHV0ZXJBSShjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICBpc1BsYXllclR1cm4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgIH0pO1xuICAgIGNvbnN0IHBpY2tHYW1lTW9kZSA9ICgpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3N0YXJ0IHBpY2tHYW1lTW9kZScsIGNvbXB1dGVyLmdldFByZXZIaXQoKSk7XG4gICAgICAgIGlmICh1aS5wVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGxheWVyVnNDb21wdXRlck1vZGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcHV0ZXJWc0NvbXB1dGVyTW9kZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICAgICAgcG9wdWxhdGVHYW1lYm9hcmQoKTtcbiAgICAgICAgdWkucmVuZGVyQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZW5kZXJCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdiZWZvcmUgcGlja0dhbWVNb2RlJywgY29tcHV0ZXIuZ2V0UHJldkhpdCgpKTtcbiAgICAgICAgcGlja0dhbWVNb2RlKCk7XG4gICAgfTtcbiAgICBjb25zdCByZXN0YXJ0ID0gKCkgPT4ge1xuICAgICAgICBjb21wdXRlci5zZXRQcmV2SGl0KG51bGwpO1xuICAgICAgICBjb21wdXRlci5zZXRMYXN0SGl0KG51bGwpO1xuICAgICAgICBodW1hbkdhbWVib2FyZC5jbGVhckJvYXJkKCk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgcG9wdWxhdGVHYW1lYm9hcmQoKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgcGlja0dhbWVNb2RlKCk7XG4gICAgfTtcbiAgICBjb25zdCBuZXdHYW1lID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHJlc3RhcnQoKTtcbiAgICB9KTtcbiAgICByZXR1cm4geyBzdGFydCwgaHVtYW5HYW1lYm9hcmQsIGNvbXB1dGVyR2FtZWJvYXJkLCByZXN0YXJ0LCBuZXdHYW1lIH07XG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgY29udHJvbGxlcjtcbiIsImltcG9ydCAnbm9ybWFsaXplLmNzcyc7XG5pbXBvcnQgJy4vc3R5bGUvc3R5bGUuY3NzJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vbW9kdWxlcy9jb250cm9sbGVyJztcbmNvbnRyb2xsZXIuc3RhcnQoKTtcbiJdLCJuYW1lcyI6WyJjb2xzIiwicm93cyIsImFycmF5IiwiZ2V0Q2VsbCIsImNvbCIsInJvdyIsImNvbEluZGV4IiwiaW5kZXhPZiIsInJvd0luZGV4Iiwic2V0Q2VsbCIsIm5ld1N0YXR1cyIsIm5ld1Rha2VuQnkiLCJzdGF0dXMiLCJ0YWtlbkJ5IiwiaSIsImoiLCJ1bmRlZmluZWQiLCJnZW5lcmF0ZUFycmF5IiwiY2xlYXJCb2FyZCIsInBsYWNlU2hpcCIsInNoaXAiLCJvcmllbnRhdGlvbiIsImlzSG9yaXpvbnRhbCIsImNlbGxzIiwic3RhcnQiLCJzaXplIiwibGVuZ3RoIiwiY3VycmVudENvbCIsImN1cnJlbnRSb3ciLCJyZWNlaXZlQXR0YWNrIiwiY2VsbCIsImhpdCIsImhpdEJ1dE5vdFN1bmsiLCJnYW1lYm9hcmQiLCJmbGF0Iiwic29tZSIsImlzU3VuayIsInNpbmtTaGlwIiwiZmlsdGVyIiwiYyIsIm5hbWUiLCJmb3JFYWNoIiwiZGlyZWN0aW9uIiwibmV3Q29sIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiY2hhckNvZGVBdCIsIm5ld1JvdyIsIk51bWJlciIsInRvU3RyaW5nIiwiYWxsU3VuayIsImhpdENvdW50IiwiaXNWZXJ0aWNhbCIsInJvdGF0ZSIsInRoaXMiLCJwcmV2SGl0IiwibGFzdEhpdCIsInJhbmdlIiwiZ29SaWdodCIsImdvRG93biIsImZpbmlzaGluZ0F0dGFjayIsImNvbnNvbGUiLCJsb2ciLCJzZXRQcmV2SGl0Iiwic2V0TGFzdEhpdCIsIm5ld1ByZXZIaXQiLCJuZXdMYXN0SGl0IiwiYXR0YWNrIiwicmVzdWx0IiwicmFuZG9tQXR0YWNrIiwicmFuZG9tQ29sIiwicmFuZG9tUm93IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2VpbCIsImZvbGxvd3VwQXR0YWNrIiwidmFsaWREaXJlY3Rpb25zIiwicmFuZG9tRGlyZWN0aW9uIiwiZ2V0UHJldkhpdCIsImdldExhc3RIaXQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwidWkiLCJ3cmFwcGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYm9hcmRzIiwiY3JlYXRlRWxlbWVudCIsImlkIiwicHJlcGVuZCIsInBWY0J0biIsImNWY0J0biIsIm5ld0dhbWVCdG4iLCJyZW5kZXJDZWxscyIsImJvYXJkIiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlQ2VsbCIsImFwcGVuZCIsImdldFVzZXJJbnB1dCIsInRhcmdldCIsImNvbnRhaW5zIiwiZ2V0QXR0cmlidXRlIiwiaGFuZGxlR2FtZU1vZGUiLCJzZWxlY3RlZEVsZW1lbnQiLCJkZXNlbGVjdGVkRWxlbWVudCIsInJlbW92ZSIsInJlc3RhcnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZGlzYWJsZWQiLCJ0ZXh0Q29udGVudCIsIm5ld0dhbWUiLCJyZW5kZXJCb2FyZCIsImh1bWFuR2FtZWJvYXJkIiwiY29tcHV0ZXJHYW1lYm9hcmQiLCJyZWZyZXNoQm9hcmQiLCJib2FyZElkIiwiaW5uZXJIVE1MIiwiaGFuZGxlVXNlcklucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsInVzZXJJbnB1dCIsIm9uY2UiLCJodW1hbiIsInBsYXllciIsImNvbXB1dGVyIiwiaXNTdG9wcGVkIiwicG9wdWxhdGVHYW1lYm9hcmQiLCJodW1hbkNhcnJpZXIiLCJodW1hbkJhdHRsZXNoaXAiLCJodW1hbkRlc3Ryb3llciIsImh1bWFuU3VibWFyaW5lIiwiaHVtYW5QYXRyb2xib2F0IiwiY29tcHV0ZXJDYXJyaWVyIiwiY29tcHV0ZXJCYXR0bGVzaGlwIiwiY29tcHV0ZXJEZXN0cm95ZXIiLCJjb21wdXRlclN1Ym1hcmluZSIsImNvbXB1dGVyUGF0cm9sYm9hdCIsImlzR2FtZU92ZXIiLCJjb21wdXRlckFJIiwicGlja0dhbWVNb2RlIiwiaXNQbGF5ZXJUdXJuIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=