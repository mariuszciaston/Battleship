(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],r=[],o=(o,n)=>{const a=t.indexOf(o),i=e.indexOf(n);return-1===a||-1===i?null:r[i][a]},n=(o,n,a,i)=>{const l=t.indexOf(o),s=e.indexOf(n);return-1===l||-1===s?null:(r[s][l].status=a,i&&(r[s][l].takenBy=i),r[s][l])};return(()=>{for(let o=0;o<10;o+=1){r[o]=[];for(let n=0;n<10;n+=1)r[o][n]={col:t[n],row:e[o],status:"empty",takenBy:void 0}}})(),{getCell:o,setCell:n,placeShip:(r,a,i,l)=>{const s="horizontal"===l,c=s?t:e,u=c.indexOf(s?a:i);if(u<0||u+r.size>c.length)return!1;for(let t=0;t<r.size;t+=1){const e=s?c[u+t]:a,l=s?i:c[u+t];if("empty"!==o(e,l).status)return!1;n(e,l,"taken",r)}return!0},receiveAttack:(t,e)=>{const r=o(t,e);return"taken"===r.status?(r.takenBy.hit(),n(t,e,"hit"),r.status):"empty"===r.status?(n(t,e,"miss"),r.status):null},sinkShip:(t,e,r)=>{const o=t.getCell(e,r);if(o&&o.takenBy&&o.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===o.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const o=String.fromCharCode(e.col.charCodeAt(0)+r.col),n=(Number(e.row)+r.row).toString();t.getCell(o,n)&&t.receiveAttack(o,n)}))}))}},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===r[t][e].status&&!r[t][e].takenBy.isSunk())return!1;return!0},array:r}},e=t=>{let e,r=0;"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2);return{name:t,size:e,hit:()=>{r+=1},isSunk:()=>r===e}},r=()=>({attack:(t,e,r)=>"hit"!==t.getCell(e,r).status&&"miss"!==t.getCell(e,r).status?t.receiveAttack(e,r):"already shot",randomAttack:t=>{const e=["A","B","C","D","E","F","G","H","I","J"];let r,o;do{r=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,o).status||"miss"===t.getCell(r,o).status);if("hit"!==t.getCell(r,o).status&&"miss"!==t.getCell(r,o).status){return{result:t.receiveAttack(r,o),col:r,row:o}}return{result:"already shot",col:r,row:o}}});var o=function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function i(t){try{s(o.next(t))}catch(t){a(t)}}function l(t){try{s(o.throw(t))}catch(t){a(t)}}function s(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,l)}s((o=o.apply(t,e||[])).next())}))};const n=(()=>{const t=document.createElement("div");t.id="wrapper",document.body.append(t);const e=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const r=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(r)}))}))},r=t=>{if(console.log(t.target),!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}};return{renderBoard:r=>{const o=document.createElement("div");o.classList.add("board"),r===l?o.id="firstBoard":r===s&&(o.id="secondBoard"),e(r,o),t.append(o)},refreshBoard:t=>{const r=t===l?"firstBoard":"secondBoard",o=document.querySelector(`#${r}`);o.innerHTML="",e(t,o)},handleUserInput:function(){return o(this,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(r(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}}))}}})(),a=n;var i=function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function i(t){try{s(o.next(t))}catch(t){a(t)}}function l(t){try{s(o.throw(t))}catch(t){a(t)}}function s(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(i,l)}s((o=o.apply(t,e||[])).next())}))};const l=t(),s=t(),c=r(),u=r();(()=>{i(void 0,void 0,void 0,(function*(){for((()=>{const t=e("Carrier"),r=e("Battleship"),o=e("Destroyer"),n=e("Submarine"),a=e("Patrol Boat"),i=e("Carrier"),c=e("Battleship"),u=e("Destroyer"),d=e("Submarine"),h=e("Patrol Boat");l.placeShip(t,"A","1","horizontal"),l.placeShip(r,"A","3","horizontal"),l.placeShip(o,"A","5","horizontal"),l.placeShip(n,"A","7","horizontal"),l.placeShip(a,"A","9","horizontal"),s.placeShip(i,"A","1","vertical"),s.placeShip(c,"C","1","vertical"),s.placeShip(u,"E","1","vertical"),s.placeShip(d,"G","1","vertical"),s.placeShip(h,"I","1","vertical")})(),a.renderBoard(l),a.renderBoard(s);!1==(s.allSunk()?(console.log("All computer ships are sunk. Human player won!"),!0):!!l.allSunk()&&(console.log("All human ships are sunk. Computer player won!"),!0));){yield new Promise((t=>setTimeout(t,100)));const{col:t,row:e}=c.randomAttack(s);s.sinkShip(s,t,e),a.refreshBoard(s),yield new Promise((t=>setTimeout(t,100)));const{col:r,row:o}=u.randomAttack(l);l.sinkShip(l,r,o),a.refreshBoard(l)}console.log("Game Over")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,