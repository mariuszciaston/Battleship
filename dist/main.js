(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),n=t.indexOf(s);return-1===o||-1===n?null:a[n][o]},o=(r,s,o,n)=>{const i=e.indexOf(r),l=t.indexOf(s);return-1===i||-1===l?null:(a[l][i].status=o,n&&(a[l][i].takenBy=n),a[l][i])};return{generateArray:()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}},clearBoard:()=>{a.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const a=r.indexOf(t);null===t.takenBy&&-1!==a&&r.splice(a,1)}))},placeShip:(a,n,i,l)=>{const c="horizontal"===l,d=c?e:t,u=d.indexOf(c?n:i);a.isVertical="horizontal"!==l;let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:n,r=c?i:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),h.push(s(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,n)=>{const i="horizontal"===n,l=i?e:t,c=l.indexOf(i?r:o);if(c<0||c+a>l.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=i?l[c+e]:r,a=i?o:l[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,s=!0,o=!0;const n=(e,t,c,d)=>{if(d.row===c)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(i(a),l({col:o,row:c})),r+=1):(r=1,s=!1,n(e,o,c,d))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(i(a),l({col:o,row:c})),r+=1):(r=1,s=!0,n(e,o,c,d))}else if(d.col===t)if(o){r=1;let s=(Number(c)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(i(a),l({col:t,row:s})),r+=1):(r=1,o=!1,n(e,t,s,d))}else{r=1;let s=(Number(c)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(i(a),l({col:t,row:s})),r+=1):(r=1,o=!0,n(e,t,s,d))}},i=e=>{t=e},l=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s&&(i(a),l({col:t,row:r})),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status&&(i(a),l({col:r,row:s})),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),n=e.getCell(r,o);return!(!n||"miss"===n.status||"hit"===n.status)}));if(o.length>0){const n=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+n.col),d=(Number(s)+n.row).toString();e.receiveAttack(c,d),r=1,"hit"===e.getCell(c,d).status&&(i(a),l({col:c,row:d}))}},finishingAttack:n,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:l}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{l(r.next(e))}catch(e){o(e)}}function i(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,i)}l((r=r.apply(e,t||[])).next())}))};const s=(e,t,a)=>{const s=document.querySelector("#firstBoard"),o=document.querySelector("#secondBoard"),n=s.querySelectorAll(".cell"),l=o.querySelectorAll(".cell");let c,u,h,m,f=0,g=0,v=[];const p={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]};let w=null;const y=document.querySelectorAll(".draggable");function S(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const C=[...S(n),...S(l)];function B(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===u&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function b(e,t){return e.slice(Math.min(e.length-t,0))}const L=a=>{e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),o=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),o.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d.renew(),i.setInitMessage()};function k(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;let s;r.style.visibility="hidden",this.classList.add("dragging"),c=r.getAttribute("data-name"),u=Number(r.getAttribute("data-size")),f=a.offsetX,g=a.offsetY,h=p[c],m=h.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&(s=e),"secondBoard"===r.closest(".board").id&&(s=t),s.removeShip(h,s),i.clearShip(h,s)}))}function P(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),h)){let t=e-(h.isVertical?10*Math.floor(g/this.offsetHeight):Math.floor(f/this.offsetWidth));const a=[];for(let e=0;e<u;e++){let r=h.isVertical?t+10*e:t+e;n[r]&&(a.push(n[r]),v.push(n[r]))}B(a)&&(a.forEach((e=>{e.classList.add("highlight")})),w||(w=b(v,u)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),h)){let t=e-(h.isVertical?10*Math.floor(g/this.offsetHeight):Math.floor(f/this.offsetWidth));const a=[];for(let e=0;e<u;e++){let r=h.isVertical?t+10*e:t+e;l[r]&&(a.push(l[r]),v.push(l[r]))}B(a)&&(a.forEach((e=>{e.classList.add("highlight")})),w||(w=b(v,u)))}}}function E(){v.forEach((e=>{e.classList.remove("highlight")})),v=[]}function A(a){v.forEach((e=>{e.classList.remove("highlight")}));const r=b(v,u),s=a.target;"firstBoard"===s.closest(".board").id&&h&&null!==w&&(e.canBePlaced(h.size,r[0].dataset.col,r[0].dataset.row,m)?(e.placeShip(h,r[0].dataset.col,r[0].dataset.row,m),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(h,w[0].dataset.col,w[0].dataset.row,m),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row))),"secondBoard"===s.closest(".board").id&&h&&null!==w&&(t.canBePlaced(h.size,r[0].dataset.col,r[0].dataset.row,m)?(t.placeShip(h,r[0].dataset.col,r[0].dataset.row,m),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(h,w[0].dataset.col,w[0].dataset.row,m),t.reserveSpace(t,w[0].dataset.col,w[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d.renew(),i.canBeStarted(),i.setStartMessage(),w=null}function H(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===v.length&&(r.closest(".board")&&"firstBoard"===r.closest(".board").id&&w&&e.canBePlaced(h.size,w[0].dataset.col,w[0].dataset.row,m)&&(e.placeShip(h,w[0].dataset.col,w[0].dataset.row,m),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row),d.renew()),r.closest(".board")&&"secondBoard"===r.closest(".board").id&&w&&t.canBePlaced(h.size,w[0].dataset.col,w[0].dataset.row,m)&&(t.placeShip(h,w[0].dataset.col,w[0].dataset.row,m),t.reserveSpace(t,w[0].dataset.col,w[0].dataset.row),d.renew()),i.canBeStarted()&&i.fillCells("second"),i.setStartMessage())}function M(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d.renew(),i.setStartMessage()}function V(a){a.preventDefault();const r=a.target;let s;"firstBoard"===r.closest(".board").id&&(s=e),"secondBoard"===r.closest(".board").id&&(s=t),c=r.getAttribute("data-name"),u=Number(r.getAttribute("data-size")),h=p[c];const o=h,n=s.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===c));s.removeShip(h,s),s.removeReservedSpace(s),s.shipsPlaced.forEach((e=>{s.reserveSpace(s,e.col,e.row)})),o.rotate(),m=o.isVertical?"vertical":"horizontal",s.canBePlaced(o.size,n[0].col,n[0].row,m)||(o.rotate(),m=o.isVertical?"vertical":"horizontal"),s.placeShip(o,n[0].col,n[0].row,m),s.shipsPlaced.forEach((e=>{s.reserveSpace(s,e.col,e.row)})),d.renew(),i.canBeStarted()&&i.fillCells("second")}function q(e){e.preventDefault()}n.forEach(((e,t)=>{e.addEventListener("dragover",P(t)),e.addEventListener("dragleave",E),e.addEventListener("drop",A)})),l.forEach(((e,t)=>{e.addEventListener("dragover",P(t)),e.addEventListener("dragleave",E),e.addEventListener("drop",A)})),y.forEach((e=>{e.addEventListener("mousedown",L),e.addEventListener("dragstart",k),e.addEventListener("dragend",H),e.addEventListener("mouseup",M),e.addEventListener("contextmenu",V),C.forEach((e=>e.addEventListener("contextmenu",q)))}))};var o=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{l(r.next(e))}catch(e){o(e)}}function i(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,i)}l((r=r.apply(e,t||[])).next())}))};const n=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),r=document.querySelector("#newGame"),i=document.querySelector("#computerVsComputer"),l=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),u=[a,r,i,l,c],h=document.getElementsByName("speed"),m=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},f=e=>e===d.humanGameboard?"firstBoard":e===d.computerGameboard?"secondBoard":void 0,g=e=>{const t=document.querySelector(`#${f(e)}`);t.innerHTML="",m(e,t)},v=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},p=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&o(void 0,void 0,void 0,(function*(){k("first"),w(!0),u.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,L()))),u.forEach((e=>e.disabled=!1)),w(!1),y(),S()})),e===i&&o(void 0,void 0,void 0,(function*(){w(!0),u.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,L()))),u.forEach((e=>e.disabled=!1)),w(!1),l.disabled=!0,c.disabled=!0,i.disabled=!0})),d.restart(),B())},w=e=>{document.documentElement.classList.toggle("wait",e)},y=()=>5===d.humanGameboard.shipsPlaced.length&&0===d.computerGameboard.shipsPlaced.length?(k("second"),l.disabled=!1,!0):(l.disabled=!0,!1),S=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},C=()=>{y()&&(e.textContent="You can now begin the game. Press start!")},B=()=>{e.textContent="Restarting..."};a.addEventListener("click",(()=>{k("first"),p(a,i);document.querySelector("#secondBoard").classList.remove("start"),l.disabled=!0,a.disabled=!0,P("first")})),i.addEventListener("click",(()=>{k("first"),k("second"),p(i,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),l.disabled=!0,c.disabled=!0,i.disabled=!0,Promise.all([P("first"),P("second")])})),r.addEventListener("click",(()=>o(void 0,void 0,void 0,(function*(){k("first"),i.classList.contains("selected")&&(k("second"),l.disabled=!0,c.disabled=!0,i.disabled=!0),n.removeBoardPointer(),yield o(void 0,void 0,void 0,(function*(){B(),w(!0),u.forEach((e=>e.disabled=!0)),yield d.newGame(),u.forEach((e=>e.disabled=!1)),w(!1),y(),a.classList.contains("selected")&&S()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),P("first"),l.disabled=!0,a.disabled=!0),i.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([P("first"),P("second")]),l.disabled=!0,c.disabled=!0,i.disabled=!0)})))),l.addEventListener("click",(()=>{d.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),l.disabled=!0,c.disabled=!0,P("second")})),c.addEventListener("click",(()=>{d.computerGameboard.clearBoard(),g(d.computerGameboard),d.randomizeShipsPlacement(d.humanGameboard),s(d.humanGameboard,d.computerGameboard,d.humanShips),y(),C(),k("second")}));let b=1e3;h.forEach((e=>{e.addEventListener("click",(()=>{let t=e;t.checked&&(b=Number(t.value))}))}));const L=()=>b;window.addEventListener("resize",S);const k=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},P=e=>o(void 0,void 0,void 0,(function*(){let t;w(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,r)=>{setTimeout((()=>{t.classList.remove("filled"),r===a.length-1&&e()}),L()/120*r)}))})),w(!1)}));return{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),a.id=f(e),m(e,a),t.append(a)},clearShip:(e,t)=>{document.querySelectorAll(`#${f(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:g,handleUserInput:()=>o(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(v(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:i,waiting:w,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${s}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const n=()=>{const e=document.querySelector("html"),t=parseFloat(window.getComputedStyle(e,null).getPropertyValue("font-size"));o?o&&(a.style.width=i/t+"rem",a.style.height=s*(i/t)+"rem"):(a.style.width=s*(i/t)+"rem",a.style.height=i/t+"rem")};let i=document.querySelector(".board .cell").getBoundingClientRect().width;n(),window.addEventListener("resize",(function(){i=document.querySelector(".board .cell").getBoundingClientRect().width,n()}));document.querySelector(`#${f(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},canBeStarted:y,setInitMessage:S,setStartMessage:C,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:B,getSpeedValue:L,fillCells:k,unFillCells:P}})(),i=n;var l=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{l(r.next(e))}catch(e){o(e)}}function i(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,i)}l((r=r.apply(e,t||[])).next())}))};const c=(()=>{const r=e(),o=e(),n=a(),d=a();let u=!0,h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),g=t("Submarine"),v=t("PatrolBoat");const p=[h,m,f,g,v],w=()=>{o.placeShip(h,"A","1","horizontal"),o.placeShip(m,"A","3","horizontal"),o.placeShip(f,"A","5","horizontal"),o.placeShip(g,"A","7","horizontal"),o.placeShip(v,"A","9","horizontal"),o.reserveSpace(o,"A","1"),o.reserveSpace(o,"A","3"),o.reserveSpace(o,"A","5"),o.reserveSpace(o,"A","7"),o.reserveSpace(o,"A","9")};const y=()=>o.allSunk(o)?(i.removeBoardPointer(),i.pVcBtn.classList.contains("selected")&&i.setGameOverMessagePvC("player"),i.cVcBtn.classList.contains("selected")&&i.setGameOverMessageCvC("player"),!0):!!r.allSunk(r)&&(i.removeBoardPointer(),i.pVcBtn.classList.contains("selected")&&i.setGameOverMessagePvC("computer"),i.cVcBtn.classList.contains("selected")&&i.setGameOverMessageCvC("computer"),!0),S=e=>{let t;if(e===r?t=d:e===o&&(t=n),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),y())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),y()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),y()))return}},C=e=>{e.clearBoard(),(e=>{let a;e===r?(h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),g=t("Submarine"),v=t("PatrolBoat"),a=[h,m,f,g,v]):e===o&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);c.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],n=()=>s[Math.floor(Math.random()*s.length)],i=()=>Math.ceil(10*Math.random()).toString(),l=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=n(),r=i(),s=l(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=n(),r=i(),s=l(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),c.humanShips.push(t)}))})(e),i.refreshBoard(e),e===r&&i.createShipOverlay(e)},B=()=>{i.cVcBtn.classList.contains("selected")&&(C(r),C(o),u=!1,l(void 0,void 0,void 0,(function*(){i.removeBoardPointer();let e=!0;for(;!y()&&!u;){if(i.waiting(!0),e){if(i.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),!i.cVcBtn.classList.contains("selected")||u)break;S(r),i.refreshBoard(r),e=!1}if(y()||u)break;if(!e){if(i.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),!i.cVcBtn.classList.contains("selected")||u)break;S(o),i.refreshBoard(o),e=!0}}u=!1,i.waiting(!1)})),i.refreshBoard(r))},b=()=>{u=!0,n.setPrevHit(null),n.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),r.clearBoard(),o.clearBoard(),w(),i.refreshBoard(r),i.refreshBoard(o),i.createShipOverlay(o),s(r,o,p),i.canBeStarted(),B(),p.forEach((e=>{!0===e.isVertical&&(e.isVertical=!1)}))};return{init:()=>{i.setInitMessage(),r.generateArray(),o.generateArray(),i.renderBoard(r),i.renderBoard(o),w(),i.refreshBoard(o),i.createShipOverlay(o),s(r,o,p),i.canBeStarted(),B(),i.unFillCells("first"),i.pVcBtn.disabled=!0},renew:function(){i.refreshBoard(r),i.refreshBoard(o),i.createShipOverlay(r),i.createShipOverlay(o),s(r,o,p)},humanGameboard:r,computerGameboard:o,restart:b,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),u=!1,b()})),start:()=>{i.refreshBoard(r),C(o),u=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!y()&&!u;){if(e){i.setTurnMessagePvC(e),i.setBoardPointer("player"),i.waiting(!1);const{col:t,row:a}=yield i.handleUserInput();n.attack(o,t,a),o.sinkShip(o,t,a),i.refreshBoard(o),e=!1}if(y()||u)break;if(!e){if(i.setTurnMessagePvC(e),i.setBoardPointer("computer"),i.waiting(!0),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),!i.pVcBtn.classList.contains("selected")||u)break;S(r),i.refreshBoard(r),e=!0}}u=!1,i.waiting(!1)}))},randomizeShipsPlacement:C,humanShips:p}})(),d=c;d.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,