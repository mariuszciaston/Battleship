(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],r=[],o=(o,n)=>{const a=t.indexOf(o),s=e.indexOf(n);return-1===a||-1===s?null:r[s][a]},n=(o,n,a,s)=>{const c=t.indexOf(o),i=e.indexOf(n);return-1===c||-1===i?null:(r[i][c].status=a,s&&(r[i][c].takenBy=s),r[i][c])};return(()=>{for(let o=0;o<10;o+=1){r[o]=[];for(let n=0;n<10;n+=1)r[o][n]={col:t[n],row:e[o],status:"empty",takenBy:void 0}}})(),{clearBoard:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)r[t][e].status="empty",r[t][e].takenBy=void 0},getCell:o,setCell:n,placeShip:(r,a,s,c)=>{const i="horizontal"===c,l=i?t:e,d=l.indexOf(i?a:s);if(d<0||d+r.size>l.length)return!1;for(let t=0;t<r.size;t+=1){const e=i?l[d+t]:a,c=i?s:l[d+t];if("empty"!==o(e,c).status)return!1;n(e,c,"taken",r)}return!0},receiveAttack:(t,e)=>{const r=o(t,e);return"taken"===r.status?(r.takenBy.hit(),n(t,e,"hit"),r.status):"empty"===r.status?(n(t,e,"miss"),r.status):null},sinkShip:(t,e,r)=>{const o=t.getCell(e,r);if(o&&o.takenBy&&o.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===o.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const o=String.fromCharCode(e.col.charCodeAt(0)+r.col),n=(Number(e.row)+r.row).toString();t.getCell(o,n)&&t.receiveAttack(o,n)}))}))}},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===r[t][e].status&&!r[t][e].takenBy.isSunk())return!1;return!0},array:r}},e=t=>{let e,r=0;"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2);return{name:t,size:e,hit:()=>{r+=1},isSunk:()=>r===e}},r=()=>({attack:(t,e,r)=>"hit"!==t.getCell(e,r).status&&"miss"!==t.getCell(e,r).status?t.receiveAttack(e,r):"already shot",randomAttack:t=>{const e=["A","B","C","D","E","F","G","H","I","J"];let r,o;do{r=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,o).status||"miss"===t.getCell(r,o).status);if("hit"!==t.getCell(r,o).status&&"miss"!==t.getCell(r,o).status){return{result:t.receiveAttack(r,o),col:r,row:o}}return{result:"already shot",col:r,row:o}}});var o=function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function s(t){try{i(o.next(t))}catch(t){a(t)}}function c(t){try{i(o.throw(t))}catch(t){a(t)}}function i(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,c)}i((o=o.apply(t,e||[])).next())}))};const n=(()=>{const t=document.querySelector("#wrapper"),e=document.createElement("div");e.id="boards",t.prepend(e);const r=document.querySelector("#playerVsComputer"),n=document.querySelector("#computerVsComputer"),a=document.querySelector("#newGame"),s=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const r=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(r)}))}))},i=t=>{if(!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}};const l=(t,e)=>{e.classList.remove("selected"),t.classList.contains("selected")||(t.classList.add("selected"),c.restart())};return r.addEventListener("click",(()=>l(r,n))),n.addEventListener("click",(()=>l(n,r))),a.addEventListener("click",(()=>o(void 0,void 0,void 0,(function*(){a.disabled=!0,a.textContent="Restarting",yield c.newGame(),a.textContent="New Game",a.disabled=!1})))),{renderBoard:t=>{const r=document.createElement("div");r.classList.add("board"),t===c.humanGameboard?r.id="firstBoard":t===c.computerGameboard&&(r.id="secondBoard"),s(t,r),e.append(r)},refreshBoard:t=>{const e=t===c.humanGameboard?"firstBoard":"secondBoard",r=document.querySelector(`#${e}`);r.innerHTML="",s(t,r)},handleUserInput:function(){return o(this,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(i(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}}))},pVcBtn:r,cVcBtn:n}})(),a=n;var s=function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function s(t){try{i(o.next(t))}catch(t){a(t)}}function c(t){try{i(o.throw(t))}catch(t){a(t)}}function i(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,c)}i((o=o.apply(t,e||[])).next())}))};const c=(()=>{const o=t(),n=t(),c=r(),i=r();let l=!1;const d=()=>{const t=e("Carrier"),r=e("Battleship"),a=e("Destroyer"),s=e("Submarine"),c=e("Patrol Boat"),i=e("Carrier"),l=e("Battleship"),d=e("Destroyer"),u=e("Submarine"),h=e("Patrol Boat");o.placeShip(t,"A","1","horizontal"),o.placeShip(r,"A","3","horizontal"),o.placeShip(a,"A","5","horizontal"),o.placeShip(s,"A","7","horizontal"),o.placeShip(c,"A","9","horizontal"),n.placeShip(i,"A","1","vertical"),n.placeShip(l,"C","1","vertical"),n.placeShip(d,"E","1","vertical"),n.placeShip(u,"G","1","vertical"),n.placeShip(h,"I","1","vertical")},u=()=>n.allSunk()?(console.log("All computer ships are sunk. Human player won!"),!0):!!o.allSunk()&&(console.log("All human ships are sunk. Computer player won!"),!0),h=()=>a.pVcBtn.classList.contains("selected")?s(void 0,void 0,void 0,(function*(){for(;!u()&&!l;){const{col:t,row:e}=yield a.handleUserInput();if(c.attack(n,t,e),n.sinkShip(n,t,e),a.refreshBoard(n),yield new Promise((t=>setTimeout(t,1e3))),!a.pVcBtn.classList.contains("selected")||l)break;const{col:r,row:s}=i.randomAttack(o);o.sinkShip(o,r,s),a.refreshBoard(o)}l=!1})):a.cVcBtn.classList.contains("selected")?s(void 0,void 0,void 0,(function*(){for(;!u()&&!l&&(yield new Promise((t=>setTimeout(t,500))),a.cVcBtn.classList.contains("selected")&&!l);){const{col:t,row:e}=i.randomAttack(o);if(o.sinkShip(o,t,e),a.refreshBoard(o),yield new Promise((t=>setTimeout(t,500))),!a.cVcBtn.classList.contains("selected")||l)break;const{col:r,row:s}=c.randomAttack(n);n.sinkShip(n,r,s),a.refreshBoard(n)}l=!1})):void 0,m=()=>{o.clearBoard(),n.clearBoard(),d(),a.refreshBoard(o),a.refreshBoard(n),h()};return{start:()=>{d(),a.renderBoard(o),a.renderBoard(n),h()},humanGameboard:o,computerGameboard:n,newGame:()=>s(void 0,void 0,void 0,(function*(){l=!0,yield new Promise((t=>setTimeout(t,1e3))),l=!1,m()})),restart:m}})();c.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,