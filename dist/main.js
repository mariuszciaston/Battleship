(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],r=[],o=(o,n)=>{const a=t.indexOf(o),s=e.indexOf(n);return-1===a||-1===s?null:r[s][a]},n=(o,n,a,s)=>{const c=t.indexOf(o),i=e.indexOf(n);return-1===c||-1===i?null:(r[i][c].status=a,s&&(r[i][c].takenBy=s),r[i][c])};return(()=>{for(let o=0;o<10;o+=1){r[o]=[];for(let n=0;n<10;n+=1)r[o][n]={col:t[n],row:e[o],status:"empty",takenBy:void 0}}})(),{clearBoard:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)r[t][e].status="empty",r[t][e].takenBy=void 0},getCell:o,setCell:n,placeShip:(r,a,s,c)=>{const i="horizontal"===c,l=i?t:e,d=l.indexOf(i?a:s);if(d<0||d+r.size>l.length)return!1;for(let t=0;t<r.size;t+=1){const e=i?l[d+t]:a,c=i?s:l[d+t];if("empty"!==o(e,c).status)return!1;n(e,c,"taken",r)}return!0},receiveAttack:(t,e)=>{const r=o(t,e);return"taken"===r.status?(r.takenBy.hit(),n(t,e,"hit"),r.status):"empty"===r.status?(n(t,e,"miss"),r.status):null},sinkShip:(t,e,r)=>{const o=t.getCell(e,r);if(o&&o.takenBy&&o.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===o.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const o=String.fromCharCode(e.col.charCodeAt(0)+r.col),n=(Number(e.row)+r.row).toString();t.getCell(o,n)&&t.receiveAttack(o,n)}))}))}},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===r[t][e].status&&!r[t][e].takenBy.isSunk())return!1;return!0},array:r}},e=t=>{let e,r=0;"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2);return{name:t,size:e,hit:()=>{r+=1},isSunk:()=>r===e}},r=()=>({attack:(t,e,r)=>"hit"!==t.getCell(e,r).status&&"miss"!==t.getCell(e,r).status?t.receiveAttack(e,r):"already shot",randomAttack:t=>{const e=["A","B","C","D","E","F","G","H","I","J"];let r,o;do{r=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,o).status||"miss"===t.getCell(r,o).status);if("hit"!==t.getCell(r,o).status&&"miss"!==t.getCell(r,o).status){return{result:t.receiveAttack(r,o),col:r,row:o}}return{result:"already shot",col:r,row:o}}});var o=function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function s(t){try{i(o.next(t))}catch(t){a(t)}}function c(t){try{i(o.throw(t))}catch(t){a(t)}}function i(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,c)}i((o=o.apply(t,e||[])).next())}))};const n=(()=>{const t=document.querySelector("#wrapper"),e=document.createElement("div");e.id="boards",t.append(e);const r=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const r=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(r)}))}))},n=t=>{if(console.log(t.target),!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}};return{renderBoard:t=>{const o=document.createElement("div");o.classList.add("board"),t===c?o.id="firstBoard":t===i&&(o.id="secondBoard"),r(t,o),e.append(o)},refreshBoard:t=>{const e=t===c?"firstBoard":"secondBoard",o=document.querySelector(`#${e}`);o.innerHTML="",r(t,o)},handleUserInput:function(){return o(this,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(n(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}}))}}})(),a=n;var s=function(t,e,r,o){return new(r||(r=Promise))((function(n,a){function s(t){try{i(o.next(t))}catch(t){a(t)}}function c(t){try{i(o.throw(t))}catch(t){a(t)}}function i(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,c)}i((o=o.apply(t,e||[])).next())}))};const c=t(),i=t(),l=r(),d=r(),u=()=>{const t=e("Carrier"),r=e("Battleship"),o=e("Destroyer"),n=e("Submarine"),a=e("Patrol Boat"),s=e("Carrier"),l=e("Battleship"),d=e("Destroyer"),u=e("Submarine"),h=e("Patrol Boat");c.placeShip(t,"A","1","horizontal"),c.placeShip(r,"A","3","horizontal"),c.placeShip(o,"A","5","horizontal"),c.placeShip(n,"A","7","horizontal"),c.placeShip(a,"A","9","horizontal"),i.placeShip(s,"A","1","vertical"),i.placeShip(l,"C","1","vertical"),i.placeShip(d,"E","1","vertical"),i.placeShip(u,"G","1","vertical"),i.placeShip(h,"I","1","vertical")},h=()=>i.allSunk()?(console.log("All computer ships are sunk. Human player won!"),!0):!!c.allSunk()&&(console.log("All human ships are sunk. Computer player won!"),!0),f=document.querySelector("#playerVsComputer"),m=document.querySelector("#computerVsComputer");let p=!1;const y=()=>f.classList.contains("selected")?s(void 0,void 0,void 0,(function*(){for(;!h()&&f.classList.contains("selected")&&!p;){const{col:t,row:e}=yield a.handleUserInput();if(l.attack(i,t,e),i.sinkShip(i,t,e),a.refreshBoard(i),yield new Promise((t=>setTimeout(t,1e3))),!f.classList.contains("selected")||p)break;const{col:r,row:o}=d.randomAttack(c);c.sinkShip(c,r,o),a.refreshBoard(c)}p=!1})):m.classList.contains("selected")?s(void 0,void 0,void 0,(function*(){for(;!h()&&m.classList.contains("selected")&&!p&&(yield new Promise((t=>setTimeout(t,100))),m.classList.contains("selected")&&!p);){const{col:t,row:e}=d.randomAttack(c);if(c.sinkShip(c,t,e),a.refreshBoard(c),yield new Promise((t=>setTimeout(t,100))),!m.classList.contains("selected")||p)break;const{col:r,row:o}=l.randomAttack(i);i.sinkShip(i,r,o),a.refreshBoard(i)}p=!1})):void 0,k=()=>{c.clearBoard(),i.clearBoard(),u(),a.refreshBoard(c),a.refreshBoard(i),y()},w=document.querySelector("#newGame");w.addEventListener("click",(()=>s(void 0,void 0,void 0,(function*(){p=!0,w.disabled=!0,w.textContent="Restarting",yield new Promise((t=>setTimeout(t,1e3))),k(),w.textContent="New Game",w.disabled=!1})))),f.addEventListener("click",(()=>{m.classList.remove("selected"),f.classList.contains("selected")||(f.classList.add("selected"),k())})),m.addEventListener("click",(()=>{f.classList.remove("selected"),m.classList.contains("selected")||(m.classList.add("selected"),k())}));(()=>{u(),a.renderBoard(c),a.renderBoard(i),y()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,