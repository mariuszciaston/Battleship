(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),n=t.indexOf(s);return-1===o||-1===n?null:a[n][o]},o=(r,s,o,n)=>{const l=e.indexOf(r),i=t.indexOf(s);return-1===l||-1===i?null:(a[i][l].status=o,n&&(a[i][l].takenBy=n),a[i][l])};return{generateArray:()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}},clearBoard:()=>{a.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const a=r.indexOf(t);null===t.takenBy&&-1!==a&&r.splice(a,1)}))},placeShip:(a,n,l,i)=>{const c="horizontal"===i,d=c?e:t,u=d.indexOf(c?n:l);a.isVertical="horizontal"!==i;let m=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:n,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),m.push(s(t,r))}return r.push(m[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},reserveSpaceForAll:function(e){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),canBeSunk:e=>e&&e.takenBy&&e.takenBy.isSunk(),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,n)=>{const l="horizontal"===n,i=l?e:t,c=i.indexOf(l?r:o);if(c<0||c+a>i.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?i[c+e]:r,a=l?o:i[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=(()=>{const e=e=>{Object.keys(e).forEach((t=>{const a=e[t].play;e[t].play=function(){return e[t].currentTime>0&&(e[t].pause(),e[t].currentTime=0),a.call(this)}}))};return(()=>{const t={miss:new Audio("sounds/gray1wea.wav"),hit:new Audio("sounds/explo.wav"),sunk:new Audio("sounds/explodea.wav"),gameOver:new Audio("sounds/capture.wav"),drop:new Audio("sounds/barr1sel.wav"),rotate:new Audio("sounds/drain.wav"),random:new Audio("sounds/exp1sel.wav"),select:new Audio("sounds/msg.wav"),tick:new Audio("sounds/beep.wav"),grab:new Audio("sounds/buttonRev.wav")};return e(t),t})()})(),r=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,r=null,s=1,o=!0,n=!0;const l=(e,t,d,u)=>{if(u.row===d)if(o){s=1;let n=String.fromCharCode(t.charCodeAt(0)+s);for(;e.getCell(n,d)&&"hit"===e.getCell(n,d).status;)s+=1,n=String.fromCharCode(t.charCodeAt(0)+s);e.getCell(n,d)&&"hit"!==e.getCell(n,d).status&&"miss"!==e.getCell(n,d).status?(e.receiveAttack(n,d),"hit"===e.getCell(n,d).status?(i(r),c({col:n,row:d}),a.hit.play()):"miss"===e.getCell(n,d).status&&a.miss.play(),s+=1):(s=1,o=!1,l(e,n,d,u))}else{s=1;let n=String.fromCharCode(t.charCodeAt(0)-s);for(;e.getCell(n,d)&&"hit"===e.getCell(n,d).status;)s+=1,n=String.fromCharCode(t.charCodeAt(0)-s);e.getCell(n,d)&&"hit"!==e.getCell(n,d).status&&"miss"!==e.getCell(n,d).status?(e.receiveAttack(n,d),"hit"===e.getCell(n,d).status?(i(r),c({col:n,row:d}),a.hit.play()):"miss"===e.getCell(n,d).status&&a.miss.play(),s+=1):(s=1,o=!0,l(e,n,d,u))}else if(u.col===t)if(n){s=1;let o=(Number(d)+s).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)s+=1,o=(Number(d)+s).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status?(i(r),c({col:t,row:o}),a.hit.play()):"miss"===e.getCell(t,o).status&&a.miss.play(),s+=1):(s=1,n=!1,l(e,t,o,u))}else{s=1;let o=(Number(d)-s).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)s+=1,o=(Number(d)-s).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status?(i(r),c({col:t,row:o}),a.hit.play()):"miss"===e.getCell(t,o).status&&a.miss.play(),s+=1):(s=1,n=!0,l(e,t,o,u))}},i=e=>{t=e},c=e=>{r=e};return{attack:(e,t,s)=>{if("hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status){let o=e.receiveAttack(t,s);return"hit"===o?(i(r),c({col:t,row:s}),a.hit.play()):"miss"===o&&a.miss.play(),o}return"already shot"},randomAttack:t=>{let s,o;do{s=e[Math.floor(Math.random()*e.length)],o=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(s,o).status||"miss"===t.getCell(s,o).status);if("hit"!==t.getCell(s,o).status&&"miss"!==t.getCell(s,o).status){const e=t.receiveAttack(s,o);return"hit"===t.getCell(s,o).status?(i(r),c({col:s,row:o}),a.hit.play()):"miss"===t.getCell(s,o).status&&a.miss.play(),{result:e,col:s,row:o}}return{result:"already shot",col:s,row:o}},followupAttack:(e,t,o)=>{const n=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),s=(Number(o)+a.row).toString(),n=e.getCell(r,s);return!(!n||"miss"===n.status||"hit"===n.status)}));if(n.length>0){const l=n[Math.floor(Math.random()*n.length)],d=String.fromCharCode(t.charCodeAt(0)+l.col),u=(Number(o)+l.row).toString();e.receiveAttack(d,u),s=1,"hit"===e.getCell(d,u).status?(i(r),c({col:d,row:u}),a.hit.play()):"miss"===e.getCell(d,u).status&&a.miss.play()}},finishingAttack:l,prevHit:t,lastHit:r,getPrevHit:()=>t,getLastHit:()=>r,setPrevHit:i,setLastHit:c}};var s=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const o=(e,t,r)=>{const o=document.querySelector("#firstBoard"),n=document.querySelector("#secondBoard"),l=o.querySelectorAll(".cell"),c=n.querySelectorAll(".cell");let u,m,h,f,v=0,p=0,g=[];const y={carrier:r[0],battleship:r[1],destroyer:r[2],submarine:r[3],patrolboat:r[4]};let w=null;const S=document.querySelectorAll(".draggable");function C(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const B=[...C(l),...C(c)];function b(e,t){return e.slice(Math.min(e.length-t,0))}function k(a){const r=a.target;let s;const o=r.closest(".board").id;return"firstBoard"===o&&(s=e),"secondBoard"===o&&(s=t),{target:r,gameboard:s}}function L(e,t){return u=t.getAttribute("data-name"),m=Number(t.getAttribute("data-size")),v=e.offsetX,p=e.offsetY,h=y[u],f=h.isVertical?"vertical":"horizontal",{shipName:u,shipObj:h}}function A(){g.forEach((e=>e.classList.remove("highlight")))}function E(e){return"firstBoard"===e||"secondBoard"===e}function P(e){const{gameboard:t}=k(e);t.removeReservedSpace(t),function(e,t){const{target:a}=k(t),r=a.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))}(t,e),d.renew(),i.setInitMessage(),0===e.button&&a.grab.play()}function x(e){return s(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const{target:t,gameboard:a}=k(e);t.style.visibility="hidden",L(e,t),a.removeShip(h,a),i.clearShip(h,a)}))}function q(e){return function(t){const{target:a}=k(t),r=a.closest(".board").id;if(E(r)&&(t.preventDefault(),h)){const a=function(e,t,a){const{target:r}=k(a);return e-(t.isVertical?10*Math.floor(p/r.offsetHeight):Math.floor(v/r.offsetWidth))}(e,h,t),s=function(e){return"firstBoard"===e?l:c}(r),o=[];!function(e,t,a,r){for(let s=0;s<m;s++){let o=e.isVertical?t+10*s:t+s;a[o]&&(r.push(a[o]),g.push(a[o]))}}(h,a,s,o),function(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===m&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}(o)&&(!function(e){e.forEach((e=>{e.classList.add("highlight")}))}(o),w||(w=b(g,m)))}}}function M(){A(),g.length=0}function z(e){A();const t=b(g,m),{target:r,gameboard:s}=k(e);E(r.closest(".board").id)&&h&&null!==w&&function(e,t,a,r){e.canBePlaced(t.size,a[0].dataset.col,a[0].dataset.row,r)?(e.placeShip(t,a[0].dataset.col,a[0].dataset.row,r),e.reserveSpace(e,a[0].dataset.col,a[0].dataset.row)):(e.placeShip(t,w[0].dataset.col,w[0].dataset.row,r),e.reserveSpace(e,w[0].dataset.col,w[0].dataset.row))}(s,h,t,f),s.removeReservedSpace(s),s.reserveSpaceForAll(s),d.renew(),i.canBeStarted(),i.setStartMessage(),w=null,a.drop.play()}function O(a){const r=a.target;r.style.visibility="visible",function(a,r){if(0===g.length){const s=a.closest(".board");if(s){let{gameboard:a}=k(r);"firstBoard"===s.id?a=e:"secondBoard"===s.id&&(a=t),a&&w&&a.canBePlaced(h.size,w[0].dataset.col,w[0].dataset.row,f)&&(a.placeShip(h,w[0].dataset.col,w[0].dataset.row,f),a.reserveSpace(a,w[0].dataset.col,w[0].dataset.row),d.renew())}}}(r,a),i.canBeStarted()&&i.fillCells("second"),i.setStartMessage()}function V(e){const{gameboard:t}=k(e);t.reserveSpaceForAll(t),d.renew(),i.setStartMessage()}function G(e){e.preventDefault();const{target:t,gameboard:r}=k(e),{shipName:s,shipObj:o}=L(e,t),n=r.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===s));r.removeShip(o,r),r.removeReservedSpace(r),r.reserveSpaceForAll(r),o.rotate(),f=o.isVertical?"vertical":"horizontal",r.canBePlaced(o.size,n[0].col,n[0].row,f)||(o.rotate(),f=o.isVertical?"vertical":"horizontal"),r.placeShip(o,n[0].col,n[0].row,f),r.reserveSpaceForAll(r),d.renew(),i.canBeStarted()&&i.fillCells("second"),a.rotate.play()}function H(e){e.preventDefault()}function N(e){e.forEach(((e,t)=>{e.addEventListener("dragover",q(t)),e.addEventListener("dragleave",M),e.addEventListener("drop",z)}))}N(l),N(c),S.forEach((e=>{e.addEventListener("mousedown",P),e.addEventListener("dragstart",x),e.addEventListener("dragend",O),e.addEventListener("mouseup",V),e.addEventListener("contextmenu",G),B.forEach((e=>e.addEventListener("contextmenu",H)))}))};var n=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const l=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),r=document.querySelector("#playerVsComputer"),s=document.querySelector("#newGame"),l=document.querySelector("#computerVsComputer"),i=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),u=[r,s,l,i,c],m=document.getElementsByName("speed");let h=1e3;const f=document.querySelector("#mute");let v=!1;const p=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},g=e=>e===d.humanGameboard?"firstBoard":e===d.computerGameboard?"secondBoard":void 0,y=e=>{const t=document.querySelector(`#${g(e)}`);t.innerHTML="",p(e,t)},w=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},S=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===r&&n(void 0,void 0,void 0,(function*(){P("first"),C(!0),u.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,q()))),u.forEach((e=>e.disabled=!1)),C(!1),k(),L()})),e===l&&n(void 0,void 0,void 0,(function*(){C(!0),u.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,q()))),u.forEach((e=>e.disabled=!1)),C(!1),i.disabled=!0,c.disabled=!0,l.disabled=!0})),d.restart(),E())},C=e=>{document.documentElement.classList.toggle("wait",e)},B=()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},b=(e,t,a,r)=>{const s=document.querySelector("html"),o=parseFloat(window.getComputedStyle(s,null).getPropertyValue("font-size"));r?(e.style.width=a/o+"rem",e.style.height=t*(a/o)+"rem"):(e.style.width=t*(a/o)+"rem",e.style.height=a/o+"rem")},k=()=>5===d.humanGameboard.shipsPlaced.length&&0===d.computerGameboard.shipsPlaced.length?(P("second"),i.disabled=!1,!0):(i.disabled=!0,!1),L=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},A=()=>{k()&&(e.textContent="You can now begin the game. Press start!")},E=()=>{e.textContent="Restarting..."},P=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},x=e=>n(void 0,void 0,void 0,(function*(){let t;C(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const r=t.querySelectorAll(".cell");r.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{r.forEach(((t,s)=>{setTimeout((()=>{t.classList.remove("filled"),s===r.length-1&&e(),(s+1)%6==0&&a.tick.play()}),q()/120*s)}))})),C(!1)}));r.addEventListener("click",(()=>{P("first"),S(r,l);document.querySelector("#secondBoard").classList.remove("start"),i.disabled=!0,r.disabled=!0,a.select.play(),x("first")})),l.addEventListener("click",(()=>{P("first"),P("second"),S(l,r);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,l.disabled=!0,a.select.play(),Promise.all([x("first"),x("second")])})),s.addEventListener("click",(()=>n(void 0,void 0,void 0,(function*(){B(),P("first"),l.classList.contains("selected")&&(P("second"),i.disabled=!0,c.disabled=!0,l.disabled=!0),a.select.play(),yield n(void 0,void 0,void 0,(function*(){E(),C(!0),u.forEach((e=>e.disabled=!0)),yield d.newGame(),u.forEach((e=>e.disabled=!1)),C(!1),k(),r.classList.contains("selected")&&L()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),r.classList.contains("selected")&&(e.classList.remove("start"),x("first"),i.disabled=!0,r.disabled=!0),l.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([x("first"),x("second")]),i.disabled=!0,c.disabled=!0,l.disabled=!0)})))),i.addEventListener("click",(()=>{d.start();const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),i.disabled=!0,c.disabled=!0,x("second")})),c.addEventListener("click",(()=>{d.computerGameboard.clearBoard(),y(d.computerGameboard),d.randomizeShipsPlacement(d.humanGameboard),o(d.humanGameboard,d.computerGameboard,d.humanShips),k(),A(),P("second"),a.random.play()}));const q=()=>h;return m.forEach((e=>{e.addEventListener("click",(e=>{(e=>{let t=e.target;t.checked&&(h=Number(t.value))})(e),a.select.play()}))})),f.addEventListener("click",(()=>{const e=document.querySelector("#speaker");if(v){f.classList.remove("muted"),e.classList.remove("fa-volume-xmark"),e.classList.add("fa-volume-high");for(let e of Object.values(a))e.volume=1}else{f.classList.add("muted"),e.classList.remove("fa-volume-high"),e.classList.add("fa-volume-xmark");for(let e of Object.values(a))e.volume=0}v=!v,a.select.play()})),window.addEventListener("resize",L),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),a.id=g(e),p(e,a),t.append(a)},clearShip:(e,t)=>{document.querySelectorAll(`#${g(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:y,handleUserInput:()=>n(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(w(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:r,cVcBtn:l,waiting:C,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:B,createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const a=(e=>{const t=document.createElement("div"),a=e.takenBy.name.toLowerCase(),r=e.takenBy.size;return t.classList.add("ship",a,"draggable"),t.setAttribute("data-size",`${r}`),t.setAttribute("data-name",`${a}`),t.setAttribute("draggable","true"),t})(t),r=document.querySelector(".board .cell").getBoundingClientRect().width,s=t.takenBy.size,o=t.takenBy.isVertical;document.querySelector(`#${g(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a),b(a,s,r,o),window.addEventListener("resize",(()=>((e,t,a)=>{const r=document.querySelector(".board .cell").getBoundingClientRect().width;b(e,t,r,a)})(a,s,o)))}))},canBeStarted:k,setInitMessage:L,setStartMessage:A,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:E,getSpeedValue:q,fillCells:P,unFillCells:x}})(),i=l;var c=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function n(e){try{i(r.next(e))}catch(e){o(e)}}function l(e){try{i(r.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(n,l)}i((r=r.apply(e,t||[])).next())}))};const d=(()=>{const s=e(),n=e(),l=r(),d=r();let u,m,h,f,v,p=!0,g=[u,m,h,f,v];const y=()=>{u=t("Carrier"),m=t("Battleship"),h=t("Destroyer"),f=t("Submarine"),v=t("PatrolBoat"),g=[u,m,h,f,v],n.placeShip(u,"A","1","horizontal"),n.placeShip(m,"A","3","horizontal"),n.placeShip(h,"A","5","horizontal"),n.placeShip(f,"A","7","horizontal"),n.placeShip(v,"A","9","horizontal"),n.reserveSpaceForAll(n)},w=e=>(i.removeBoardPointer(),i.pVcBtn.classList.contains("selected")&&i.setGameOverMessagePvC(e),i.cVcBtn.classList.contains("selected")&&i.setGameOverMessageCvC(e),a.gameOver.play(),!0),S=()=>n.allSunk(n)?w("player"):!!s.allSunk(s)&&w("computer"),C=e=>{let t;if(e===s?t=d:e===n&&(t=l),e.hitButNotSunk(e)){const r=t.getLastHit(),s=t.getPrevHit(),o=e.getCell(r.col,r.row),n=o.takenBy.hitCount;if(null!==s&&null!==r&&n>=2&&n<=4?t.finishingAttack(e,r.col,r.row,s):1===n&&t.followupAttack(e,r.col,r.row),e.canBeSunk(o)&&(e.sinkShip(e,r.col,r.row),a.sunk.play()),S())return}else{const{col:r,row:s}=t.randomAttack(e),o=e.getCell(r,s);if("hit"===o.status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:r,row:s}),e.canBeSunk(o)&&(e.sinkShip(e,r,s),a.sunk.play(),t.setPrevHit(null),t.setLastHit(null),S())))return}},B=(e,t)=>c(void 0,void 0,void 0,(function*(){i.waiting(!0),i.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),i.cVcBtn.classList.contains("selected")&&!p&&(C(t),i.refreshBoard(t))})),b=e=>{e.clearBoard(),(e=>{let a;e===s?(u=t("Carrier"),m=t("Battleship"),h=t("Destroyer"),f=t("Submarine"),v=t("PatrolBoat"),a=[u,m,h,f,v]):e===n&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);g.length=0;const r=["A","B","C","D","E","F","G","H","I","J"],o=()=>r[Math.floor(Math.random()*r.length)],l=()=>Math.ceil(10*Math.random()).toString(),i=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=o(),r=l(),s=i(),n=e.canBePlaced(t.size,a,r,s);for(;!n;)a=o(),r=l(),s=i(),n=e.canBePlaced(t.size,a,r,s);n&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),g.push(t)}))})(e),i.refreshBoard(e),e===s&&i.createShipOverlay(e)},k=()=>{i.cVcBtn.classList.contains("selected")&&(b(s),b(n),p=!1,c(void 0,void 0,void 0,(function*(){i.removeBoardPointer();let e=!0;for(;!S()&&!p;)yield B(e,e?s:n),e=!e;p=!1,i.waiting(!1)})),i.refreshBoard(s))},L=()=>{p=!0,l.setPrevHit(null),l.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),s.clearBoard(),n.clearBoard(),y(),i.refreshBoard(s),i.refreshBoard(n),i.createShipOverlay(n),o(s,n,g),i.canBeStarted(),k()};return{init:()=>{i.setInitMessage(),s.generateArray(),n.generateArray(),i.renderBoard(s),i.renderBoard(n),y(),i.refreshBoard(n),i.createShipOverlay(n),o(s,n,g),i.canBeStarted(),k(),i.pVcBtn.disabled=!0},renew:()=>{i.refreshBoard(s),i.refreshBoard(n),i.createShipOverlay(s),i.createShipOverlay(n),o(s,n,g)},humanGameboard:s,computerGameboard:n,restart:L,newGame:()=>c(void 0,void 0,void 0,(function*(){p=!0,yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),p=!1,L()})),start:()=>{i.refreshBoard(s),b(n),p=!1,c(void 0,void 0,void 0,(function*(){let e=!0;for(;!(S()||p||(e&&(yield c(void 0,void 0,void 0,(function*(){i.setTurnMessagePvC(!0),i.setBoardPointer("player"),i.waiting(!1);const{col:e,row:t}=yield i.handleUserInput();l.attack(n,e,t);const r=n.getCell(e,t);n.canBeSunk(r)&&(n.sinkShip(n,e,t),a.sunk.play()),i.refreshBoard(n)})),e=!1),S()||p));)e||(yield c(void 0,void 0,void 0,(function*(){i.setTurnMessagePvC(!1),i.setBoardPointer("computer"),i.waiting(!0),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),i.pVcBtn.classList.contains("selected")&&!p&&(C(s),i.refreshBoard(s))})),e=!0);p=!1,i.waiting(!1)}))},randomizeShipsPlacement:b,humanShips:g}})();d.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,