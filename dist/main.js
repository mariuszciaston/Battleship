(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],o=[],r=(o,r)=>{const s=e.indexOf(o),l=t.indexOf(r);return-1===s||-1===l?null:a[l][s]},s=(o,r,s,l)=>{const i=e.indexOf(o),n=t.indexOf(r);return-1===i||-1===n?null:(a[n][i].status=s,l&&(a[n][i].takenBy=l),a[n][i])};return(()=>{for(let o=0;o<10;o+=1){a[o]=[];for(let r=0;r<10;r+=1)a[o][r]={col:e[r],row:t[o],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;o.length=0},getCell:r,setCell:s,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let r;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),o.forEach((e=>{null===e.takenBy&&o.splice(o.indexOf(e),1)})),t===n.humanGameboard?r="firstBoard":t===n.computerGameboard&&(r="secondBoard");document.querySelectorAll(`#${r} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,l,i,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?l:i);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:l,o=c?i:d[u+e];if("empty"!==r(t,o).status)return!1;s(t,o,"taken",a),h.push(r(t,o))}return o.push(h[0]),!0},receiveAttack:(e,t)=>{const a=r(e,t);return"taken"===a.status?(a.takenBy.hit(),s(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(s(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=r(e,t);return"empty"===a.status?(s(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const o=e.getCell(t,a);if(o&&o.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===o.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const o=String.fromCharCode(t.col.charCodeAt(0)+a.col),r=(Number(t.row)+a.row).toString();e.getCell(o,r)&&e.receiveAround(o,r)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const o=e.getCell(t,a);if(o&&o.takenBy&&o.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===o.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const o=String.fromCharCode(t.col.charCodeAt(0)+a.col),r=(Number(t.row)+a.row).toString();e.getCell(o,r)&&e.receiveAttack(o,r)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,o,s,l)=>{const i="horizontal"===l,n=i?e:t,c=n.indexOf(i?o:s);if(c<0||c+a>n.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=i?n[c+e]:o,a=i?s:n[c+e];d.push("empty"===r(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:o,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&s(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let o=1,r=!0,s=!0;const l=(e,t,c,d)=>{if(console.log("start finishingAttack prevHit",d),console.log("start finishingAttack lastHit",{col:t,row:c}),d.row===c)if(r){o=1,console.log("goRight");let s=String.fromCharCode(t.charCodeAt(0)+o);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)o+=1,s=String.fromCharCode(t.charCodeAt(0)+o);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,r=!1,l(e,s,c,d))}else{o=1,console.log("goLeft");let s=String.fromCharCode(t.charCodeAt(0)-o);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)o+=1,s=String.fromCharCode(t.charCodeAt(0)-o);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,r=!0,l(e,s,c,d))}else if(d.col===t)if(s){o=1,console.log("goDown");let r=(Number(c)+o).toString();for(;e.getCell(t,r)&&"hit"===e.getCell(t,r).status;)o+=1,r=(Number(c)+o).toString();e.getCell(t,r)&&"hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status?(e.receiveAttack(t,r),"hit"===e.getCell(t,r).status&&(i(a),n({col:t,row:r})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,s=!1,l(e,t,r,d))}else{o=1,console.log("goUp");let r=(Number(c)-o).toString();for(;e.getCell(t,r)&&"hit"===e.getCell(t,r).status;)o+=1,r=(Number(c)-o).toString();e.getCell(t,r)&&"hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status?(e.receiveAttack(t,r),"hit"===e.getCell(t,r).status&&(i(a),n({col:t,row:r})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,s=!0,l(e,t,r,d))}},i=e=>{t=e},n=e=>{a=e};return{attack:(e,t,o)=>{if("hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status){let r=e.receiveAttack(t,o);return"hit"===r&&(i(a),n({col:t,row:o})),r}return"already shot"},randomAttack:r=>{let s,l;do{s=e[Math.floor(Math.random()*e.length)],l=Math.ceil(10*Math.random()).toString()}while("hit"===r.getCell(s,l).status||"miss"===r.getCell(s,l).status);if("hit"!==r.getCell(s,l).status&&"miss"!==r.getCell(s,l).status){const e=r.receiveAttack(s,l);return"hit"===r.getCell(s,l).status&&(i(a),n({col:s,row:l}),console.log("---------------"),console.log("randomAttack prevHit",t),console.log("randomAttack lastHit",a),console.log("randomAttack range",o)),{result:e,col:s,row:l}}return{result:"already shot",col:s,row:l}},followupAttack:(e,r,s)=>{const l=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((t=>{const a=String.fromCharCode(r.charCodeAt(0)+t.col),o=(Number(s)+t.row).toString(),l=e.getCell(a,o);return!(!l||"miss"===l.status||"hit"===l.status)}));if(l.length>0){const c=l[Math.floor(Math.random()*l.length)],d=String.fromCharCode(r.charCodeAt(0)+c.col),u=(Number(s)+c.row).toString();e.receiveAttack(d,u),o=1,"hit"===e.getCell(d,u).status&&(i(a),n({col:d,row:u}),console.log("---------------"),console.log("followupAttack prevHit",t),console.log("followupAttack lastHit",a),console.log("followupAttack range",o))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:l,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:n}};var o=function(e,t,a,o){return new(a||(a=Promise))((function(r,s){function l(e){try{n(o.next(e))}catch(e){s(e)}}function i(e){try{n(o.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((o=o.apply(e,t||[])).next())}))};const r=(()=>{const e=document.querySelector("#boards"),t=document.querySelector("#playerVsComputer"),a=document.querySelector("#newGame"),r=document.querySelector("#computerVsComputer"),s=document.querySelector("#start"),l=document.querySelector("#randomPlacement"),i=[t,a,r,s,l],c=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},d=e=>{let t;e===n.humanGameboard?t="firstBoard":e===n.computerGameboard&&(t="secondBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",c(e,a)},u=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},h=(e,a)=>{a.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===t&&o(void 0,void 0,void 0,(function*(){m(!0),i.forEach((e=>e.disabled=!0)),t.textContent="Restarting...",yield new Promise((e=>setTimeout(e,1e3))),t.textContent="Player vs Computer",i.forEach((e=>e.disabled=!1)),m(!1)})),e===r&&o(void 0,void 0,void 0,(function*(){m(!0),i.forEach((e=>e.disabled=!0)),r.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),r.textContent="Computer vs Computer",i.forEach((e=>e.disabled=!1)),m(!1),s.disabled=!0,l.disabled=!0})),n.restart())},m=e=>{document.documentElement.classList.toggle("wait",e)},f=(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),o=t.takenBy.name.toLowerCase(),r=t.takenBy.size,s=t.takenBy.isVertical;a.classList.add("ship",o),a.setAttribute("data-size",`${r}`),a.setAttribute("data-name",`${o}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const l=()=>{s?s&&(a.style.width=n/16+"rem",a.style.height=r*(n/16)+"rem"):(a.style.width=r*(n/16)+"rem",a.style.height=n/16+"rem")};let i,n=document.querySelector(".board .cell").getBoundingClientRect().width;l(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,l()})),"first"===e?i="firstBoard":"second"===e&&(i="secondBoard");document.querySelector(`#${i} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},g=()=>{5===n.humanGameboard.shipsPlaced.length&&0===n.computerGameboard.shipsPlaced.length?s.disabled=!1:s.disabled=!0},p=(e,t,a)=>{let r,s,l,i,c=0,u=0,h=[];const m={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},v=document.querySelector("#firstBoard"),w=document.querySelector("#secondBoard"),S=v.querySelectorAll(".cell"),y=w.querySelectorAll(".cell"),B=[];for(let e of S)e.classList.contains("taken")||B.push(e);for(let e of y)e.classList.contains("taken")||B.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",k),e.addEventListener("mouseup",L),e.addEventListener("dragstart",b),e.addEventListener("dragend",H),e.addEventListener("contextmenu",G),B.forEach((e=>{e.addEventListener("contextmenu",V)}))}));let C=null;function k(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const o=a.target.getAttribute("data-name");let r=e.shipsPlaced.filter((e=>o!==e.takenBy.name.toLowerCase())),s=t.shipsPlaced.filter((e=>o!==e.takenBy.name.toLowerCase()));r.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),s.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d(e),d(t),f("first",e.shipsPlaced),f("second",t.shipsPlaced),p(e,t,n.humanShips)}function L(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d(e),d(t),f("first",e.shipsPlaced),f("second",t.shipsPlaced),p(e,t,n.humanShips)}function b(a){return o(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const o=a.target;o.style.visibility="hidden",this.classList.add("dragging"),r=o.getAttribute("data-name"),s=Number(o.getAttribute("data-size")),c=a.offsetX,u=a.offsetY,l=m[r],i=l.isVertical?"vertical":"horizontal","firstBoard"===o.closest(".board").id&&e.removeShip(l,e),"secondBoard"===o.closest(".board").id&&t.removeShip(l,t)}))}function A(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(u/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let o=l.isVertical?t+10*e:t+e;S[o]&&(a.push(S[o]),h.push(S[o]))}z(a)&&(a.forEach((e=>{e.classList.add("highlight")})),C||(C=q(h,s)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(u/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let o=l.isVertical?t+10*e:t+e;y[o]&&(a.push(y[o]),h.push(y[o]))}z(a)&&(a.forEach((e=>{e.classList.add("highlight")})),C||(C=q(h,s)))}}}function P(){h.forEach((e=>{e.classList.remove("highlight")})),h=[]}function E(a){h.forEach((e=>{e.classList.remove("highlight")}));const o=q(h,s),r=a.target;"firstBoard"===r.closest(".board").id&&l&&null!==C&&(e.canBePlaced(l.size,o[0].dataset.col,o[0].dataset.row,i)?(e.placeShip(l,o[0].dataset.col,o[0].dataset.row,i),e.reserveSpace(e,o[0].dataset.col,o[0].dataset.row)):(e.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),e.reserveSpace(e,C[0].dataset.col,C[0].dataset.row))),"secondBoard"===r.closest(".board").id&&l&&null!==C&&(t.canBePlaced(l.size,o[0].dataset.col,o[0].dataset.row,i)?(t.placeShip(l,o[0].dataset.col,o[0].dataset.row,i),t.reserveSpace(t,o[0].dataset.col,o[0].dataset.row)):(t.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),t.reserveSpace(t,C[0].dataset.col,C[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d(e),d(t),f("first",e.shipsPlaced),f("second",t.shipsPlaced),p(e,t,n.humanShips),g(),C=null}function H(a){const o=a.target;o.style.visibility="visible",this.classList.remove("dragging"),0===h.length&&("firstBoard"===o.closest(".board").id?C&&e.canBePlaced(l.size,C[0].dataset.col,C[0].dataset.row,i)&&(e.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),e.reserveSpace(e,C[0].dataset.col,C[0].dataset.row),d(e),d(t),f("first",e.shipsPlaced),f("second",t.shipsPlaced),p(e,t,n.humanShips)):"secondBoard"===o.closest(".board").id&&C&&t.canBePlaced(l.size,C[0].dataset.col,C[0].dataset.row,i)&&(t.placeShip(l,C[0].dataset.col,C[0].dataset.row,i),t.reserveSpace(t,C[0].dataset.col,C[0].dataset.row),d(e),d(t),f("first",e.shipsPlaced),f("second",t.shipsPlaced),p(e,t,n.humanShips)))}function z(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===s&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function q(e,t){return e.slice(Math.min(e.length-t,0))}function G(a){a.preventDefault();const o=a.target;let c;"firstBoard"===o.closest(".board").id&&(c=e),"secondBoard"===o.closest(".board").id&&(c=t),r=o.getAttribute("data-name"),s=Number(o.getAttribute("data-size")),l=m[r];const u=l,h=c.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===r));c.removeShip(l,c),c.removeReservedSpace(c),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),u.rotate(),i=u.isVertical?"vertical":"horizontal",c.canBePlaced(u.size,h[0].col,h[0].row,i)||(u.rotate(),i=u.isVertical?"vertical":"horizontal"),c.placeShip(u,h[0].col,h[0].row,i),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),d(c),f("first",e.shipsPlaced),f("second",t.shipsPlaced),p(e,t,n.humanShips)}function V(e){e.preventDefault()}S.forEach(((e,t)=>{e.addEventListener("dragover",A(t)),e.addEventListener("dragleave",P),e.addEventListener("drop",E)})),y.forEach(((e,t)=>{e.addEventListener("dragover",A(t)),e.addEventListener("dragleave",P),e.addEventListener("drop",E)}))};return t.addEventListener("click",(()=>{h(t,r);document.querySelector("#secondBoard").classList.remove("start")})),r.addEventListener("click",(()=>{h(r,t);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start")})),a.addEventListener("click",(()=>o(void 0,void 0,void 0,(function*(){yield o(void 0,void 0,void 0,(function*(){m(!0),i.forEach((e=>e.disabled=!0)),a.textContent="Restarting...",yield n.newGame(),a.textContent="New Game",i.forEach((e=>e.disabled=!1)),m(!1),g()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),t.classList.contains("selected")&&e.classList.remove("start"),r.classList.contains("selected")&&(e.classList.add("start"),l.disabled=!0)})))),s.addEventListener("click",(()=>{n.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),s.disabled=!0,l.disabled=!0})),l.addEventListener("click",(()=>{n.computerGameboard.clearBoard(),d(n.computerGameboard),n.randomizeShipsPlacement("first",n.humanGameboard),p(n.humanGameboard,n.computerGameboard,n.humanShips),g()})),{renderBoard:t=>{const a=document.createElement("div");a.classList.add("board"),t===n.humanGameboard?a.id="firstBoard":t===n.computerGameboard&&(a.id="secondBoard"),c(t,a),e.append(a)},refreshBoard:d,handleUserInput:()=>o(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(u(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:t,cVcBtn:r,waiting:m,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:f,dragAndDrop:p,canBeStarted:g}})(),s=r;var l=function(e,t,a,o){return new(a||(a=Promise))((function(r,s){function l(e){try{n(o.next(e))}catch(e){s(e)}}function i(e){try{n(o.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((o=o.apply(e,t||[])).next())}))};const i=(()=>{const o=e(),r=e(),n=a(),c=a();let d=!0,u=t("Carrier"),h=t("Battleship"),m=t("Destroyer"),f=t("Submarine"),g=t("PatrolBoat");const p=[u,h,m,f,g],v=()=>{r.placeShip(u,"A","1","horizontal"),r.placeShip(h,"A","3","horizontal"),r.placeShip(m,"A","5","horizontal"),r.placeShip(f,"A","7","horizontal"),r.placeShip(g,"A","9","horizontal"),r.reserveSpace(r,"A","1"),r.reserveSpace(r,"A","3"),r.reserveSpace(r,"A","5"),r.reserveSpace(r,"A","7"),r.reserveSpace(r,"A","9")},w=()=>(r.allSunk(r)||!!o.allSunk(o))&&(s.removeBoardPointer(),!0),S=e=>{let t;if(e===o?t=c:e===r&&(t=n),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),w())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),w()))return}else{const{col:a,row:o}=t.randomAttack(e);if("hit"===e.getCell(a,o).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:o})),"hit"===e.getCell(a,o).status&&e.getCell(a,o).takenBy.isSunk()&&(e.sinkShip(e,a,o),t.setPrevHit(null),t.setLastHit(null),w()))return}},y=(e,a)=>{a.clearBoard(),(e=>{let a;e===o?(u=t("Carrier"),h=t("Battleship"),m=t("Destroyer"),f=t("Submarine"),g=t("PatrolBoat"),a=[u,h,m,f,g]):e===r&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);i.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],l=()=>s[Math.floor(Math.random()*s.length)],n=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=l(),o=n(),r=c(),s=e.canBePlaced(t.size,a,o,r);for(;!s;)a=l(),o=n(),r=c(),s=e.canBePlaced(t.size,a,o,r);s&&(e.placeShip(t,a,o,r),e.reserveSpace(e,a,o)),i.humanShips.push(t)}))})(a),s.refreshBoard(a),"first"===e&&s.createShipOverlay("first",a.shipsPlaced)},B=()=>{s.cVcBtn.classList.contains("selected")&&(y("first",o),y("second",r),d=!1,l(void 0,void 0,void 0,(function*(){s.removeBoardPointer();let e=!0;for(;!w()&&!d;){if(s.waiting(!0),e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||d)break;S(o),s.refreshBoard(o),e=!1}if(w()||d)break;if(!e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||d)break;S(r),s.refreshBoard(r),e=!0}}d=!1,s.waiting(!1)})),s.refreshBoard(o))},C=()=>{d=!0,n.setPrevHit(null),n.setLastHit(null),c.setPrevHit(null),c.setLastHit(null),o.clearBoard(),r.clearBoard(),v(),s.refreshBoard(o),s.refreshBoard(r),s.createShipOverlay("second",r.shipsPlaced),s.dragAndDrop(o,r,p),s.canBeStarted(),B()};return{init:()=>{s.renderBoard(o),s.renderBoard(r),v(),s.refreshBoard(r),s.createShipOverlay("second",r.shipsPlaced),s.dragAndDrop(o,r,p),s.canBeStarted(),B()},humanGameboard:o,computerGameboard:r,restart:C,newGame:()=>l(void 0,void 0,void 0,(function*(){d=!0,yield new Promise((e=>setTimeout(e,1e3))),d=!1,C()})),start:()=>{s.refreshBoard(o),y("second",r),d=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!w()&&!d;){if(e){s.setBoardPointer("player"),s.waiting(!1);const{col:t,row:a}=yield s.handleUserInput();n.attack(r,t,a),r.sinkShip(r,t,a),s.refreshBoard(r),e=!1}if(w()||d)break;if(!e){if(s.setBoardPointer("computer"),s.waiting(!0),yield new Promise((e=>setTimeout(e,1e3))),!s.pVcBtn.classList.contains("selected")||d)break;S(o),s.refreshBoard(o),e=!0}}d=!1,s.waiting(!1)}))},randomizeShipsPlacement:y,humanShips:p}})(),n=i;n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,