(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],o=[],r=(r,l)=>{const s=t.indexOf(r),a=e.indexOf(l);return-1===s||-1===a?null:o[a][s]},l=(r,l,s,a)=>{const n=t.indexOf(r),i=e.indexOf(l);return-1===n||-1===i?null:(o[i][n].status=s,a&&(o[i][n].takenBy=a),o[i][n])};return(()=>{for(let r=0;r<10;r+=1){o[r]=[];for(let l=0;l<10;l+=1)o[r][l]={col:t[l],row:e[r],status:"empty",takenBy:void 0}}})(),{clearBoard:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)o[t][e].status="empty",o[t][e].takenBy=void 0},getCell:r,setCell:l,placeShip:(o,s,a,n)=>{const i="horizontal"===n,c=i?t:e,u=c.indexOf(i?s:a);if(u<0||u+o.size>c.length)return!1;for(let t=0;t<o.size;t+=1){const e=i?c[u+t]:s,n=i?a:c[u+t];if("empty"!==r(e,n).status)return!1;l(e,n,"taken",o)}return!0},receiveAttack:(t,e)=>{const o=r(t,e);return"taken"===o.status?(o.takenBy.hit(),l(t,e,"hit"),o.status):"empty"===o.status?(l(t,e,"miss"),o.status):null},sinkShip:(t,e,o)=>{const r=t.getCell(e,o);if(r&&r.takenBy&&r.takenBy.isSunk()){t.array.flat().filter((t=>t.takenBy&&t.takenBy.name===r.takenBy.name)).forEach((e=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((o=>{const r=String.fromCharCode(e.col.charCodeAt(0)+o.col),l=(Number(e.row)+o.row).toString();t.getCell(r,l)&&t.receiveAttack(r,l)}))}))}},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===o[t][e].status&&!o[t][e].takenBy.isSunk())return!1;return!0},array:o}},e=t=>{let e;return"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2),{name:t,size:e,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===e}}},o=()=>{const t=["A","B","C","D","E","F","G","H","I","J"];let e=null,o=null;let r=1,l=!0;const s=(t,e,a,n)=>{if(console.log("start finishingAttack prevHit",n),console.log("start finishingAttack lastHit",{col:e,row:a}),n.row===a)if(l){r=1,console.log("goRight");let i=String.fromCharCode(e.charCodeAt(0)+r);for(;t.getCell(i,a)&&"hit"===t.getCell(i,a).status;)r+=1,i=String.fromCharCode(e.charCodeAt(0)+r);if(t.getCell(i,a)&&"hit"!==t.getCell(i,a).status&&"miss"!==t.getCell(i,a).status){t.receiveAttack(i,a);const e=t.getCell(i,a);"hit"===e.status&&(n=o,o={col:e.col,row:e.row}),console.log("prevHit",n),console.log("lastHit",o),console.log("range",r),console.log("---------------"),r+=1}t.getCell(i,a)&&"miss"!==t.getCell(i,a).status||(r=1,l=!1),t.getCell(i,a)||s(t,i,a,n)}else{r=1,console.log("goLeft");let i=String.fromCharCode(e.charCodeAt(0)-r);for(;t.getCell(i,a)&&"hit"===t.getCell(i,a).status;)r+=1,i=String.fromCharCode(e.charCodeAt(0)-r);if(t.getCell(i,a)&&"hit"!==t.getCell(i,a).status&&"miss"!==t.getCell(i,a).status){t.receiveAttack(i,a);const e=t.getCell(i,a);"hit"===e.status&&(n=o,o={col:e.col,row:e.row}),console.log("prevHit",n),console.log("lastHit",o),console.log("range",r),console.log("---------------"),r+=1}t.getCell(i,a)&&"miss"!==t.getCell(i,a).status||(r=1,l=!0),t.getCell(i,a)||s(t,i,a,n)}};return{attack:(t,e,o)=>"hit"!==t.getCell(e,o).status&&"miss"!==t.getCell(e,o).status?t.receiveAttack(e,o):"already shot",randomAttack:l=>{let s,a;do{s=t[Math.floor(Math.random()*t.length)],a=Math.ceil(10*Math.random()).toString()}while("hit"===l.getCell(s,a).status||"miss"===l.getCell(s,a).status);if("hit"!==l.getCell(s,a).status&&"miss"!==l.getCell(s,a).status){const t=l.receiveAttack(s,a),n=l.getCell(s,a);return"hit"===n.status&&(e=o,o={col:n.col,row:n.row},console.log("---------------"),console.log("randomAttack prevHit",e),console.log("randomAttack lastHit",o),console.log("randomAttack range",r)),{result:t,col:s,row:a}}return{result:"already shot",col:s,row:a}},followupAttack:(t,l,s)=>{const a=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((e=>{const o=String.fromCharCode(l.charCodeAt(0)+e.col),r=(Number(s)+e.row).toString(),a=t.getCell(o,r);return!(!a||"miss"===a.status||"hit"===a.status)}));if(a.length>0){const n=a[Math.floor(Math.random()*a.length)],i=String.fromCharCode(l.charCodeAt(0)+n.col),c=(Number(s)+n.row).toString();t.receiveAttack(i,c),r=1;const u=t.getCell(i,c);"hit"===u.status&&(e=o,o={col:u.col,row:u.row},console.log("---------------"),console.log("followupAttack prevHit",e),console.log("followupAttack lastHit",o),console.log("followupAttack range",r))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:s,prevHit:e,lastHit:o,getPrevHit:()=>e,getLastHit:()=>o,setPrevHit:t=>{e=t},setLastHit:t=>{o=t}}};var r=function(t,e,o,r){return new(o||(o=Promise))((function(l,s){function a(t){try{i(r.next(t))}catch(t){s(t)}}function n(t){try{i(r.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?l(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,n)}i((r=r.apply(t,e||[])).next())}))};const l=(()=>{const t=document.querySelector("#wrapper"),e=document.createElement("div");e.id="boards",t.prepend(e);const o=document.querySelector("#playerVsComputer"),l=document.querySelector("#computerVsComputer"),s=document.querySelector("#newGame"),a=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const o=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(o)}))}))},i=t=>{if(!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){return{col:t.target.getAttribute("data-col"),row:t.target.getAttribute("data-row")}}};const c=(t,e)=>{e.classList.remove("selected"),t.classList.contains("selected")||(t.classList.add("selected"),n.restart())};return o.addEventListener("click",(()=>c(o,l))),l.addEventListener("click",(()=>c(l,o))),s.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){s.disabled=!0,s.textContent="Restarting",yield n.newGame(),s.textContent="New Game",s.disabled=!1})))),{renderBoard:t=>{const o=document.createElement("div");o.classList.add("board"),t===n.humanGameboard?o.id="firstBoard":t===n.computerGameboard&&(o.id="secondBoard"),a(t,o),e.append(o)},refreshBoard:t=>{const e=t===n.humanGameboard?"firstBoard":"secondBoard",o=document.querySelector(`#${e}`);o.innerHTML="",a(t,o)},handleUserInput:function(){return r(this,void 0,void 0,(function*(){const t=document.querySelectorAll("#secondBoard .cell");let e;do{e=yield new Promise((e=>{t.forEach((t=>{t.classList.contains("hit")||t.classList.contains("miss")||t.addEventListener("click",(t=>{e(i(t))}),{once:!0})}))}))}while(!e);return{col:e.col.toString(),row:e.row.toString()}}))},pVcBtn:o,cVcBtn:l}})(),s=l;var a=function(t,e,o,r){return new(o||(o=Promise))((function(l,s){function a(t){try{i(r.next(t))}catch(t){s(t)}}function n(t){try{i(r.throw(t))}catch(t){s(t)}}function i(t){var e;t.done?l(t.value):(e=t.value,e instanceof o?e:new o((function(t){t(e)}))).then(a,n)}i((r=r.apply(t,e||[])).next())}))};const n=(()=>{const r=t(),l=t(),n=o(),i=o();let c=!1;const u=e("Carrier"),d=e("Battleship"),g=e("Destroyer"),h=e("Submarine"),f=e("Patrol Boat"),m=e("Carrier"),p=e("Battleship"),C=e("Destroyer"),w=e("Submarine"),k=e("Patrol Boat"),v=()=>{r.placeShip(u,"A","1","horizontal"),r.placeShip(d,"A","3","horizontal"),r.placeShip(g,"A","5","horizontal"),r.placeShip(h,"A","7","horizontal"),r.placeShip(f,"A","9","horizontal"),l.placeShip(m,"A","1","vertical"),l.placeShip(p,"C","1","vertical"),l.placeShip(C,"E","1","vertical"),l.placeShip(w,"G","1","vertical"),l.placeShip(k,"I","1","vertical")},H=()=>l.allSunk()?(console.log("All computer ships are sunk. Human player won!"),!0):!!r.allSunk()&&(console.log("All human ships are sunk. Computer player won!"),!0),y=t=>{if(console.log("start computerAI",i.getPrevHit()),(t=>t.array.flat().some((t=>"hit"===t.status&&!1===t.takenBy.isSunk())))(t))null!==i.getPrevHit()&&null!==i.getLastHit()&&t.getCell(i.getLastHit().col,i.getLastHit().row).takenBy.hitCount>=2&&t.getCell(i.getLastHit().col,i.getLastHit().row).takenBy.hitCount<=4?(console.log("FINISH: >= 2 trafienia w statek",i.getPrevHit()),i.finishingAttack(t,i.getLastHit().col,i.getLastHit().row,i.getPrevHit()),t.sinkShip(t,i.getLastHit().col,i.getLastHit().row)):1===t.getCell(i.getLastHit().col,i.getLastHit().row).takenBy.hitCount&&(i.followupAttack(t,i.getLastHit().col,i.getLastHit().row),t.sinkShip(t,i.getLastHit().col,i.getLastHit().row));else{const{col:e,row:o}=i.randomAttack(t);"hit"===t.getCell(e,o).status?(console.log("Cell hit, assigning new values to prevHit and lastHit"),i.setPrevHit(i.getLastHit()),i.setLastHit({col:e,row:o}),console.log("New value of prevHit:",i.getPrevHit())):console.log("Cell not hit, prevHit remains:",i.getPrevHit()),"hit"===t.getCell(e,o).status&&t.getCell(e,o).takenBy.isSunk()&&(t.sinkShip(t,e,o),i.setPrevHit(null),i.setLastHit(null),H()&&console.log("koniec"))}},S=()=>(console.log("start pickGameMode",i.getPrevHit()),s.pVcBtn.classList.contains("selected")?a(void 0,void 0,void 0,(function*(){console.log("start playerVsComputerMode",i.getPrevHit());let t=!0;for(;!H()&&!c;){if(t){const{col:e,row:o}=yield s.handleUserInput();n.attack(l,e,o),l.sinkShip(l,e,o),s.refreshBoard(l),t=!1}if(!t){if(yield new Promise((t=>setTimeout(t,100))),!s.pVcBtn.classList.contains("selected")||c)break;console.log("before computerAI",i.getPrevHit()),y(r),s.refreshBoard(r),t=!0}}c=!1})):s.cVcBtn.classList.contains("selected")?a(void 0,void 0,void 0,(function*(){let t=!0;for(;!H()&&!c;){if(t){if(yield new Promise((t=>setTimeout(t,500))),!s.cVcBtn.classList.contains("selected")||c)break;const{col:e,row:o}=i.randomAttack(r);r.sinkShip(r,e,o),s.refreshBoard(r),t=!1}if(!t){if(yield new Promise((t=>setTimeout(t,500))),!s.cVcBtn.classList.contains("selected")||c)break;const{col:e,row:o}=n.randomAttack(l);l.sinkShip(l,e,o),s.refreshBoard(l),t=!0}}c=!1})):void 0),B=()=>{i.setPrevHit(null),i.setLastHit(null),r.clearBoard(),l.clearBoard(),v(),s.refreshBoard(r),s.refreshBoard(l),S()};return{start:()=>{v(),s.renderBoard(r),s.renderBoard(l),console.log("before pickGameMode",i.getPrevHit()),S()},humanGameboard:r,computerGameboard:l,newGame:()=>a(void 0,void 0,void 0,(function*(){c=!0,yield new Promise((t=>setTimeout(t,1e3))),c=!1,B()})),restart:B}})();n.start()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,