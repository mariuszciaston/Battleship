(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],s=(r,s)=>{const o=e.indexOf(r),i=t.indexOf(s);return-1===o||-1===i?null:a[i][o]},o=(r,s,o,i)=>{const l=e.indexOf(r),n=t.indexOf(s);return-1===l||-1===n?null:(a[n][l].status=o,i&&(a[n][l].takenBy=i),a[n][l])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:e[s],row:t[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;r.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let s;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),r.forEach((e=>{null===e.takenBy&&r.splice(r.indexOf(e),1)})),t===u.humanGameboard?s="firstBoard":t===u.computerGameboard&&(s="secondBoard");document.querySelectorAll(`#${s} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,i,l,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?i:l);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:i,r=c?l:d[u+e];if("empty"!==s(t,r).status)return!1;o(t,r,"taken",a),h.push(s(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=s(e,t);return"taken"===a.status?(a.takenBy.hit(),o(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(o(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=s(e,t);return"empty"===a.status?(o(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,o,i)=>{const l="horizontal"===i,n=l?e:t,c=n.indexOf(l?r:o);if(c<0||c+a>n.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=l?n[c+e]:r,a=l?o:n[c+e];d.push("empty"===s(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,s=!0,o=!0;const i=(e,t,c,d)=>{if(d.row===c)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!1,i(e,o,c,d))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!0,i(e,o,c,d))}else if(d.col===t)if(o){r=1;let s=(Number(c)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!1,i(e,t,s,d))}else{r=1;let s=(Number(c)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!0,i(e,t,s,d))}},l=e=>{t=e},n=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s&&(l(a),n({col:t,row:r})),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status&&(l(a),n({col:r,row:s})),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),i=e.getCell(r,o);return!(!i||"miss"===i.status||"hit"===i.status)}));if(o.length>0){const i=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+i.col),d=(Number(s)+i.row).toString();e.receiveAttack(c,d),r=1,"hit"===e.getCell(c,d).status&&(l(a),n({col:c,row:d}))}},finishingAttack:i,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:l,setLastHit:n}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const s=(e,t,a)=>{let o,i,l,c,d=0,h=0,m=[];const f={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},p=document.querySelector("#firstBoard"),v=document.querySelector("#secondBoard"),g=p.querySelectorAll(".cell"),S=v.querySelectorAll(".cell"),y=[];for(let e of g)e.classList.contains("taken")||y.push(e);for(let e of S)e.classList.contains("taken")||y.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",w),e.addEventListener("mouseup",C),e.addEventListener("dragstart",b),e.addEventListener("dragend",E),e.addEventListener("contextmenu",M),y.forEach((e=>{e.addEventListener("contextmenu",V)}))}));let B=null;function w(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let o=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),i=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));o.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),i.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)}function C(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)}function b(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;r.style.visibility="hidden",this.classList.add("dragging"),o=r.getAttribute("data-name"),i=Number(r.getAttribute("data-size")),d=a.offsetX,h=a.offsetY,l=f[o],c=l.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&e.removeShip(l,e),"secondBoard"===r.closest(".board").id&&t.removeShip(l,t)}))}function L(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(h/this.offsetHeight):Math.floor(d/this.offsetWidth));const a=[];for(let e=0;e<i;e++){let r=l.isVertical?t+10*e:t+e;g[r]&&(a.push(g[r]),m.push(g[r]))}A(a)&&(a.forEach((e=>{e.classList.add("highlight")})),B||(B=H(m,i)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(h/this.offsetHeight):Math.floor(d/this.offsetWidth));const a=[];for(let e=0;e<i;e++){let r=l.isVertical?t+10*e:t+e;S[r]&&(a.push(S[r]),m.push(S[r]))}A(a)&&(a.forEach((e=>{e.classList.add("highlight")})),B||(B=H(m,i)))}}}function k(){m.forEach((e=>{e.classList.remove("highlight")})),m=[]}function P(a){m.forEach((e=>{e.classList.remove("highlight")}));const r=H(m,i),o=a.target;"firstBoard"===o.closest(".board").id&&l&&null!==B&&(e.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,c)?(e.placeShip(l,r[0].dataset.col,r[0].dataset.row,c),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(l,B[0].dataset.col,B[0].dataset.row,c),e.reserveSpace(e,B[0].dataset.col,B[0].dataset.row))),"secondBoard"===o.closest(".board").id&&l&&null!==B&&(t.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,c)?(t.placeShip(l,r[0].dataset.col,r[0].dataset.row,c),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(l,B[0].dataset.col,B[0].dataset.row,c),t.reserveSpace(t,B[0].dataset.col,B[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips),n.canBeStarted(),n.setStartMessage(),B=null}function E(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===m.length&&("firstBoard"===r.closest(".board").id?B&&e.canBePlaced(l.size,B[0].dataset.col,B[0].dataset.row,c)&&(e.placeShip(l,B[0].dataset.col,B[0].dataset.row,c),e.reserveSpace(e,B[0].dataset.col,B[0].dataset.row),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)):"secondBoard"===r.closest(".board").id&&B&&t.canBePlaced(l.size,B[0].dataset.col,B[0].dataset.row,c)&&(t.placeShip(l,B[0].dataset.col,B[0].dataset.row,c),t.reserveSpace(t,B[0].dataset.col,B[0].dataset.row),n.refreshBoard(e),n.refreshBoard(t),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips)))}function A(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===i&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function H(e,t){return e.slice(Math.min(e.length-t,0))}function M(a){a.preventDefault();const r=a.target;let d;"firstBoard"===r.closest(".board").id&&(d=e),"secondBoard"===r.closest(".board").id&&(d=t),o=r.getAttribute("data-name"),i=Number(r.getAttribute("data-size")),l=f[o];const h=l,m=d.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===o));d.removeShip(l,d),d.removeReservedSpace(d),d.shipsPlaced.forEach((e=>{d.reserveSpace(d,e.col,e.row)})),h.rotate(),c=h.isVertical?"vertical":"horizontal",d.canBePlaced(h.size,m[0].col,m[0].row,c)||(h.rotate(),c=h.isVertical?"vertical":"horizontal"),d.placeShip(h,m[0].col,m[0].row,c),d.shipsPlaced.forEach((e=>{d.reserveSpace(d,e.col,e.row)})),n.refreshBoard(d),n.createShipOverlay("first",e.shipsPlaced),n.createShipOverlay("second",t.shipsPlaced),s(e,t,u.humanShips),n.canBeStarted()&&n.fillCells("second")}function V(e){e.preventDefault()}g.forEach(((e,t)=>{e.addEventListener("dragover",L(t)),e.addEventListener("dragleave",k),e.addEventListener("drop",P)})),S.forEach(((e,t)=>{e.addEventListener("dragover",L(t)),e.addEventListener("dragleave",k),e.addEventListener("drop",P)}))},o=s;var i=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const l=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),r=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),n=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,r,s,n,c],h=document.getElementsByName("speed"),m=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},f=e=>{let t;e===u.humanGameboard?t="firstBoard":e===u.computerGameboard&&(t="secondBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",m(e,a)},p=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},v=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&i(void 0,void 0,void 0,(function*(){L("first"),g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,b()))),d.forEach((e=>e.disabled=!1)),g(!1),S(),y()})),e===s&&i(void 0,void 0,void 0,(function*(){g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,b()))),d.forEach((e=>e.disabled=!1)),g(!1),n.disabled=!0,c.disabled=!0,s.disabled=!0})),u.restart(),w())},g=e=>{document.documentElement.classList.toggle("wait",e)},S=()=>5===u.humanGameboard.shipsPlaced.length&&0===u.computerGameboard.shipsPlaced.length?(L("second"),n.disabled=!1,!0):(n.disabled=!0,!1),y=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},B=()=>{S()&&(e.textContent="You can now begin the game. Press start!")},w=()=>{e.textContent="Restarting..."};a.addEventListener("click",(()=>{L("first"),v(a,s);document.querySelector("#secondBoard").classList.remove("start"),k("first"),n.disabled=!0,a.disabled=!0})),s.addEventListener("click",(()=>{L("first"),L("second"),v(s,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),Promise.all([k("first"),k("second")]),n.disabled=!0,c.disabled=!0,s.disabled=!0})),r.addEventListener("click",(()=>i(void 0,void 0,void 0,(function*(){L("first"),s.classList.contains("selected")&&(L("second"),n.disabled=!0,c.disabled=!0,s.disabled=!0),l.removeBoardPointer(),yield i(void 0,void 0,void 0,(function*(){w(),g(!0),d.forEach((e=>e.disabled=!0)),yield u.newGame(),d.forEach((e=>e.disabled=!1)),g(!1),S(),a.classList.contains("selected")&&y()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),k("first"),n.disabled=!0,a.disabled=!0),s.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([k("first"),k("second")]),n.disabled=!0,c.disabled=!0,s.disabled=!0)})))),n.addEventListener("click",(()=>{u.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),k("second"),n.disabled=!0,c.disabled=!0})),c.addEventListener("click",(()=>{u.computerGameboard.clearBoard(),f(u.computerGameboard),u.randomizeShipsPlacement("first",u.humanGameboard),o(u.humanGameboard,u.computerGameboard,u.humanShips),S(),B(),L("second")}));let C=1e3;h.forEach((e=>{e.addEventListener("click",(()=>{let t=e;t.checked&&(C=Number(t.value))}))}));const b=()=>C;window.addEventListener("resize",y);const L=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},k=e=>i(void 0,void 0,void 0,(function*(){let t;g(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,r)=>{setTimeout((()=>{t.classList.remove("filled"),r===a.length-1&&e()}),b()/120*r)}))})),g(!1)}));return{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===u.humanGameboard?a.id="firstBoard":e===u.computerGameboard&&(a.id="secondBoard"),m(e,a),t.append(a)},refreshBoard:f,handleUserInput:()=>i(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(p(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:s,waiting:g,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${s}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const i=()=>{const e=document.querySelector("html"),t=parseFloat(window.getComputedStyle(e,null).getPropertyValue("font-size"));o?o&&(a.style.width=n/t+"rem",a.style.height=s*(n/t)+"rem"):(a.style.width=s*(n/t)+"rem",a.style.height=n/t+"rem")};let l,n=document.querySelector(".board .cell").getBoundingClientRect().width;i(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,i()})),"first"===e?l="firstBoard":"second"===e&&(l="secondBoard");document.querySelector(`#${l} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},canBeStarted:S,setInitMessage:y,setStartMessage:B,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:w,getSpeedValue:b,fillCells:L,unFillCells:k}})(),n=l;var c=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const d=(()=>{const r=e(),s=e(),i=a(),l=a();let u=!0,h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),p=t("Submarine"),v=t("PatrolBoat");const g=[h,m,f,p,v],S=()=>{s.placeShip(h,"A","1","horizontal"),s.placeShip(m,"A","3","horizontal"),s.placeShip(f,"A","5","horizontal"),s.placeShip(p,"A","7","horizontal"),s.placeShip(v,"A","9","horizontal"),s.reserveSpace(s,"A","1"),s.reserveSpace(s,"A","3"),s.reserveSpace(s,"A","5"),s.reserveSpace(s,"A","7"),s.reserveSpace(s,"A","9")},y=()=>s.allSunk(s)?(n.removeBoardPointer(),n.pVcBtn.classList.contains("selected")&&n.setGameOverMessagePvC("player"),n.cVcBtn.classList.contains("selected")&&n.setGameOverMessageCvC("player"),!0):!!r.allSunk(r)&&(n.removeBoardPointer(),n.pVcBtn.classList.contains("selected")&&n.setGameOverMessagePvC("computer"),n.cVcBtn.classList.contains("selected")&&n.setGameOverMessageCvC("computer"),!0),B=e=>{let t;if(e===r?t=l:e===s&&(t=i),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),y())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),y()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),y()))return}},w=(e,a)=>{a.clearBoard(),(e=>{let a;e===r?(h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),p=t("Submarine"),v=t("PatrolBoat"),a=[h,m,f,p,v]):e===s&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);d.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],i=()=>o[Math.floor(Math.random()*o.length)],l=()=>Math.ceil(10*Math.random()).toString(),n=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=i(),r=l(),s=n(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=i(),r=l(),s=n(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),d.humanShips.push(t)}))})(a),n.refreshBoard(a),"first"===e&&n.createShipOverlay("first",a.shipsPlaced)},C=()=>{n.cVcBtn.classList.contains("selected")&&(w("first",r),w("second",s),u=!1,c(void 0,void 0,void 0,(function*(){n.removeBoardPointer();let e=!0;for(;!y()&&!u;){if(n.waiting(!0),e){if(n.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),!n.cVcBtn.classList.contains("selected")||u)break;B(r),n.refreshBoard(r),e=!1}if(y()||u)break;if(!e){if(n.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),!n.cVcBtn.classList.contains("selected")||u)break;B(s),n.refreshBoard(s),e=!0}}u=!1,n.waiting(!1)})),n.refreshBoard(r))},b=()=>{u=!0,i.setPrevHit(null),i.setLastHit(null),l.setPrevHit(null),l.setLastHit(null),r.clearBoard(),s.clearBoard(),S(),n.refreshBoard(r),n.refreshBoard(s),n.createShipOverlay("second",s.shipsPlaced),o(r,s,g),n.canBeStarted(),C(),g.forEach((e=>{!0===e.isVertical&&(e.isVertical=!1)}))};return{init:()=>{n.setInitMessage(),n.renderBoard(r),n.renderBoard(s),S(),n.refreshBoard(s),n.createShipOverlay("second",s.shipsPlaced),o(r,s,g),n.canBeStarted(),C(),n.unFillCells("first"),n.pVcBtn.disabled=!0},humanGameboard:r,computerGameboard:s,restart:b,newGame:()=>c(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),u=!1,b()})),start:()=>{n.refreshBoard(r),w("second",s),u=!1,c(void 0,void 0,void 0,(function*(){let e=!0;for(;!y()&&!u;){if(e){n.setTurnMessagePvC(e),n.setBoardPointer("player"),n.waiting(!1);const{col:t,row:a}=yield n.handleUserInput();i.attack(s,t,a),s.sinkShip(s,t,a),n.refreshBoard(s),e=!1}if(y()||u)break;if(!e){if(n.setTurnMessagePvC(e),n.setBoardPointer("computer"),n.waiting(!0),yield new Promise((e=>setTimeout(e,n.getSpeedValue()))),!n.pVcBtn.classList.contains("selected")||u)break;B(r),n.refreshBoard(r),e=!0}}u=!1,n.waiting(!1)}))},randomizeShipsPlacement:w,humanShips:g}})(),u=d;u.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2dhbWVib2FyZC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvc2hpcC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvcGxheWVyLnRzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvbW9kdWxlcy9kcmFnQW5kRHJvcC50cyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL21vZHVsZXMvdWkudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9tb2R1bGVzL2NvbnRyb2xsZXIudHMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuY29uc3QgZ2FtZWJvYXJkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBjb2xzID0gWydBJywgJ0InLCAnQycsICdEJywgJ0UnLCAnRicsICdHJywgJ0gnLCAnSScsICdKJ107XG4gICAgY29uc3Qgcm93cyA9IFsnMScsICcyJywgJzMnLCAnNCcsICc1JywgJzYnLCAnNycsICc4JywgJzknLCAnMTAnXTtcbiAgICBjb25zdCBhcnJheSA9IFtdO1xuICAgIGNvbnN0IHNoaXBzUGxhY2VkID0gW107XG4gICAgY29uc3QgZ2VuZXJhdGVBcnJheSA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBhcnJheVtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV1bal0gPSB7IGNvbDogY29sc1tqXSwgcm93OiByb3dzW2ldLCBzdGF0dXM6ICdlbXB0eScsIHRha2VuQnk6IG51bGwgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgY2xlYXJCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSArPSAxKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDEwOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtpXVtqXS5zdGF0dXMgPSAnZW1wdHknO1xuICAgICAgICAgICAgICAgIGFycmF5W2ldW2pdLnRha2VuQnkgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2hpcHNQbGFjZWQubGVuZ3RoID0gMDtcbiAgICB9O1xuICAgIGNvbnN0IGdldENlbGwgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY29sSW5kZXggPSBjb2xzLmluZGV4T2YoY29sKTtcbiAgICAgICAgY29uc3Qgcm93SW5kZXggPSByb3dzLmluZGV4T2Yocm93KTtcbiAgICAgICAgaWYgKGNvbEluZGV4ID09PSAtMSB8fCByb3dJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdO1xuICAgIH07XG4gICAgY29uc3Qgc2V0Q2VsbCA9IChjb2wsIHJvdywgbmV3U3RhdHVzLCBuZXdUYWtlbkJ5KSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4ID0gY29scy5pbmRleE9mKGNvbCk7XG4gICAgICAgIGNvbnN0IHJvd0luZGV4ID0gcm93cy5pbmRleE9mKHJvdyk7XG4gICAgICAgIGlmIChjb2xJbmRleCA9PT0gLTEgfHwgcm93SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhcnJheVtyb3dJbmRleF1bY29sSW5kZXhdLnN0YXR1cyA9IG5ld1N0YXR1cztcbiAgICAgICAgaWYgKG5ld1Rha2VuQnkpIHtcbiAgICAgICAgICAgIGFycmF5W3Jvd0luZGV4XVtjb2xJbmRleF0udGFrZW5CeSA9IG5ld1Rha2VuQnk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycmF5W3Jvd0luZGV4XVtjb2xJbmRleF07XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVTaGlwID0gKHNoaXAsIGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBjb25zdCBnYW1lYm9hcmRDZWxscyA9IGdhbWVib2FyZC5hcnJheS5mbGF0KCk7XG4gICAgICAgIGdhbWVib2FyZENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ3Rha2VuJyAmJiBjZWxsLnRha2VuQnkubmFtZSA9PT0gc2hpcC5uYW1lKSB7XG4gICAgICAgICAgICAgICAgY2VsbC5zdGF0dXMgPSAnZW1wdHknO1xuICAgICAgICAgICAgICAgIGNlbGwudGFrZW5CeSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaGlwc1BsYWNlZC5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNoaXAudGFrZW5CeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBzaGlwc1BsYWNlZC5zcGxpY2Uoc2hpcHNQbGFjZWQuaW5kZXhPZihzaGlwKSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBsZXQgYm9hcmRJZDtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpIHtcbiAgICAgICAgICAgICAgICBib2FyZElkID0gJ2ZpcnN0Qm9hcmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICAgICAgYm9hcmRJZCA9ICdzZWNvbmRCb2FyZCc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjZWxscyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCMke2JvYXJkSWR9IC5jZWxsYCk7XG4gICAgICAgICAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCd0YWtlbicpICYmIGNlbGwuZ2V0QXR0cmlidXRlKCdkYXRhLXNoaXBOYW1lJykgPT09IHNoaXAubmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgndGFrZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdlbXB0eScpO1xuICAgICAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zaGlwTmFtZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pID0+IHtcbiAgICAgICAgaWYgKG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICAgIHNoaXAuaXNWZXJ0aWNhbCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc2hpcC5pc1ZlcnRpY2FsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc0hvcml6b250YWwgPSBvcmllbnRhdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgICBjb25zdCBjZWxscyA9IGlzSG9yaXpvbnRhbCA/IGNvbHMgOiByb3dzO1xuICAgICAgICBjb25zdCBzdGFydCA9IGNlbGxzLmluZGV4T2YoaXNIb3Jpem9udGFsID8gY29sIDogcm93KTtcbiAgICAgICAgbGV0IHNoaXBDZWxscyA9IFtdO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2hpcC5zaXplID4gY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGlwLnNpemU7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudENvbCA9IGlzSG9yaXpvbnRhbCA/IGNlbGxzW3N0YXJ0ICsgaV0gOiBjb2w7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Um93ID0gaXNIb3Jpem9udGFsID8gcm93IDogY2VsbHNbc3RhcnQgKyBpXTtcbiAgICAgICAgICAgIGlmIChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyAhPT0gJ2VtcHR5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldENlbGwoY3VycmVudENvbCwgY3VycmVudFJvdywgJ3Rha2VuJywgc2hpcCk7XG4gICAgICAgICAgICBzaGlwQ2VsbHMucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpKTtcbiAgICAgICAgfVxuICAgICAgICBzaGlwc1BsYWNlZC5wdXNoKHNoaXBDZWxsc1swXSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgY29uc3QgY2FuQmVQbGFjZWQgPSAoc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSAnaG9yaXpvbnRhbCc7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gaXNIb3Jpem9udGFsID8gY29scyA6IHJvd3M7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gY2VsbHMuaW5kZXhPZihpc0hvcml6b250YWwgPyBjb2wgOiByb3cpO1xuICAgICAgICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ICsgc2l6ZSA+IGNlbGxzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFyZUVtcHR5ID0gW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sID0gaXNIb3Jpem9udGFsID8gY2VsbHNbc3RhcnQgKyBpXSA6IGNvbDtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRSb3cgPSBpc0hvcml6b250YWwgPyByb3cgOiBjZWxsc1tzdGFydCArIGldO1xuICAgICAgICAgICAgYXJlRW1wdHkucHVzaChnZXRDZWxsKGN1cnJlbnRDb2wsIGN1cnJlbnRSb3cpLnN0YXR1cyA9PT0gJ2VtcHR5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFyZUVtcHR5LmV2ZXJ5KChpdGVtKSA9PiBpdGVtID09PSB0cnVlKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAoY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdldENlbGwoY29sLCByb3cpO1xuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICd0YWtlbicpIHtcbiAgICAgICAgICAgIGNlbGwudGFrZW5CeS5oaXQoKTtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdoaXQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2VsbC5zdGF0dXMgPT09ICdlbXB0eScgfHwgY2VsbC5zdGF0dXMgPT09ICdyZXNlcnZlZCcpIHtcbiAgICAgICAgICAgIHNldENlbGwoY29sLCByb3csICdtaXNzJyk7XG4gICAgICAgICAgICByZXR1cm4gY2VsbC5zdGF0dXM7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgICBjb25zdCByZWNlaXZlQXJvdW5kID0gKGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAnZW1wdHknKSB7XG4gICAgICAgICAgICBzZXRDZWxsKGNvbCwgcm93LCAncmVzZXJ2ZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBjZWxsLnN0YXR1cztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2VydmVTcGFjZSA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdyk7XG4gICAgICAgIGlmIChjZWxsICYmIGNlbGwudGFrZW5CeSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXJvdW5kKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZVJlc2VydmVkU3BhY2UgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgZ2FtZWJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNlbGwuc3RhdHVzID09PSAncmVzZXJ2ZWQnKSB7XG4gICAgICAgICAgICAgICAgc2V0Q2VsbChjZWxsLmNvbCwgY2VsbC5yb3csICdlbXB0eScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IHNpbmtTaGlwID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KTtcbiAgICAgICAgaWYgKGNlbGwgJiYgY2VsbC50YWtlbkJ5ICYmIGNlbGwudGFrZW5CeS5pc1N1bmsoKSkge1xuICAgICAgICAgICAgY29uc3Qgc2hpcENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKS5maWx0ZXIoKGMpID0+IGMudGFrZW5CeSAmJiBjLnRha2VuQnkubmFtZSA9PT0gY2VsbC50YWtlbkJ5Lm5hbWUpO1xuICAgICAgICAgICAgc2hpcENlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJlY3Rpb25zID0gW1xuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgICAgICAgICB7IGNvbDogMCwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAtMSwgcm93OiAxIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IC0xIH0sXG4gICAgICAgICAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDEgfSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2VsbC5jb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdSb3cgPSAoTnVtYmVyKGNlbGwucm93KSArIGRpcmVjdGlvbi5yb3cpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1JvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGhpdEJ1dE5vdFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgcmV0dXJuIGdhbWVib2FyZENlbGxzLnNvbWUoKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGlmIChjZWxsLnN0YXR1cyA9PT0gJ2hpdCcgJiYgY2VsbC50YWtlbkJ5LmlzU3VuaygpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGFsbFN1bmsgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVib2FyZENlbGxzID0gZ2FtZWJvYXJkLmFycmF5LmZsYXQoKTtcbiAgICAgICAgbGV0IHRha2VuQnlDZWxscyA9IGdhbWVib2FyZENlbGxzLmZpbHRlcigoY2VsbCkgPT4gY2VsbC50YWtlbkJ5KTtcbiAgICAgICAgaWYgKHRha2VuQnlDZWxscy5sZW5ndGggPiAwICYmIHRha2VuQnlDZWxscy5ldmVyeSgoY2VsbCkgPT4gY2VsbC50YWtlbkJ5LmlzU3VuaygpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGdlbmVyYXRlQXJyYXkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjbGVhckJvYXJkLFxuICAgICAgICBnZXRDZWxsLFxuICAgICAgICBzZXRDZWxsLFxuICAgICAgICByZW1vdmVTaGlwLFxuICAgICAgICBwbGFjZVNoaXAsXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIHJlY2VpdmVBcm91bmQsXG4gICAgICAgIHJlc2VydmVTcGFjZSxcbiAgICAgICAgaGl0QnV0Tm90U3VuayxcbiAgICAgICAgc2lua1NoaXAsXG4gICAgICAgIGFsbFN1bmssXG4gICAgICAgIGFycmF5LFxuICAgICAgICBjYW5CZVBsYWNlZCxcbiAgICAgICAgc2hpcHNQbGFjZWQsXG4gICAgICAgIHJlbW92ZVJlc2VydmVkU3BhY2UsXG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBnYW1lYm9hcmRGYWN0b3J5O1xuIiwiY29uc3Qgc2hpcEZhY3RvcnkgPSAobmFtZSkgPT4ge1xuICAgIGxldCBzaXplO1xuICAgIGlmIChuYW1lID09PSAnQ2FycmllcicpIHtcbiAgICAgICAgc2l6ZSA9IDU7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnQmF0dGxlc2hpcCcpIHtcbiAgICAgICAgc2l6ZSA9IDQ7XG4gICAgfVxuICAgIGlmIChuYW1lID09PSAnRGVzdHJveWVyJykge1xuICAgICAgICBzaXplID0gMztcbiAgICB9XG4gICAgaWYgKG5hbWUgPT09ICdTdWJtYXJpbmUnKSB7XG4gICAgICAgIHNpemUgPSAzO1xuICAgIH1cbiAgICBpZiAobmFtZSA9PT0gJ1BhdHJvbEJvYXQnKSB7XG4gICAgICAgIHNpemUgPSAyO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBuYW1lLFxuICAgICAgICBzaXplLFxuICAgICAgICBoaXRDb3VudDogMCxcbiAgICAgICAgaXNWZXJ0aWNhbDogZmFsc2UsXG4gICAgICAgIHJvdGF0ZSgpIHtcbiAgICAgICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9ICF0aGlzLmlzVmVydGljYWw7XG4gICAgICAgIH0sXG4gICAgICAgIGhpdCgpIHtcbiAgICAgICAgICAgIHRoaXMuaGl0Q291bnQgKz0gMTtcbiAgICAgICAgfSxcbiAgICAgICAgaXNTdW5rKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGl0Q291bnQgPT09IHNpemU7XG4gICAgICAgIH0sXG4gICAgfTtcbn07XG5leHBvcnQgZGVmYXVsdCBzaGlwRmFjdG9yeTtcbiIsImNvbnN0IHBsYXllckZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3QgY29scyA9IFsnQScsICdCJywgJ0MnLCAnRCcsICdFJywgJ0YnLCAnRycsICdIJywgJ0knLCAnSiddO1xuICAgIGxldCBwcmV2SGl0ID0gbnVsbDtcbiAgICBsZXQgbGFzdEhpdCA9IG51bGw7XG4gICAgY29uc3QgYXR0YWNrID0gKGdhbWVib2FyZCwgY29sLCByb3cpID0+IHtcbiAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgcm93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgcm93KTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBjb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2FscmVhZHkgc2hvdCc7XG4gICAgfTtcbiAgICBjb25zdCByYW5kb21BdHRhY2sgPSAoZ2FtZWJvYXJkKSA9PiB7XG4gICAgICAgIGxldCByYW5kb21Db2w7XG4gICAgICAgIGxldCByYW5kb21Sb3c7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHJhbmRvbUNvbCA9IGNvbHNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY29scy5sZW5ndGgpXTtcbiAgICAgICAgICAgIHJhbmRvbVJvdyA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogMTApLnRvU3RyaW5nKCk7XG4gICAgICAgIH0gd2hpbGUgKGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdoaXQnIHx8IGdhbWVib2FyZC5nZXRDZWxsKHJhbmRvbUNvbCwgcmFuZG9tUm93KS5zdGF0dXMgPT09ICdtaXNzJyk7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKHJhbmRvbUNvbCwgcmFuZG9tUm93KTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChyYW5kb21Db2wsIHJhbmRvbVJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogcmFuZG9tQ29sLCByb3c6IHJhbmRvbVJvdyB9KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayBwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayBsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmRvbUF0dGFjayByYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHJlc3VsdCwgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcmVzdWx0OiAnYWxyZWFkeSBzaG90JywgY29sOiByYW5kb21Db2wsIHJvdzogcmFuZG9tUm93IH07XG4gICAgfTtcbiAgICBjb25zdCBmb2xsb3d1cEF0dGFjayA9IChnYW1lYm9hcmQsIGNvbCwgcm93KSA9PiB7XG4gICAgICAgIGNvbnN0IGRpcmVjdGlvbnMgPSBbXG4gICAgICAgICAgICB7IGNvbDogMCwgcm93OiAtMSB9LFxuICAgICAgICAgICAgeyBjb2w6IDAsIHJvdzogMSB9LFxuICAgICAgICAgICAgeyBjb2w6IC0xLCByb3c6IDAgfSxcbiAgICAgICAgICAgIHsgY29sOiAxLCByb3c6IDAgfSxcbiAgICAgICAgXTtcbiAgICAgICAgY29uc3QgdmFsaWREaXJlY3Rpb25zID0gZGlyZWN0aW9ucy5maWx0ZXIoKGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIGRpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihyb3cpICsgZGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLnN0YXR1cyAhPT0gJ21pc3MnICYmIGNlbGwuc3RhdHVzICE9PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHZhbGlkRGlyZWN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21EaXJlY3Rpb24gPSB2YWxpZERpcmVjdGlvbnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogdmFsaWREaXJlY3Rpb25zLmxlbmd0aCldO1xuICAgICAgICAgICAgY29uc3QgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmRvbURpcmVjdGlvbi5jb2wpO1xuICAgICAgICAgICAgY29uc3QgbmV3Um93ID0gKE51bWJlcihyb3cpICsgcmFuZG9tRGlyZWN0aW9uLnJvdykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKG5ld0NvbCwgbmV3Um93KTtcbiAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogbmV3Q29sLCByb3c6IG5ld1JvdyB9KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2ZvbGxvd3VwQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZm9sbG93dXBBdHRhY2sgbGFzdEhpdCcsIGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdmb2xsb3d1cEF0dGFjayByYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdOaWUgbWEgZG9zdMSZcG55Y2gga2llcnVua8OzdyBkbyBhdGFrdScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBsZXQgcmFuZ2UgPSAxO1xuICAgIGxldCBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICBsZXQgZ29Eb3duID0gdHJ1ZTtcbiAgICBjb25zdCBmaW5pc2hpbmdBdHRhY2sgPSAoZ2FtZWJvYXJkLCBjb2wsIHJvdywgcHJldkhpdCkgPT4ge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnc3RhcnQgZmluaXNoaW5nQXR0YWNrIHByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3N0YXJ0IGZpbmlzaGluZ0F0dGFjayBsYXN0SGl0JywgeyBjb2wsIHJvdyB9KTtcbiAgICAgICAgaWYgKHByZXZIaXQucm93ID09PSByb3cpIHtcbiAgICAgICAgICAgIC8vIGhvcml6b250YWwgc2hpcCBjYXNlXG4gICAgICAgICAgICBpZiAoZ29SaWdodCkge1xuICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZ29SaWdodCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApICsgcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSArIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGZpbmlzaGluZ0F0dGFjayhnYW1lYm9hcmQsIG5ld0NvbCwgcm93LCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2dvTGVmdCcpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdDb2wgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvbC5jaGFyQ29kZUF0KDApIC0gcmFuZ2UpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Q29sID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2wuY2hhckNvZGVBdCgwKSAtIHJhbmdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKG5ld0NvbCwgcm93KSAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnaGl0JyAmJiBnYW1lYm9hcmQuZ2V0Q2VsbChuZXdDb2wsIHJvdykuc3RhdHVzICE9PSAnbWlzcycpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnJlY2VpdmVBdHRhY2sobmV3Q29sLCByb3cpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwobmV3Q29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFByZXZIaXQobGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMYXN0SGl0KHsgY29sOiBuZXdDb2wsIHJvdzogcm93IH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdwcmV2SGl0JywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdsYXN0SGl0JywgbGFzdEhpdCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdyYW5nZScsIHJhbmdlKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLScpO1xuICAgICAgICAgICAgICAgICAgICByYW5nZSArPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgICAgICBnb1JpZ2h0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgbmV3Q29sLCByb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChwcmV2SGl0LmNvbCA9PT0gY29sKSB7XG4gICAgICAgICAgICAvLyB2ZXJ0aWNhbCBzaGlwIGNhc2VcbiAgICAgICAgICAgIGlmIChnb0Rvd24pIHtcbiAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2dvRG93bicpO1xuICAgICAgICAgICAgICAgIGxldCBuZXdSb3cgPSAoTnVtYmVyKHJvdykgKyByYW5nZSkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIG5ld1JvdyA9IChOdW1iZXIocm93KSArIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdoaXQnICYmIGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgIT09ICdtaXNzJykge1xuICAgICAgICAgICAgICAgICAgICBnYW1lYm9hcmQucmVjZWl2ZUF0dGFjayhjb2wsIG5ld1Jvdyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1Jvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UHJldkhpdChsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExhc3RIaXQoeyBjb2w6IGNvbCwgcm93OiBuZXdSb3cgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3ByZXZIaXQnLCBwcmV2SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2xhc3RIaXQnLCBsYXN0SGl0KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ3JhbmdlJywgcmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlICs9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByYW5nZSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGdvRG93biA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBmaW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBjb2wsIG5ld1JvdywgcHJldkhpdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2UgPSAxO1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdnb1VwJyk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld1JvdyA9IChOdW1iZXIocm93KSAtIHJhbmdlKS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1JvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyA9PT0gJ2hpdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgbmV3Um93ID0gKE51bWJlcihyb3cpIC0gcmFuZ2UpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIG5ld1JvdykgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyAhPT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCBuZXdSb3cpLnN0YXR1cyAhPT0gJ21pc3MnKSB7XG4gICAgICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZWNlaXZlQXR0YWNrKGNvbCwgbmV3Um93KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGdhbWVib2FyZC5nZXRDZWxsKGNvbCwgbmV3Um93KS5zdGF0dXMgPT09ICdoaXQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQcmV2SGl0KGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TGFzdEhpdCh7IGNvbDogY29sLCByb3c6IG5ld1JvdyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncHJldkhpdCcsIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnbGFzdEhpdCcsIGxhc3RIaXQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygncmFuZ2UnLCByYW5nZSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlID0gMTtcbiAgICAgICAgICAgICAgICAgICAgZ29Eb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZmluaXNoaW5nQXR0YWNrKGdhbWVib2FyZCwgY29sLCBuZXdSb3csIHByZXZIaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgZ2V0UHJldkhpdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHByZXZIaXQ7XG4gICAgfTtcbiAgICBjb25zdCBnZXRMYXN0SGl0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbGFzdEhpdDtcbiAgICB9O1xuICAgIGNvbnN0IHNldFByZXZIaXQgPSAobmV3UHJldkhpdCkgPT4ge1xuICAgICAgICBwcmV2SGl0ID0gbmV3UHJldkhpdDtcbiAgICB9O1xuICAgIGNvbnN0IHNldExhc3RIaXQgPSAobmV3TGFzdEhpdCkgPT4ge1xuICAgICAgICBsYXN0SGl0ID0gbmV3TGFzdEhpdDtcbiAgICB9O1xuICAgIHJldHVybiB7IGF0dGFjaywgcmFuZG9tQXR0YWNrLCBmb2xsb3d1cEF0dGFjaywgZmluaXNoaW5nQXR0YWNrLCBwcmV2SGl0LCBsYXN0SGl0LCBnZXRQcmV2SGl0LCBnZXRMYXN0SGl0LCBzZXRQcmV2SGl0LCBzZXRMYXN0SGl0IH07XG59O1xuZXhwb3J0IGRlZmF1bHQgcGxheWVyRmFjdG9yeTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xuaW1wb3J0IHVpIGZyb20gJy4vdWknO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmNvbnN0IGRyYWdBbmREcm9wID0gKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIHNoaXBzKSA9PiB7XG4gICAgbGV0IHNoaXBOYW1lO1xuICAgIGxldCBzaGlwU2l6ZTtcbiAgICBsZXQgZ3JhYlBvaW50WCA9IDA7XG4gICAgbGV0IGdyYWJQb2ludFkgPSAwO1xuICAgIGxldCBzaGlwT2JqO1xuICAgIGxldCBvcmllbnRhdGlvbjtcbiAgICBsZXQgaGlnaGxpZ2h0ZWRDZWxscyA9IFtdO1xuICAgIGNvbnN0IHNoaXBOYW1lVG9PYmogPSB7XG4gICAgICAgIGNhcnJpZXI6IHNoaXBzWzBdLFxuICAgICAgICBiYXR0bGVzaGlwOiBzaGlwc1sxXSxcbiAgICAgICAgZGVzdHJveWVyOiBzaGlwc1syXSxcbiAgICAgICAgc3VibWFyaW5lOiBzaGlwc1szXSxcbiAgICAgICAgcGF0cm9sYm9hdDogc2hpcHNbNF0sXG4gICAgfTtcbiAgICBjb25zdCBmaXJzdEJvYXJkRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdEJvYXJkJyk7XG4gICAgY29uc3Qgc2Vjb25kQm9hcmRFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgY29uc3QgZmlyc3RCb2FyZENlbGxzID0gZmlyc3RCb2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmNlbGwnKTtcbiAgICBjb25zdCBzZWNvbmRCb2FyZENlbGxzID0gc2Vjb25kQm9hcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgY29uc3Qgbm9uU2hpcENlbGxzID0gW107XG4gICAgZm9yIChsZXQgY2VsbCBvZiBmaXJzdEJvYXJkQ2VsbHMpIHtcbiAgICAgICAgaWYgKCFjZWxsLmNsYXNzTGlzdC5jb250YWlucygndGFrZW4nKSkge1xuICAgICAgICAgICAgbm9uU2hpcENlbGxzLnB1c2goY2VsbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgY2VsbCBvZiBzZWNvbmRCb2FyZENlbGxzKSB7XG4gICAgICAgIGlmICghY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ3Rha2VuJykpIHtcbiAgICAgICAgICAgIG5vblNoaXBDZWxscy5wdXNoKGNlbGwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGRyYWdnYWJsZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZHJhZ2dhYmxlJyk7XG4gICAgZHJhZ2dhYmxlcy5mb3JFYWNoKChkcmFnZ2FibGUpID0+IHtcbiAgICAgICAgZHJhZ2dhYmxlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGhhbmRsZU1vdXNlZG93bik7XG4gICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2V1cCk7XG4gICAgICAgIGRyYWdnYWJsZS5hZGRFdmVudExpc3RlbmVyKCdkcmFnc3RhcnQnLCBoYW5kbGVEcmFnU3RhcnQpO1xuICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VuZCcsIGhhbmRsZURyYWdFbmQpO1xuICAgICAgICBkcmFnZ2FibGUuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBoYW5kbGVSb3RhdGUpO1xuICAgICAgICBub25TaGlwQ2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIGJsb2NrUmlnaHRDbGljayk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIGxldCBsYXN0RHJhZ2dlZCA9IG51bGw7XG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2Vkb3duKGUpIHtcbiAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVtb3ZlUmVzZXJ2ZWRTcGFjZShmaXJzdEdhbWVib2FyZCk7XG4gICAgICAgIHNlY29uZEdhbWVib2FyZC5yZW1vdmVSZXNlcnZlZFNwYWNlKHNlY29uZEdhbWVib2FyZCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNoaXBOYW1lID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKTtcbiAgICAgICAgbGV0IHVwZGF0ZWRTaGlwc1BsYWNlZEZpcnN0ID0gZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZmlsdGVyKChzaGlwKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0U2hpcE5hbWUgIT09IHNoaXAudGFrZW5CeS5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBsZXQgdXBkYXRlZFNoaXBzUGxhY2VkVGVtcCA9IHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZC5maWx0ZXIoKHNoaXApID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRTaGlwTmFtZSAhPT0gc2hpcC50YWtlbkJ5Lm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZWRTaGlwc1BsYWNlZEZpcnN0LmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnJlc2VydmVTcGFjZShmaXJzdEdhbWVib2FyZCwgc2hpcC5jb2wsIHNoaXAucm93KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZWRTaGlwc1BsYWNlZFRlbXAuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnJlc2VydmVTcGFjZShzZWNvbmRHYW1lYm9hcmQsIHNoaXAuY29sLCBzaGlwLnJvdyk7XG4gICAgICAgIH0pO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoZmlyc3RHYW1lYm9hcmQpO1xuICAgICAgICB1aS5yZWZyZXNoQm9hcmQoc2Vjb25kR2FtZWJvYXJkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICB1aS5jcmVhdGVTaGlwT3ZlcmxheSgnc2Vjb25kJywgc2Vjb25kR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgZHJhZ0FuZERyb3AoZmlyc3RHYW1lYm9hcmQsIHNlY29uZEdhbWVib2FyZCwgY29udHJvbGxlci5odW1hblNoaXBzKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTW91c2V1cCgpIHtcbiAgICAgICAgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKHNlY29uZEdhbWVib2FyZCk7XG4gICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KCdmaXJzdCcsIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydChlKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAwKSk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIHRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2RyYWdnaW5nJyk7XG4gICAgICAgICAgICBzaGlwTmFtZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmFtZScpO1xuICAgICAgICAgICAgc2hpcFNpemUgPSBOdW1iZXIodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykpO1xuICAgICAgICAgICAgZ3JhYlBvaW50WCA9IGUub2Zmc2V0WDtcbiAgICAgICAgICAgIGdyYWJQb2ludFkgPSBlLm9mZnNldFk7XG4gICAgICAgICAgICBzaGlwT2JqID0gc2hpcE5hbWVUb09ialtzaGlwTmFtZV07XG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IHNoaXBPYmouaXNWZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnZmlyc3RCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZW1vdmVTaGlwKHNoaXBPYmosIGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICdzZWNvbmRCb2FyZCcpIHtcbiAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucmVtb3ZlU2hpcChzaGlwT2JqLCBzZWNvbmRHYW1lYm9hcmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlRHJhZ092ZXIoaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICdmaXJzdEJvYXJkJykge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRDZWxsID0gaW5kZXggLSAoc2hpcE9iai5pc1ZlcnRpY2FsID8gTWF0aC5mbG9vcihncmFiUG9pbnRZIC8gdGhpcy5vZmZzZXRIZWlnaHQpICogMTAgOiBNYXRoLmZsb29yKGdyYWJQb2ludFggLyB0aGlzLm9mZnNldFdpZHRoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvSGlnaGxpZ2h0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcFNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxJbmRleCA9IHNoaXBPYmouaXNWZXJ0aWNhbCA/IHN0YXJ0Q2VsbCArIGkgKiAxMCA6IHN0YXJ0Q2VsbCArIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlyc3RCb2FyZENlbGxzW2NlbGxJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b0hpZ2hsaWdodC5wdXNoKGZpcnN0Qm9hcmRDZWxsc1tjZWxsSW5kZXhdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRlZENlbGxzLnB1c2goZmlyc3RCb2FyZENlbGxzW2NlbGxJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUGxhY2VtZW50KHRvSGlnaGxpZ2h0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9IaWdobGlnaHQuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGFzdERyYWdnZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0RHJhZ2dlZCA9IGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXHRjb25zb2xlLmxvZygnc2hpcCBpcyBvbiB0aGUgZWRnZScpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ3NlY29uZEJvYXJkJykge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hpcE9iaikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnRDZWxsID0gaW5kZXggLSAoc2hpcE9iai5pc1ZlcnRpY2FsID8gTWF0aC5mbG9vcihncmFiUG9pbnRZIC8gdGhpcy5vZmZzZXRIZWlnaHQpICogMTAgOiBNYXRoLmZsb29yKGdyYWJQb2ludFggLyB0aGlzLm9mZnNldFdpZHRoKSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRvSGlnaGxpZ2h0ID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2hpcFNpemU7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNlbGxJbmRleCA9IHNoaXBPYmouaXNWZXJ0aWNhbCA/IHN0YXJ0Q2VsbCArIGkgKiAxMCA6IHN0YXJ0Q2VsbCArIGk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vjb25kQm9hcmRDZWxsc1tjZWxsSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9IaWdobGlnaHQucHVzaChzZWNvbmRCb2FyZENlbGxzW2NlbGxJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMucHVzaChzZWNvbmRCb2FyZENlbGxzW2NlbGxJbmRleF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkUGxhY2VtZW50KHRvSGlnaGxpZ2h0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9IaWdobGlnaHQuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGFzdERyYWdnZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0RHJhZ2dlZCA9IGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gXHRjb25zb2xlLmxvZygnc2hpcCBpcyBvbiB0aGUgZWRnZScpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVEcmFnTGVhdmUoKSB7XG4gICAgICAgIGhpZ2hsaWdodGVkQ2VsbHMuZm9yRWFjaCgoaGlnaGxpZ2h0ZWRDZWxsKSA9PiB7XG4gICAgICAgICAgICBoaWdobGlnaHRlZENlbGwuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgICAgIH0pO1xuICAgICAgICBoaWdobGlnaHRlZENlbGxzID0gW107XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZURyb3AoZSkge1xuICAgICAgICBoaWdobGlnaHRlZENlbGxzLmZvckVhY2goKGhpZ2hsaWdodGVkQ2VsbCkgPT4ge1xuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRDZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZ2hsaWdodCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgbGFzdCA9IGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIGlmICh0YXJnZXQuY2xvc2VzdCgnLmJvYXJkJykuaWQgPT09ICdmaXJzdEJvYXJkJykge1xuICAgICAgICAgICAgaWYgKHNoaXBPYmogJiYgbGFzdERyYWdnZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RHYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3RbMF0uZGF0YXNldC5jb2wsIGxhc3RbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0R2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnc2Vjb25kQm9hcmQnKSB7XG4gICAgICAgICAgICBpZiAoc2hpcE9iaiAmJiBsYXN0RHJhZ2dlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmIChzZWNvbmRHYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwT2JqLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBsYXN0WzBdLmRhdGFzZXQuY29sLCBsYXN0WzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5wbGFjZVNoaXAoc2hpcE9iaiwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEdhbWVib2FyZC5yZW1vdmVSZXNlcnZlZFNwYWNlKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2Uoc2Vjb25kR2FtZWJvYXJkKTtcbiAgICAgICAgZmlyc3RHYW1lYm9hcmQuc2hpcHNQbGFjZWQuZm9yRWFjaCgoc2hpcCkgPT4ge1xuICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGZpcnN0R2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgc2Vjb25kR2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIHNlY29uZEdhbWVib2FyZC5yZXNlcnZlU3BhY2Uoc2Vjb25kR2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKHNlY29uZEdhbWVib2FyZCk7XG4gICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KCdmaXJzdCcsIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIHVpLmNhbkJlU3RhcnRlZCgpO1xuICAgICAgICB1aS5zZXRTdGFydE1lc3NhZ2UoKTtcbiAgICAgICAgbGFzdERyYWdnZWQgPSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVEcmFnRW5kKGUpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgIHRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2RyYWdnaW5nJyk7XG4gICAgICAgIGlmIChoaWdobGlnaHRlZENlbGxzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ2ZpcnN0Qm9hcmQnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhc3REcmFnZ2VkICYmIGZpcnN0R2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXBPYmouc2l6ZSwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93LCBvcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBmaXJzdEdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZmlyc3RHYW1lYm9hcmQsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdyk7XG4gICAgICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChmaXJzdEdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChzZWNvbmRHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgICAgICB1aS5jcmVhdGVTaGlwT3ZlcmxheSgnZmlyc3QnLCBmaXJzdEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICAgICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KCdzZWNvbmQnLCBzZWNvbmRHYW1lYm9hcmQuc2hpcHNQbGFjZWQpO1xuICAgICAgICAgICAgICAgICAgICBkcmFnQW5kRHJvcChmaXJzdEdhbWVib2FyZCwgc2Vjb25kR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ3NlY29uZEJvYXJkJykge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0RHJhZ2dlZCAmJiBzZWNvbmRHYW1lYm9hcmQuY2FuQmVQbGFjZWQoc2hpcE9iai5zaXplLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LmNvbCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5yb3csIG9yaWVudGF0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucGxhY2VTaGlwKHNoaXBPYmosIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQuY29sLCBsYXN0RHJhZ2dlZFswXS5kYXRhc2V0LnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBzZWNvbmRHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKHNlY29uZEdhbWVib2FyZCwgbGFzdERyYWdnZWRbMF0uZGF0YXNldC5jb2wsIGxhc3REcmFnZ2VkWzBdLmRhdGFzZXQucm93KTtcbiAgICAgICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGZpcnN0R2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKHNlY29uZEdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KCdmaXJzdCcsIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgICAgICAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgICAgICAgICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzVmFsaWRQbGFjZW1lbnQodG9IaWdobGlnaHQpIHtcbiAgICAgICAgcmV0dXJuICh0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ2VtcHR5JykpICYmXG4gICAgICAgICAgICAodG9IaWdobGlnaHQuZXZlcnkoKGNlbGwpID0+IGNlbGwuZGF0YXNldC5jb2wgPT09IHRvSGlnaGxpZ2h0WzBdLmRhdGFzZXQuY29sKSB8fFxuICAgICAgICAgICAgICAgIHRvSGlnaGxpZ2h0LmV2ZXJ5KChjZWxsKSA9PiBjZWxsLmRhdGFzZXQucm93ID09PSB0b0hpZ2hsaWdodFswXS5kYXRhc2V0LnJvdykpICYmXG4gICAgICAgICAgICB0b0hpZ2hsaWdodC5sZW5ndGggPT09IHNoaXBTaXplICYmXG4gICAgICAgICAgICB0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gY2VsbC5kYXRhc2V0LmNvbCA+PSAnQScgJiYgY2VsbC5kYXRhc2V0LmNvbCA8PSAnSicpICYmXG4gICAgICAgICAgICB0b0hpZ2hsaWdodC5ldmVyeSgoY2VsbCkgPT4gTnVtYmVyKGNlbGwuZGF0YXNldC5yb3cpID49IDEgJiYgTnVtYmVyKGNlbGwuZGF0YXNldC5yb3cpIDw9IDEwKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldExhc3RTaGlwU2l6ZUVsZW1lbnRzKGhpZ2hsaWdodGVkQ2VsbHMsIHNoaXBTaXplKSB7XG4gICAgICAgIHJldHVybiBoaWdobGlnaHRlZENlbGxzLnNsaWNlKE1hdGgubWluKGhpZ2hsaWdodGVkQ2VsbHMubGVuZ3RoIC0gc2hpcFNpemUsIDApKTtcbiAgICB9XG4gICAgZmlyc3RCb2FyZENlbGxzLmZvckVhY2goKGNlbGwsIGluZGV4KSA9PiB7XG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ292ZXInLCBoYW5kbGVEcmFnT3ZlcihpbmRleCkpO1xuICAgICAgICBjZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIGhhbmRsZURyYWdMZWF2ZSk7XG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIGhhbmRsZURyb3ApO1xuICAgIH0pO1xuICAgIHNlY29uZEJvYXJkQ2VsbHMuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcmFnb3ZlcicsIGhhbmRsZURyYWdPdmVyKGluZGV4KSk7XG4gICAgICAgIGNlbGwuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2xlYXZlJywgaGFuZGxlRHJhZ0xlYXZlKTtcbiAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gaGFuZGxlUm90YXRlKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgbGV0IGdhbWVib2FyZDtcbiAgICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuYm9hcmQnKS5pZCA9PT0gJ2ZpcnN0Qm9hcmQnKSB7XG4gICAgICAgICAgICBnYW1lYm9hcmQgPSBmaXJzdEdhbWVib2FyZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoJy5ib2FyZCcpLmlkID09PSAnc2Vjb25kQm9hcmQnKSB7XG4gICAgICAgICAgICBnYW1lYm9hcmQgPSBzZWNvbmRHYW1lYm9hcmQ7XG4gICAgICAgIH1cbiAgICAgICAgc2hpcE5hbWUgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLW5hbWUnKTtcbiAgICAgICAgc2hpcFNpemUgPSBOdW1iZXIodGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zaXplJykpO1xuICAgICAgICBzaGlwT2JqID0gc2hpcE5hbWVUb09ialtzaGlwTmFtZV07XG4gICAgICAgIGNvbnN0IHRlbXBTaGlwID0gc2hpcE9iajtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGdhbWVib2FyZC5zaGlwc1BsYWNlZC5maWx0ZXIoKHNoaXApID0+IHNoaXAudGFrZW5CeS5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IHNoaXBOYW1lKTtcbiAgICAgICAgZ2FtZWJvYXJkLnJlbW92ZVNoaXAoc2hpcE9iaiwgZ2FtZWJvYXJkKTtcbiAgICAgICAgZ2FtZWJvYXJkLnJlbW92ZVJlc2VydmVkU3BhY2UoZ2FtZWJvYXJkKTtcbiAgICAgICAgZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGVtcFNoaXAucm90YXRlKCk7XG4gICAgICAgIG9yaWVudGF0aW9uID0gdGVtcFNoaXAuaXNWZXJ0aWNhbCA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIGlmIChnYW1lYm9hcmQuY2FuQmVQbGFjZWQodGVtcFNoaXAuc2l6ZSwgY3VycmVudFswXS5jb2wsIGN1cnJlbnRbMF0ucm93LCBvcmllbnRhdGlvbikpIHtcbiAgICAgICAgICAgIGdhbWVib2FyZC5wbGFjZVNoaXAodGVtcFNoaXAsIGN1cnJlbnRbMF0uY29sLCBjdXJyZW50WzBdLnJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGVtcFNoaXAucm90YXRlKCk7XG4gICAgICAgICAgICBvcmllbnRhdGlvbiA9IHRlbXBTaGlwLmlzVmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcCh0ZW1wU2hpcCwgY3VycmVudFswXS5jb2wsIGN1cnJlbnRbMF0ucm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgZ2FtZWJvYXJkLnNoaXBzUGxhY2VkLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBzaGlwLmNvbCwgc2hpcC5yb3cpO1xuICAgICAgICB9KTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGdhbWVib2FyZCk7XG4gICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KCdmaXJzdCcsIGZpcnN0R2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIHNlY29uZEdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGZpcnN0R2FtZWJvYXJkLCBzZWNvbmRHYW1lYm9hcmQsIGNvbnRyb2xsZXIuaHVtYW5TaGlwcyk7XG4gICAgICAgIGlmICh1aS5jYW5CZVN0YXJ0ZWQoKSkge1xuICAgICAgICAgICAgdWkuZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBibG9ja1JpZ2h0Q2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGRyYWdBbmREcm9wO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgZHJhZ0FuZERyb3AgZnJvbSAnLi9kcmFnQW5kRHJvcCc7XG5pbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuY29uc3QgdWkgPSAoKCkgPT4ge1xuICAgIGNvbnN0IHN0YXR1c0JveCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZXNzYWdlQm94IHAnKTtcbiAgICBjb25zdCBib2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYm9hcmRzJyk7XG4gICAgY29uc3QgcFZjQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BsYXllclZzQ29tcHV0ZXInKTtcbiAgICBjb25zdCBuZXdHYW1lQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25ld0dhbWUnKTtcbiAgICBjb25zdCBjVmNCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29tcHV0ZXJWc0NvbXB1dGVyJyk7XG4gICAgY29uc3Qgc3RhcnRCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3RhcnQnKTtcbiAgICBjb25zdCByYW5kb21CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcmFuZG9tUGxhY2VtZW50Jyk7XG4gICAgY29uc3QgYWxsQnRucyA9IFtwVmNCdG4sIG5ld0dhbWVCdG4sIGNWY0J0biwgc3RhcnRCdG4sIHJhbmRvbUJ0bl07XG4gICAgY29uc3Qgc3BlZWRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoJ3NwZWVkJyk7XG4gICAgY29uc3QgY3JlYXRlQ2VsbCA9IChjZWxsKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdjZWxsJyk7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjZWxsLnN0YXR1cyk7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWNvbCcsIGNlbGwuY29sKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcm93JywgY2VsbC5yb3cpO1xuICAgICAgICBpZiAoY2VsbC50YWtlbkJ5KSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1zaGlwTmFtZScsIGNlbGwudGFrZW5CeS5uYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH07XG4gICAgY29uc3QgcmVuZGVyQ2VsbHMgPSAoZ2FtZWJvYXJkLCBib2FyZCkgPT4ge1xuICAgICAgICBnYW1lYm9hcmQuYXJyYXkuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICAgICAgICByb3cuZm9yRWFjaCgoY29sKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNyZWF0ZUNlbGwoY29sKTtcbiAgICAgICAgICAgICAgICBib2FyZC5hcHBlbmQoY2VsbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByZW5kZXJCb2FyZCA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgY29uc3QgYm9hcmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgYm9hcmQuY2xhc3NMaXN0LmFkZCgnYm9hcmQnKTtcbiAgICAgICAgaWYgKGdhbWVib2FyZCA9PT0gY29udHJvbGxlci5odW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgYm9hcmQuaWQgPSAnZmlyc3RCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkKSB7XG4gICAgICAgICAgICBib2FyZC5pZCA9ICdzZWNvbmRCb2FyZCc7XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyQ2VsbHMoZ2FtZWJvYXJkLCBib2FyZCk7XG4gICAgICAgIGJvYXJkcy5hcHBlbmQoYm9hcmQpO1xuICAgIH07XG4gICAgY29uc3QgcmVmcmVzaEJvYXJkID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBsZXQgYm9hcmRJZDtcbiAgICAgICAgaWYgKGdhbWVib2FyZCA9PT0gY29udHJvbGxlci5odW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgYm9hcmRJZCA9ICdmaXJzdEJvYXJkJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnYW1lYm9hcmQgPT09IGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQpIHtcbiAgICAgICAgICAgIGJvYXJkSWQgPSAnc2Vjb25kQm9hcmQnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJvYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7Ym9hcmRJZH1gKTtcbiAgICAgICAgYm9hcmQuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIHJlbmRlckNlbGxzKGdhbWVib2FyZCwgYm9hcmQpO1xuICAgIH07XG4gICAgY29uc3QgZ2V0VXNlcklucHV0ID0gKGUpID0+IHtcbiAgICAgICAgaWYgKCFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpdCcpICYmICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21pc3MnKSkge1xuICAgICAgICAgICAgY29uc3QgY29sID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbCcpO1xuICAgICAgICAgICAgY29uc3Qgcm93ID0gZS50YXJnZXQuZ2V0QXR0cmlidXRlKCdkYXRhLXJvdycpO1xuICAgICAgICAgICAgcmV0dXJuIHsgY29sLCByb3cgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgaGFuZGxlVXNlcklucHV0ID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGNvbnN0IGNlbGxzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnI3NlY29uZEJvYXJkIC5jZWxsJyk7XG4gICAgICAgIGxldCB1c2VySW5wdXQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIHVzZXJJbnB1dCA9IHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNlbGwuY2xhc3NMaXN0LmNvbnRhaW5zKCdoaXQnKSAmJiAhY2VsbC5jbGFzc0xpc3QuY29udGFpbnMoJ21pc3MnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShnZXRVc2VySW5wdXQoZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSB3aGlsZSAoIXVzZXJJbnB1dCk7XG4gICAgICAgIGNvbnN0IGNvbCA9IHVzZXJJbnB1dC5jb2wudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3Qgcm93ID0gdXNlcklucHV0LnJvdy50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4geyBjb2wsIHJvdyB9O1xuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZVB2QyA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBmaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgIHdhaXRpbmcodHJ1ZSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gdHJ1ZSkpO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCBnZXRTcGVlZFZhbHVlKCkpKTtcbiAgICAgICAgYWxsQnRucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSBmYWxzZSkpO1xuICAgICAgICB3YWl0aW5nKGZhbHNlKTtcbiAgICAgICAgY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHNldEluaXRNZXNzYWdlKCk7XG4gICAgfSk7XG4gICAgY29uc3QgaGFuZGxlTmV3R2FtZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBzZXRSZXN0YXJ0TWVzc2FnZSgpO1xuICAgICAgICB3YWl0aW5nKHRydWUpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IHRydWUpKTtcbiAgICAgICAgeWllbGQgY29udHJvbGxlci5uZXdHYW1lKCk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgICAgIGNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBpZiAocFZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgc2V0SW5pdE1lc3NhZ2UoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGNvbnN0IGhhbmRsZUN2QyA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB3YWl0aW5nKHRydWUpO1xuICAgICAgICBhbGxCdG5zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IHRydWUpKTtcbiAgICAgICAgeWllbGQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZ2V0U3BlZWRWYWx1ZSgpKSk7XG4gICAgICAgIGFsbEJ0bnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgY1ZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjb25zdCBoYW5kbGVHYW1lTW9kZSA9IChzZWxlY3RlZEVsZW1lbnQsIGRlc2VsZWN0ZWRFbGVtZW50KSA9PiB7XG4gICAgICAgIGRlc2VsZWN0ZWRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGlmICghc2VsZWN0ZWRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRFbGVtZW50ID09PSBwVmNCdG4pIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVQdkMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEVsZW1lbnQgPT09IGNWY0J0bikge1xuICAgICAgICAgICAgICAgIGhhbmRsZUN2QygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udHJvbGxlci5yZXN0YXJ0KCk7XG4gICAgICAgICAgICBzZXRSZXN0YXJ0TWVzc2FnZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCB3YWl0aW5nID0gKGJvb2wpID0+IHtcbiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoJ3dhaXQnLCBib29sKTtcbiAgICB9O1xuICAgIGNvbnN0IHNldEJvYXJkUG9pbnRlciA9ICh3aGljaCkgPT4ge1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgaWYgKHdoaWNoID09PSAncGxheWVyJykge1xuICAgICAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5hZGQoJ2JvYXJkT3V0bGluZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdoaWNoID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnYm9hcmRPdXRsaW5lJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHJlbW92ZUJvYXJkUG9pbnRlciA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2Vjb25kID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NlY29uZEJvYXJkJyk7XG4gICAgICAgIHNlY29uZC5jbGFzc0xpc3QucmVtb3ZlKCdib2FyZE91dGxpbmUnKTtcbiAgICB9O1xuICAgIGNvbnN0IGNyZWF0ZVNoaXBPdmVybGF5ID0gKGdhbWVib2FyZE5hbWUsIHNoaXBzKSA9PiB7XG4gICAgICAgIHNoaXBzLmZvckVhY2goKGZpcnN0Q2VsbCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2hpcEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgIGNvbnN0IHNoaXBOYW1lID0gZmlyc3RDZWxsLnRha2VuQnkubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgY29uc3Qgc2hpcFNpemUgPSBmaXJzdENlbGwudGFrZW5CeS5zaXplO1xuICAgICAgICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IGZpcnN0Q2VsbC50YWtlbkJ5LmlzVmVydGljYWw7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdzaGlwJywgc2hpcE5hbWUpO1xuICAgICAgICAgICAgc2hpcEVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLXNpemUnLCBgJHtzaGlwU2l6ZX1gKTtcbiAgICAgICAgICAgIHNoaXBFbGVtZW50LnNldEF0dHJpYnV0ZSgnZGF0YS1uYW1lJywgYCR7c2hpcE5hbWV9YCk7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2RyYWdnYWJsZScsICd0cnVlJyk7XG4gICAgICAgICAgICBzaGlwRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdkcmFnZ2FibGUnKTtcbiAgICAgICAgICAgIGNvbnN0IHNldFNoaXBTdHlsZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBodG1sRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2h0bWwnKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb290Rm9udFNpemUgPSBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGh0bWxFbGVtZW50LCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKCdmb250LXNpemUnKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgIHNoaXBFbGVtZW50LnN0eWxlLndpZHRoID0gc2hpcFNpemUgKiAoY2VsbFNpemUgLyByb290Rm9udFNpemUpICsgJ3JlbSc7XG4gICAgICAgICAgICAgICAgICAgIHNoaXBFbGVtZW50LnN0eWxlLmhlaWdodCA9IGNlbGxTaXplIC8gcm9vdEZvbnRTaXplICsgJ3JlbSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgc2hpcEVsZW1lbnQuc3R5bGUud2lkdGggPSBjZWxsU2l6ZSAvIHJvb3RGb250U2l6ZSArICdyZW0nO1xuICAgICAgICAgICAgICAgICAgICBzaGlwRWxlbWVudC5zdHlsZS5oZWlnaHQgPSBzaGlwU2l6ZSAqIChjZWxsU2l6ZSAvIHJvb3RGb250U2l6ZSkgKyAncmVtJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGV0IGNlbGxTaXplID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJvYXJkIC5jZWxsJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgICAgICBzZXRTaGlwU3R5bGUoKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2VsbFNpemUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYm9hcmQgLmNlbGwnKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcbiAgICAgICAgICAgICAgICBzZXRTaGlwU3R5bGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbGV0IGJvYXJkO1xuICAgICAgICAgICAgaWYgKGdhbWVib2FyZE5hbWUgPT09ICdmaXJzdCcpIHtcbiAgICAgICAgICAgICAgICBib2FyZCA9ICdmaXJzdEJvYXJkJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGdhbWVib2FyZE5hbWUgPT09ICdzZWNvbmQnKSB7XG4gICAgICAgICAgICAgICAgYm9hcmQgPSAnc2Vjb25kQm9hcmQnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZmlyc3RDZWxsRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2JvYXJkfSAuY2VsbFtkYXRhLWNvbD1cIiR7Zmlyc3RDZWxsLmNvbH1cIl1bZGF0YS1yb3c9XCIke2ZpcnN0Q2VsbC5yb3d9XCJdYCk7XG4gICAgICAgICAgICBmaXJzdENlbGxFbGVtZW50LmFwcGVuZENoaWxkKHNoaXBFbGVtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBjYW5CZVN0YXJ0ZWQgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjb250cm9sbGVyLmh1bWFuR2FtZWJvYXJkLnNoaXBzUGxhY2VkLmxlbmd0aCA9PT0gNSAmJiBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkLnNoaXBzUGxhY2VkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0SW5pdE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN0YXR1c1RleHRNb2JpbGUgPSBcIlVzZSAnUmFuZG9tIFBsYWNlbWVudCcgYnV0dG9uLCB0aGVuIHByZXNzIFN0YXJ0IVwiO1xuICAgICAgICBjb25zdCBzdGF0dXNUZXh0RGVza3RvcCA9IFwiRHJhZyBhbmQgZHJvcCBzaGlwcyBvbnRvIHRoZSBsZWZ0IGJvYXJkIG9yIHVzZSAnUmFuZG9tIFBsYWNlbWVudCcgYnV0dG9uLiBSaWdodCBjbGljayB0byByb3RhdGUuIFdoZW4gcmVhZHksIHByZXNzIFN0YXJ0IVwiO1xuICAgICAgICBpZiAoc3RhdHVzQm94LnRleHRDb250ZW50ID09PSBzdGF0dXNUZXh0TW9iaWxlIHx8IHN0YXR1c0JveC50ZXh0Q29udGVudCA9PT0gc3RhdHVzVGV4dERlc2t0b3ApIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9IHN0YXR1c1RleHRNb2JpbGU7XG4gICAgICAgICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoJyhtaW4td2lkdGg6IDEwMjRweCknKS5tYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gc3RhdHVzVGV4dERlc2t0b3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFN0YXJ0TWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNhbkJlU3RhcnRlZCgpKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSAnWW91IGNhbiBub3cgYmVnaW4gdGhlIGdhbWUuIFByZXNzIHN0YXJ0ISc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldFR1cm5NZXNzYWdlUHZDID0gKGlzUGxheWVyVHVybikgPT4ge1xuICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIlBsYXllcidzIHR1cm4uIFRha2UgYWltIGFuZCBhdHRhY2shXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIkNvbXB1dGVyJ3MgdHVybi4gVGhlIHNob3QgaXMgY29taW5nIVwiO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBzZXRUdXJuTWVzc2FnZUN2QyA9IChpc1BsYXllclR1cm4pID0+IHtcbiAgICAgICAgaWYgKGlzUGxheWVyVHVybikge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gXCJWaW9sZXQncyB0dXJuXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSBcIkJsdWUncyB0dXJuXCI7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldEdhbWVPdmVyTWVzc2FnZVB2QyA9ICh3aG8pID0+IHtcbiAgICAgICAgaWYgKHdobyA9PT0gJ3BsYXllcicpIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdHYW1lIG92ZXIsIFBsYXllciB3aW5zISc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAod2hvID09PSAnY29tcHV0ZXInKSB7XG4gICAgICAgICAgICBzdGF0dXNCb3gudGV4dENvbnRlbnQgPSAnR2FtZSBvdmVyLCBDb21wdXRlciB3aW5zISc7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IHNldEdhbWVPdmVyTWVzc2FnZUN2QyA9ICh3aG8pID0+IHtcbiAgICAgICAgaWYgKHdobyA9PT0gJ3BsYXllcicpIHtcbiAgICAgICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdHYW1lIG92ZXIsIEJsdWUgQ29tcHV0ZXIgd2lucyEnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHdobyA9PT0gJ2NvbXB1dGVyJykge1xuICAgICAgICAgICAgc3RhdHVzQm94LnRleHRDb250ZW50ID0gJ0dhbWUgb3ZlciwgVmlvbGV0IENvbXB1dGVyIHdpbnMhJztcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc2V0UmVzdGFydE1lc3NhZ2UgPSAoKSA9PiB7XG4gICAgICAgIHN0YXR1c0JveC50ZXh0Q29udGVudCA9ICdSZXN0YXJ0aW5nLi4uJztcbiAgICB9O1xuICAgIHBWY0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgZmlsbENlbGxzKCdmaXJzdCcpO1xuICAgICAgICBoYW5kbGVHYW1lTW9kZShwVmNCdG4sIGNWY0J0bik7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LnJlbW92ZSgnc3RhcnQnKTtcbiAgICAgICAgdW5GaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgcFZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBjVmNCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGZpbGxDZWxscygnZmlyc3QnKTtcbiAgICAgICAgZmlsbENlbGxzKCdzZWNvbmQnKTtcbiAgICAgICAgaGFuZGxlR2FtZU1vZGUoY1ZjQnRuLCBwVmNCdG4pO1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5hZGQoJ3N0YXJ0Jyk7XG4gICAgICAgIFByb21pc2UuYWxsKFt1bkZpbGxDZWxscygnZmlyc3QnKSwgdW5GaWxsQ2VsbHMoJ3NlY29uZCcpXSk7XG4gICAgICAgIHN0YXJ0QnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgY1ZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9KTtcbiAgICBuZXdHYW1lQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGZpbGxDZWxscygnZmlyc3QnKTtcbiAgICAgICAgaWYgKGNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIGZpbGxDZWxscygnc2Vjb25kJyk7XG4gICAgICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICByYW5kb21CdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgY1ZjQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB1aS5yZW1vdmVCb2FyZFBvaW50ZXIoKTtcbiAgICAgICAgeWllbGQgaGFuZGxlTmV3R2FtZSgpO1xuICAgICAgICBjb25zdCBzZWNvbmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgc2Vjb25kLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKTtcbiAgICAgICAgaWYgKHBWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgIHNlY29uZC5jbGFzc0xpc3QucmVtb3ZlKCdzdGFydCcpO1xuICAgICAgICAgICAgdW5GaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBwVmNCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LmFkZCgnc3RhcnQnKTtcbiAgICAgICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICBQcm9taXNlLmFsbChbdW5GaWxsQ2VsbHMoJ2ZpcnN0JyksIHVuRmlsbENlbGxzKCdzZWNvbmQnKV0pO1xuICAgICAgICAgICAgc3RhcnRCdG4uZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmFuZG9tQnRuLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNWY0J0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KSk7XG4gICAgc3RhcnRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuc3RhcnQoKTtcbiAgICAgICAgY29uc3QgZmlyc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RCb2FyZCcpO1xuICAgICAgICBmaXJzdC5jbGFzc0xpc3QuYWRkKCdoaWRlJyk7XG4gICAgICAgIGNvbnN0IHNlY29uZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzZWNvbmRCb2FyZCcpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICAgICAgICBzZWNvbmQuY2xhc3NMaXN0LmFkZCgnc3RhcnQnKTtcbiAgICAgICAgdW5GaWxsQ2VsbHMoJ3NlY29uZCcpO1xuICAgICAgICBzdGFydEJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHJhbmRvbUJ0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmFuZG9tQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgcmVmcmVzaEJvYXJkKGNvbnRyb2xsZXIuY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICBjb250cm9sbGVyLnJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50KCdmaXJzdCcsIGNvbnRyb2xsZXIuaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICBkcmFnQW5kRHJvcChjb250cm9sbGVyLmh1bWFuR2FtZWJvYXJkLCBjb250cm9sbGVyLmNvbXB1dGVyR2FtZWJvYXJkLCBjb250cm9sbGVyLmh1bWFuU2hpcHMpO1xuICAgICAgICBjYW5CZVN0YXJ0ZWQoKTtcbiAgICAgICAgc2V0U3RhcnRNZXNzYWdlKCk7XG4gICAgICAgIGZpbGxDZWxscygnc2Vjb25kJyk7XG4gICAgfSk7XG4gICAgbGV0IHNwZWVkVmFsdWUgPSAxMDAwO1xuICAgIHNwZWVkcy5mb3JFYWNoKChzcGVlZCkgPT4ge1xuICAgICAgICBzcGVlZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGxldCBpbnB1dCA9IHNwZWVkO1xuICAgICAgICAgICAgaWYgKGlucHV0LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBzcGVlZFZhbHVlID0gTnVtYmVyKGlucHV0LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgY29uc3QgZ2V0U3BlZWRWYWx1ZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNwZWVkVmFsdWU7XG4gICAgfTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc2V0SW5pdE1lc3NhZ2UpO1xuICAgIGNvbnN0IGZpbGxDZWxscyA9IChpbnB1dCkgPT4ge1xuICAgICAgICBsZXQgYm9hcmQ7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgICAgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RCb2FyZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0ID09PSAnc2Vjb25kJykge1xuICAgICAgICAgICAgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZWxscyA9IGJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnZmlsbGVkJyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdW5GaWxsQ2VsbHMgPSAoaW5wdXQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB3YWl0aW5nKHRydWUpO1xuICAgICAgICBsZXQgYm9hcmQ7XG4gICAgICAgIGlmIChpbnB1dCA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgICAgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmlyc3RCb2FyZCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlucHV0ID09PSAnc2Vjb25kJykge1xuICAgICAgICAgICAgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2Vjb25kQm9hcmQnKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjZWxscyA9IGJvYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jZWxsJyk7XG4gICAgICAgIGNlbGxzLmZvckVhY2goKGNlbGwpID0+IHtcbiAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnZmlsbGVkJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgY2VsbHMuZm9yRWFjaCgoY2VsbCwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdmaWxsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBjZWxscy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCAoZ2V0U3BlZWRWYWx1ZSgpIC8gMTIwKSAqIGluZGV4KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgd2FpdGluZyhmYWxzZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyQm9hcmQsXG4gICAgICAgIHJlZnJlc2hCb2FyZCxcbiAgICAgICAgaGFuZGxlVXNlcklucHV0LFxuICAgICAgICBwVmNCdG4sXG4gICAgICAgIGNWY0J0bixcbiAgICAgICAgd2FpdGluZyxcbiAgICAgICAgc2V0Qm9hcmRQb2ludGVyLFxuICAgICAgICByZW1vdmVCb2FyZFBvaW50ZXIsXG4gICAgICAgIGNyZWF0ZVNoaXBPdmVybGF5LFxuICAgICAgICBjYW5CZVN0YXJ0ZWQsXG4gICAgICAgIHNldEluaXRNZXNzYWdlLFxuICAgICAgICBzZXRTdGFydE1lc3NhZ2UsXG4gICAgICAgIHNldFR1cm5NZXNzYWdlUHZDLFxuICAgICAgICBzZXRUdXJuTWVzc2FnZUN2QyxcbiAgICAgICAgc2V0R2FtZU92ZXJNZXNzYWdlUHZDLFxuICAgICAgICBzZXRHYW1lT3Zlck1lc3NhZ2VDdkMsXG4gICAgICAgIHNldFJlc3RhcnRNZXNzYWdlLFxuICAgICAgICBnZXRTcGVlZFZhbHVlLFxuICAgICAgICBmaWxsQ2VsbHMsXG4gICAgICAgIHVuRmlsbENlbGxzLFxuICAgIH07XG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgdWk7XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCBnYW1lYm9hcmRGYWN0b3J5IGZyb20gJy4vZ2FtZWJvYXJkJztcbmltcG9ydCBzaGlwRmFjdG9yeSBmcm9tICcuL3NoaXAnO1xuaW1wb3J0IHBsYXllckZhY3RvcnkgZnJvbSAnLi9wbGF5ZXInO1xuaW1wb3J0IHVpIGZyb20gJy4vdWknO1xuaW1wb3J0IGRyYWdBbmREcm9wIGZyb20gJy4vZHJhZ0FuZERyb3AnO1xuY29uc3QgY29udHJvbGxlciA9ICgoKSA9PiB7XG4gICAgY29uc3QgaHVtYW5HYW1lYm9hcmQgPSBnYW1lYm9hcmRGYWN0b3J5KCk7XG4gICAgY29uc3QgY29tcHV0ZXJHYW1lYm9hcmQgPSBnYW1lYm9hcmRGYWN0b3J5KCk7XG4gICAgY29uc3QgaHVtYW4gPSBwbGF5ZXJGYWN0b3J5KCk7XG4gICAgY29uc3QgY29tcHV0ZXIgPSBwbGF5ZXJGYWN0b3J5KCk7XG4gICAgbGV0IGlzU3RvcHBlZCA9IHRydWU7XG4gICAgbGV0IGh1bWFuQ2FycmllciA9IHNoaXBGYWN0b3J5KCdDYXJyaWVyJyk7XG4gICAgbGV0IGh1bWFuQmF0dGxlc2hpcCA9IHNoaXBGYWN0b3J5KCdCYXR0bGVzaGlwJyk7XG4gICAgbGV0IGh1bWFuRGVzdHJveWVyID0gc2hpcEZhY3RvcnkoJ0Rlc3Ryb3llcicpO1xuICAgIGxldCBodW1hblN1Ym1hcmluZSA9IHNoaXBGYWN0b3J5KCdTdWJtYXJpbmUnKTtcbiAgICBsZXQgaHVtYW5QYXRyb2xib2F0ID0gc2hpcEZhY3RvcnkoJ1BhdHJvbEJvYXQnKTtcbiAgICBjb25zdCBodW1hblNoaXBzID0gW2h1bWFuQ2FycmllciwgaHVtYW5CYXR0bGVzaGlwLCBodW1hbkRlc3Ryb3llciwgaHVtYW5TdWJtYXJpbmUsIGh1bWFuUGF0cm9sYm9hdF07XG4gICAgY29uc3QgcG9wdWxhdGVTaGlwcyA9ICgpID0+IHtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucGxhY2VTaGlwKGh1bWFuQ2FycmllciwgJ0EnLCAnMScsICdob3Jpem9udGFsJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnBsYWNlU2hpcChodW1hbkJhdHRsZXNoaXAsICdBJywgJzMnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5EZXN0cm95ZXIsICdBJywgJzUnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5TdWJtYXJpbmUsICdBJywgJzcnLCAnaG9yaXpvbnRhbCcpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5wbGFjZVNoaXAoaHVtYW5QYXRyb2xib2F0LCAnQScsICc5JywgJ2hvcml6b250YWwnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGNvbXB1dGVyR2FtZWJvYXJkLCAnQScsICcxJyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnJlc2VydmVTcGFjZShjb21wdXRlckdhbWVib2FyZCwgJ0EnLCAnMycpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5yZXNlcnZlU3BhY2UoY29tcHV0ZXJHYW1lYm9hcmQsICdBJywgJzUnKTtcbiAgICAgICAgY29tcHV0ZXJHYW1lYm9hcmQucmVzZXJ2ZVNwYWNlKGNvbXB1dGVyR2FtZWJvYXJkLCAnQScsICc3Jyk7XG4gICAgICAgIGNvbXB1dGVyR2FtZWJvYXJkLnJlc2VydmVTcGFjZShjb21wdXRlckdhbWVib2FyZCwgJ0EnLCAnOScpO1xuICAgIH07XG4gICAgY29uc3QgaXNHYW1lT3ZlciA9ICgpID0+IHtcbiAgICAgICAgaWYgKGNvbXB1dGVyR2FtZWJvYXJkLmFsbFN1bmsoY29tcHV0ZXJHYW1lYm9hcmQpKSB7XG4gICAgICAgICAgICB1aS5yZW1vdmVCb2FyZFBvaW50ZXIoKTtcbiAgICAgICAgICAgIGlmICh1aS5wVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0R2FtZU92ZXJNZXNzYWdlUHZDKCdwbGF5ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh1aS5jVmNCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0R2FtZU92ZXJNZXNzYWdlQ3ZDKCdwbGF5ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdBbGwgY29tcHV0ZXIgc2hpcHMgYXJlIHN1bmsuIEh1bWFuIHBsYXllciB3b24hJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaHVtYW5HYW1lYm9hcmQuYWxsU3VuayhodW1hbkdhbWVib2FyZCkpIHtcbiAgICAgICAgICAgIHVpLnJlbW92ZUJvYXJkUG9pbnRlcigpO1xuICAgICAgICAgICAgaWYgKHVpLnBWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykpIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRHYW1lT3Zlck1lc3NhZ2VQdkMoJ2NvbXB1dGVyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodWkuY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgICAgIHVpLnNldEdhbWVPdmVyTWVzc2FnZUN2QygnY29tcHV0ZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdBbGwgaHVtYW4gc2hpcHMgYXJlIHN1bmsuIENvbXB1dGVyIHBsYXllciB3b24hJyk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICBjb25zdCBjb21wdXRlckFJID0gKGdhbWVib2FyZCkgPT4ge1xuICAgICAgICBsZXQgcGxheWVyO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkID09PSBodW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgcGxheWVyID0gY29tcHV0ZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb21wdXRlckdhbWVib2FyZCkge1xuICAgICAgICAgICAgcGxheWVyID0gaHVtYW47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdhbWVib2FyZC5oaXRCdXROb3RTdW5rKGdhbWVib2FyZCkpIHtcbiAgICAgICAgICAgIGlmIChwbGF5ZXIuZ2V0UHJldkhpdCgpICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgcGxheWVyLmdldExhc3RIaXQoKSAhPT0gbnVsbCAmJlxuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5nZXRDZWxsKHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdykudGFrZW5CeS5oaXRDb3VudCA+PSAyICYmXG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLmdldENlbGwocGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KS50YWtlbkJ5LmhpdENvdW50IDw9IDQpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnRklOSVNIOiA+PSAyIHRyYWZpZW5pYSB3IHN0YXRlaycsIHBsYXllci5nZXRQcmV2SGl0KCkpO1xuICAgICAgICAgICAgICAgIHBsYXllci5maW5pc2hpbmdBdHRhY2soZ2FtZWJvYXJkLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3csIHBsYXllci5nZXRQcmV2SGl0KCkpO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5zaW5rU2hpcChnYW1lYm9hcmQsIHBsYXllci5nZXRMYXN0SGl0KCkuY29sLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLnJvdyk7XG4gICAgICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkLmdldENlbGwocGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KS50YWtlbkJ5LmhpdENvdW50ID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcGxheWVyLmZvbGxvd3VwQXR0YWNrKGdhbWVib2FyZCwgcGxheWVyLmdldExhc3RIaXQoKS5jb2wsIHBsYXllci5nZXRMYXN0SGl0KCkucm93KTtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQuc2lua1NoaXAoZ2FtZWJvYXJkLCBwbGF5ZXIuZ2V0TGFzdEhpdCgpLmNvbCwgcGxheWVyLmdldExhc3RIaXQoKS5yb3cpO1xuICAgICAgICAgICAgICAgIGlmIChpc0dhbWVPdmVyKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHsgY29sLCByb3cgfSA9IHBsYXllci5yYW5kb21BdHRhY2soZ2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGlmIChnYW1lYm9hcmQuZ2V0Q2VsbChjb2wsIHJvdykuc3RhdHVzID09PSAnaGl0Jykge1xuICAgICAgICAgICAgICAgIHBsYXllci5zZXRQcmV2SGl0KHBsYXllci5nZXRMYXN0SGl0KCkpO1xuICAgICAgICAgICAgICAgIHBsYXllci5zZXRMYXN0SGl0KHsgY29sLCByb3cgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnN0YXR1cyA9PT0gJ2hpdCcgJiYgZ2FtZWJvYXJkLmdldENlbGwoY29sLCByb3cpLnRha2VuQnkuaXNTdW5rKCkpIHtcbiAgICAgICAgICAgICAgICBnYW1lYm9hcmQuc2lua1NoaXAoZ2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldFByZXZIaXQobnVsbCk7XG4gICAgICAgICAgICAgICAgcGxheWVyLnNldExhc3RIaXQobnVsbCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBwbGF5ZXJWc0NvbXB1dGVyTW9kZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBsZXQgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgd2hpbGUgKCFpc0dhbWVPdmVyKCkgJiYgIWlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaWYgKGlzUGxheWVyVHVybikge1xuICAgICAgICAgICAgICAgIHVpLnNldFR1cm5NZXNzYWdlUHZDKGlzUGxheWVyVHVybik7XG4gICAgICAgICAgICAgICAgdWkuc2V0Qm9hcmRQb2ludGVyKCdwbGF5ZXInKTtcbiAgICAgICAgICAgICAgICB1aS53YWl0aW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNvbCwgcm93IH0gPSB5aWVsZCB1aS5oYW5kbGVVc2VySW5wdXQoKTtcbiAgICAgICAgICAgICAgICBodW1hbi5hdHRhY2soY29tcHV0ZXJHYW1lYm9hcmQsIGNvbCwgcm93KTtcbiAgICAgICAgICAgICAgICBjb21wdXRlckdhbWVib2FyZC5zaW5rU2hpcChjb21wdXRlckdhbWVib2FyZCwgY29sLCByb3cpO1xuICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNHYW1lT3ZlcigpIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpc1BsYXllclR1cm4pIHtcbiAgICAgICAgICAgICAgICB1aS5zZXRUdXJuTWVzc2FnZVB2Qyhpc1BsYXllclR1cm4pO1xuICAgICAgICAgICAgICAgIHVpLnNldEJvYXJkUG9pbnRlcignY29tcHV0ZXInKTtcbiAgICAgICAgICAgICAgICB1aS53YWl0aW5nKHRydWUpO1xuICAgICAgICAgICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHVpLmdldFNwZWVkVmFsdWUoKSkpO1xuICAgICAgICAgICAgICAgIGlmICghdWkucFZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbXB1dGVyQUkoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIHVpLnJlZnJlc2hCb2FyZChodW1hbkdhbWVib2FyZCk7XG4gICAgICAgICAgICAgICAgaXNQbGF5ZXJUdXJuID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdWkud2FpdGluZyhmYWxzZSk7XG4gICAgfSk7XG4gICAgY29uc3QgY29tcHV0ZXJWc0NvbXB1dGVyTW9kZSA9ICgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB1aS5yZW1vdmVCb2FyZFBvaW50ZXIoKTtcbiAgICAgICAgbGV0IGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgIHdoaWxlICghaXNHYW1lT3ZlcigpICYmICFpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHVpLndhaXRpbmcodHJ1ZSk7XG4gICAgICAgICAgICBpZiAoaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0VHVybk1lc3NhZ2VDdkMoaXNQbGF5ZXJUdXJuKTtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCB1aS5nZXRTcGVlZFZhbHVlKCkpKTtcbiAgICAgICAgICAgICAgICBpZiAoIXVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21wdXRlckFJKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICB1aS5yZWZyZXNoQm9hcmQoaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzR2FtZU92ZXIoKSB8fCBpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbGF5ZXJUdXJuKSB7XG4gICAgICAgICAgICAgICAgdWkuc2V0VHVybk1lc3NhZ2VDdkMoaXNQbGF5ZXJUdXJuKTtcbiAgICAgICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCB1aS5nZXRTcGVlZFZhbHVlKCkpKTtcbiAgICAgICAgICAgICAgICBpZiAoIXVpLmNWY0J0bi5jbGFzc0xpc3QuY29udGFpbnMoJ3NlbGVjdGVkJykgfHwgaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb21wdXRlckFJKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgICAgICAgICB1aS5yZWZyZXNoQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICAgICAgICAgIGlzUGxheWVyVHVybiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHVpLndhaXRpbmcoZmFsc2UpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJhbmRvbVBsYWNlbWVudCA9IChnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgbGV0IGFsbFNoaXBzO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkID09PSBodW1hbkdhbWVib2FyZCkge1xuICAgICAgICAgICAgaHVtYW5DYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICAgICAgICAgIGh1bWFuQmF0dGxlc2hpcCA9IHNoaXBGYWN0b3J5KCdCYXR0bGVzaGlwJyk7XG4gICAgICAgICAgICBodW1hbkRlc3Ryb3llciA9IHNoaXBGYWN0b3J5KCdEZXN0cm95ZXInKTtcbiAgICAgICAgICAgIGh1bWFuU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgICAgICAgICAgaHVtYW5QYXRyb2xib2F0ID0gc2hpcEZhY3RvcnkoJ1BhdHJvbEJvYXQnKTtcbiAgICAgICAgICAgIGFsbFNoaXBzID0gW2h1bWFuQ2FycmllciwgaHVtYW5CYXR0bGVzaGlwLCBodW1hbkRlc3Ryb3llciwgaHVtYW5TdWJtYXJpbmUsIGh1bWFuUGF0cm9sYm9hdF07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZ2FtZWJvYXJkID09PSBjb21wdXRlckdhbWVib2FyZCkge1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJDYXJyaWVyID0gc2hpcEZhY3RvcnkoJ0NhcnJpZXInKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVyQmF0dGxlc2hpcCA9IHNoaXBGYWN0b3J5KCdCYXR0bGVzaGlwJyk7XG4gICAgICAgICAgICBjb25zdCBjb21wdXRlckRlc3Ryb3llciA9IHNoaXBGYWN0b3J5KCdEZXN0cm95ZXInKTtcbiAgICAgICAgICAgIGNvbnN0IGNvbXB1dGVyU3VibWFyaW5lID0gc2hpcEZhY3RvcnkoJ1N1Ym1hcmluZScpO1xuICAgICAgICAgICAgY29uc3QgY29tcHV0ZXJQYXRyb2xib2F0ID0gc2hpcEZhY3RvcnkoJ1BhdHJvbEJvYXQnKTtcbiAgICAgICAgICAgIGFsbFNoaXBzID0gW2NvbXB1dGVyQ2FycmllciwgY29tcHV0ZXJCYXR0bGVzaGlwLCBjb21wdXRlckRlc3Ryb3llciwgY29tcHV0ZXJTdWJtYXJpbmUsIGNvbXB1dGVyUGF0cm9sYm9hdF07XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5odW1hblNoaXBzLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbnN0IGNvbHMgPSBbJ0EnLCAnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onXTtcbiAgICAgICAgY29uc3QgcmFuZG9tQ29sID0gKCkgPT4gY29sc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjb2xzLmxlbmd0aCldO1xuICAgICAgICBjb25zdCByYW5kb21Sb3cgPSAoKSA9PiBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSAqIDEwKS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCByYW5kb21PcmllbnRhdGlvbiA9ICgpID0+IChNYXRoLnJhbmRvbSgpID4gMC41ID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJyk7XG4gICAgICAgIGFsbFNoaXBzLmZvckVhY2goKHNoaXApID0+IHtcbiAgICAgICAgICAgIGxldCBjb2wgPSByYW5kb21Db2woKTtcbiAgICAgICAgICAgIGxldCByb3cgPSByYW5kb21Sb3coKTtcbiAgICAgICAgICAgIGxldCBvcmllbnRhdGlvbiA9IHJhbmRvbU9yaWVudGF0aW9uKCk7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gZ2FtZWJvYXJkLmNhbkJlUGxhY2VkKHNoaXAuc2l6ZSwgY29sLCByb3csIG9yaWVudGF0aW9uKTtcbiAgICAgICAgICAgIHdoaWxlICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29sID0gcmFuZG9tQ29sKCk7XG4gICAgICAgICAgICAgICAgcm93ID0gcmFuZG9tUm93KCk7XG4gICAgICAgICAgICAgICAgb3JpZW50YXRpb24gPSByYW5kb21PcmllbnRhdGlvbigpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGdhbWVib2FyZC5jYW5CZVBsYWNlZChzaGlwLnNpemUsIGNvbCwgcm93LCBvcmllbnRhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgZ2FtZWJvYXJkLnBsYWNlU2hpcChzaGlwLCBjb2wsIHJvdywgb3JpZW50YXRpb24pO1xuICAgICAgICAgICAgICAgIGdhbWVib2FyZC5yZXNlcnZlU3BhY2UoZ2FtZWJvYXJkLCBjb2wsIHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250cm9sbGVyLmh1bWFuU2hpcHMucHVzaChzaGlwKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCByYW5kb21pemVTaGlwc1BsYWNlbWVudCA9IChnYW1lYm9hcmROYW1lLCBnYW1lYm9hcmQpID0+IHtcbiAgICAgICAgZ2FtZWJvYXJkLmNsZWFyQm9hcmQoKTtcbiAgICAgICAgcmFuZG9tUGxhY2VtZW50KGdhbWVib2FyZCk7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChnYW1lYm9hcmQpO1xuICAgICAgICBpZiAoZ2FtZWJvYXJkTmFtZSA9PT0gJ2ZpcnN0Jykge1xuICAgICAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ2ZpcnN0JywgZ2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3QgcmVzZXRPcmllbnRhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgaHVtYW5TaGlwcy5mb3JFYWNoKChzaGlwKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2hpcC5pc1ZlcnRpY2FsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgc2hpcC5pc1ZlcnRpY2FsID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgcGlja0dhbWVNb2RlID0gKCkgPT4ge1xuICAgICAgICBpZiAodWkuY1ZjQnRuLmNsYXNzTGlzdC5jb250YWlucygnc2VsZWN0ZWQnKSkge1xuICAgICAgICAgICAgcmFuZG9taXplU2hpcHNQbGFjZW1lbnQoJ2ZpcnN0JywgaHVtYW5HYW1lYm9hcmQpO1xuICAgICAgICAgICAgcmFuZG9taXplU2hpcHNQbGFjZW1lbnQoJ3NlY29uZCcsIGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICAgICAgY29tcHV0ZXJWc0NvbXB1dGVyTW9kZSgpO1xuICAgICAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChodW1hbkdhbWVib2FyZCk7XG4gICAgICAgIHJhbmRvbWl6ZVNoaXBzUGxhY2VtZW50KCdzZWNvbmQnLCBjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIGlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBwbGF5ZXJWc0NvbXB1dGVyTW9kZSgpO1xuICAgIH07XG4gICAgY29uc3QgcmVzdGFydCA9ICgpID0+IHtcbiAgICAgICAgaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgaHVtYW4uc2V0UHJldkhpdChudWxsKTtcbiAgICAgICAgaHVtYW4uc2V0TGFzdEhpdChudWxsKTtcbiAgICAgICAgY29tcHV0ZXIuc2V0UHJldkhpdChudWxsKTtcbiAgICAgICAgY29tcHV0ZXIuc2V0TGFzdEhpdChudWxsKTtcbiAgICAgICAgaHVtYW5HYW1lYm9hcmQuY2xlYXJCb2FyZCgpO1xuICAgICAgICBjb21wdXRlckdhbWVib2FyZC5jbGVhckJvYXJkKCk7XG4gICAgICAgIHBvcHVsYXRlU2hpcHMoKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVmcmVzaEJvYXJkKGNvbXB1dGVyR2FtZWJvYXJkKTtcbiAgICAgICAgdWkuY3JlYXRlU2hpcE92ZXJsYXkoJ3NlY29uZCcsIGNvbXB1dGVyR2FtZWJvYXJkLnNoaXBzUGxhY2VkKTtcbiAgICAgICAgZHJhZ0FuZERyb3AoaHVtYW5HYW1lYm9hcmQsIGNvbXB1dGVyR2FtZWJvYXJkLCBodW1hblNoaXBzKTtcbiAgICAgICAgdWkuY2FuQmVTdGFydGVkKCk7XG4gICAgICAgIHBpY2tHYW1lTW9kZSgpO1xuICAgICAgICByZXNldE9yaWVudGF0aW9uKCk7XG4gICAgfTtcbiAgICBjb25zdCBuZXdHYW1lID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIGlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIHlpZWxkIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIHVpLmdldFNwZWVkVmFsdWUoKSkpO1xuICAgICAgICBpc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgcmVzdGFydCgpO1xuICAgIH0pO1xuICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICAgIHVpLnNldEluaXRNZXNzYWdlKCk7XG4gICAgICAgIHVpLnJlbmRlckJvYXJkKGh1bWFuR2FtZWJvYXJkKTtcbiAgICAgICAgdWkucmVuZGVyQm9hcmQoY29tcHV0ZXJHYW1lYm9hcmQpO1xuICAgICAgICBwb3B1bGF0ZVNoaXBzKCk7XG4gICAgICAgIHVpLnJlZnJlc2hCb2FyZChjb21wdXRlckdhbWVib2FyZCk7XG4gICAgICAgIHVpLmNyZWF0ZVNoaXBPdmVybGF5KCdzZWNvbmQnLCBjb21wdXRlckdhbWVib2FyZC5zaGlwc1BsYWNlZCk7XG4gICAgICAgIGRyYWdBbmREcm9wKGh1bWFuR2FtZWJvYXJkLCBjb21wdXRlckdhbWVib2FyZCwgaHVtYW5TaGlwcyk7XG4gICAgICAgIHVpLmNhbkJlU3RhcnRlZCgpO1xuICAgICAgICBwaWNrR2FtZU1vZGUoKTtcbiAgICAgICAgdWkudW5GaWxsQ2VsbHMoJ2ZpcnN0Jyk7XG4gICAgICAgIHVpLnBWY0J0bi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4geyBpbml0LCBodW1hbkdhbWVib2FyZCwgY29tcHV0ZXJHYW1lYm9hcmQsIHJlc3RhcnQsIG5ld0dhbWUsIHN0YXJ0LCByYW5kb21pemVTaGlwc1BsYWNlbWVudCwgaHVtYW5TaGlwcyB9O1xufSkoKTtcbmV4cG9ydCBkZWZhdWx0IGNvbnRyb2xsZXI7XG4iLCJpbXBvcnQgJ25vcm1hbGl6ZS5jc3MnO1xuaW1wb3J0ICcuL3N0eWxlL3N0eWxlLmNzcyc7XG5pbXBvcnQgY29udHJvbGxlciBmcm9tICcuL21vZHVsZXMvY29udHJvbGxlcic7XG5jb250cm9sbGVyLmluaXQoKTtcbiJdLCJuYW1lcyI6WyJjb2xzIiwicm93cyIsImFycmF5Iiwic2hpcHNQbGFjZWQiLCJnZXRDZWxsIiwiY29sIiwicm93IiwiY29sSW5kZXgiLCJpbmRleE9mIiwicm93SW5kZXgiLCJzZXRDZWxsIiwibmV3U3RhdHVzIiwibmV3VGFrZW5CeSIsInN0YXR1cyIsInRha2VuQnkiLCJpIiwiaiIsImdlbmVyYXRlQXJyYXkiLCJjbGVhckJvYXJkIiwidW5kZWZpbmVkIiwibGVuZ3RoIiwicmVtb3ZlU2hpcCIsInNoaXAiLCJnYW1lYm9hcmQiLCJmbGF0IiwiZm9yRWFjaCIsImNlbGwiLCJib2FyZElkIiwibmFtZSIsInNwbGljZSIsImh1bWFuR2FtZWJvYXJkIiwiY29tcHV0ZXJHYW1lYm9hcmQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImdldEF0dHJpYnV0ZSIsInRvTG93ZXJDYXNlIiwicmVtb3ZlIiwiYWRkIiwicmVtb3ZlQXR0cmlidXRlIiwicGxhY2VTaGlwIiwib3JpZW50YXRpb24iLCJpc1ZlcnRpY2FsIiwiaXNIb3Jpem9udGFsIiwiY2VsbHMiLCJzdGFydCIsInNoaXBDZWxscyIsInNpemUiLCJjdXJyZW50Q29sIiwiY3VycmVudFJvdyIsInB1c2giLCJyZWNlaXZlQXR0YWNrIiwiaGl0IiwicmVjZWl2ZUFyb3VuZCIsInJlc2VydmVTcGFjZSIsImZpbHRlciIsImMiLCJkaXJlY3Rpb24iLCJuZXdDb2wiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJjaGFyQ29kZUF0IiwibmV3Um93IiwiTnVtYmVyIiwidG9TdHJpbmciLCJoaXRCdXROb3RTdW5rIiwic29tZSIsImlzU3VuayIsInNpbmtTaGlwIiwiYWxsU3VuayIsInRha2VuQnlDZWxscyIsImV2ZXJ5IiwiY2FuQmVQbGFjZWQiLCJhcmVFbXB0eSIsIml0ZW0iLCJyZW1vdmVSZXNlcnZlZFNwYWNlIiwiaGl0Q291bnQiLCJyb3RhdGUiLCJ0aGlzIiwicHJldkhpdCIsImxhc3RIaXQiLCJyYW5nZSIsImdvUmlnaHQiLCJnb0Rvd24iLCJmaW5pc2hpbmdBdHRhY2siLCJzZXRQcmV2SGl0Iiwic2V0TGFzdEhpdCIsIm5ld1ByZXZIaXQiLCJuZXdMYXN0SGl0IiwiYXR0YWNrIiwicmVzdWx0IiwicmFuZG9tQXR0YWNrIiwicmFuZG9tQ29sIiwicmFuZG9tUm93IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY2VpbCIsImZvbGxvd3VwQXR0YWNrIiwidmFsaWREaXJlY3Rpb25zIiwicmFuZG9tRGlyZWN0aW9uIiwiZ2V0UHJldkhpdCIsImdldExhc3RIaXQiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwiZHJhZ0FuZERyb3AiLCJmaXJzdEdhbWVib2FyZCIsInNlY29uZEdhbWVib2FyZCIsInNoaXBzIiwic2hpcE5hbWUiLCJzaGlwU2l6ZSIsInNoaXBPYmoiLCJncmFiUG9pbnRYIiwiZ3JhYlBvaW50WSIsImhpZ2hsaWdodGVkQ2VsbHMiLCJzaGlwTmFtZVRvT2JqIiwiY2FycmllciIsImJhdHRsZXNoaXAiLCJkZXN0cm95ZXIiLCJzdWJtYXJpbmUiLCJwYXRyb2xib2F0IiwiZmlyc3RCb2FyZEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2Vjb25kQm9hcmRFbGVtZW50IiwiZmlyc3RCb2FyZENlbGxzIiwic2Vjb25kQm9hcmRDZWxscyIsIm5vblNoaXBDZWxscyIsImRyYWdnYWJsZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVNb3VzZWRvd24iLCJoYW5kbGVNb3VzZXVwIiwiaGFuZGxlRHJhZ1N0YXJ0IiwiaGFuZGxlRHJhZ0VuZCIsImhhbmRsZVJvdGF0ZSIsImJsb2NrUmlnaHRDbGljayIsImxhc3REcmFnZ2VkIiwidGFyZ2V0U2hpcE5hbWUiLCJ0YXJnZXQiLCJ1cGRhdGVkU2hpcHNQbGFjZWRGaXJzdCIsInVwZGF0ZWRTaGlwc1BsYWNlZFRlbXAiLCJyZWZyZXNoQm9hcmQiLCJjcmVhdGVTaGlwT3ZlcmxheSIsImh1bWFuU2hpcHMiLCJzZXRUaW1lb3V0Iiwic3R5bGUiLCJ2aXNpYmlsaXR5Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjbG9zZXN0IiwiaWQiLCJoYW5kbGVEcmFnT3ZlciIsImluZGV4IiwicHJldmVudERlZmF1bHQiLCJzdGFydENlbGwiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRXaWR0aCIsInRvSGlnaGxpZ2h0IiwiY2VsbEluZGV4IiwiaXNWYWxpZFBsYWNlbWVudCIsImdldExhc3RTaGlwU2l6ZUVsZW1lbnRzIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGlnaGxpZ2h0ZWRDZWxsIiwiaGFuZGxlRHJvcCIsImxhc3QiLCJkYXRhc2V0IiwiY2FuQmVTdGFydGVkIiwic2V0U3RhcnRNZXNzYWdlIiwic2xpY2UiLCJtaW4iLCJ0ZW1wU2hpcCIsImN1cnJlbnQiLCJmaWxsQ2VsbHMiLCJ1aSIsInN0YXR1c0JveCIsImJvYXJkcyIsInBWY0J0biIsIm5ld0dhbWVCdG4iLCJjVmNCdG4iLCJzdGFydEJ0biIsInJhbmRvbUJ0biIsImFsbEJ0bnMiLCJzcGVlZHMiLCJnZXRFbGVtZW50c0J5TmFtZSIsInJlbmRlckNlbGxzIiwiYm9hcmQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUNlbGwiLCJhcHBlbmQiLCJpbm5lckhUTUwiLCJnZXRVc2VySW5wdXQiLCJoYW5kbGVHYW1lTW9kZSIsInNlbGVjdGVkRWxlbWVudCIsImRlc2VsZWN0ZWRFbGVtZW50Iiwid2FpdGluZyIsImJ0biIsImRpc2FibGVkIiwiZ2V0U3BlZWRWYWx1ZSIsInNldEluaXRNZXNzYWdlIiwicmVzdGFydCIsInNldFJlc3RhcnRNZXNzYWdlIiwiYm9vbCIsImRvY3VtZW50RWxlbWVudCIsInRvZ2dsZSIsInN0YXR1c1RleHRNb2JpbGUiLCJzdGF0dXNUZXh0RGVza3RvcCIsInRleHRDb250ZW50Iiwid2luZG93IiwibWF0Y2hNZWRpYSIsIm1hdGNoZXMiLCJ1bkZpbGxDZWxscyIsInNlY29uZCIsImFsbCIsInJlbW92ZUJvYXJkUG9pbnRlciIsIm5ld0dhbWUiLCJyYW5kb21pemVTaGlwc1BsYWNlbWVudCIsInNwZWVkVmFsdWUiLCJzcGVlZCIsImlucHV0IiwiY2hlY2tlZCIsInJlbmRlckJvYXJkIiwiaGFuZGxlVXNlcklucHV0IiwidXNlcklucHV0Iiwib25jZSIsInNldEJvYXJkUG9pbnRlciIsIndoaWNoIiwiZ2FtZWJvYXJkTmFtZSIsImZpcnN0Q2VsbCIsInNoaXBFbGVtZW50Iiwic2V0U2hpcFN0eWxlIiwiaHRtbEVsZW1lbnQiLCJyb290Rm9udFNpemUiLCJwYXJzZUZsb2F0IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJ3aWR0aCIsImNlbGxTaXplIiwiaGVpZ2h0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYXBwZW5kQ2hpbGQiLCJzZXRUdXJuTWVzc2FnZVB2QyIsImlzUGxheWVyVHVybiIsInNldFR1cm5NZXNzYWdlQ3ZDIiwic2V0R2FtZU92ZXJNZXNzYWdlUHZDIiwid2hvIiwic2V0R2FtZU92ZXJNZXNzYWdlQ3ZDIiwiY29udHJvbGxlciIsImh1bWFuIiwicGxheWVyIiwiY29tcHV0ZXIiLCJpc1N0b3BwZWQiLCJodW1hbkNhcnJpZXIiLCJodW1hbkJhdHRsZXNoaXAiLCJodW1hbkRlc3Ryb3llciIsImh1bWFuU3VibWFyaW5lIiwiaHVtYW5QYXRyb2xib2F0IiwicG9wdWxhdGVTaGlwcyIsImlzR2FtZU92ZXIiLCJjb21wdXRlckFJIiwiYWxsU2hpcHMiLCJyYW5kb21PcmllbnRhdGlvbiIsInJhbmRvbVBsYWNlbWVudCIsInBpY2tHYW1lTW9kZSIsImluaXQiXSwic291cmNlUm9vdCI6IiJ9