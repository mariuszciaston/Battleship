(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],o=[],r=(o,r)=>{const s=e.indexOf(o),l=t.indexOf(r);return-1===s||-1===l?null:a[l][s]},s=(o,r,s,l)=>{const i=e.indexOf(o),n=t.indexOf(r);return-1===i||-1===n?null:(a[n][i].status=s,l&&(a[n][i].takenBy=l),a[n][i])};return(()=>{for(let o=0;o<10;o+=1){a[o]=[];for(let r=0;r<10;r+=1)a[o][r]={col:e[r],row:t[o],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;o.length=0},getCell:r,setCell:s,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let r;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),o.forEach((e=>{null===e.takenBy&&o.splice(o.indexOf(e),1)})),t===n.humanGameboard?r="firstBoard":t===n.computerGameboard?r="secondBoard":t===n.tempBoard&&(r="tempBoard");document.querySelectorAll(`#${r} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,l,i,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?l:i);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:l,o=c?i:d[u+e];if("empty"!==r(t,o).status)return!1;s(t,o,"taken",a),h.push(r(t,o))}return o.push(h[0]),!0},receiveAttack:(e,t)=>{const a=r(e,t);return"taken"===a.status?(a.takenBy.hit(),s(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(s(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=r(e,t);return"empty"===a.status?(s(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const o=e.getCell(t,a);if(o&&o.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===o.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const o=String.fromCharCode(t.col.charCodeAt(0)+a.col),r=(Number(t.row)+a.row).toString();e.getCell(o,r)&&e.receiveAround(o,r)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const o=e.getCell(t,a);if(o&&o.takenBy&&o.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===o.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const o=String.fromCharCode(t.col.charCodeAt(0)+a.col),r=(Number(t.row)+a.row).toString();e.getCell(o,r)&&e.receiveAttack(o,r)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,o,s,l)=>{const i="horizontal"===l,n=i?e:t,c=n.indexOf(i?o:s);if(c<0||c+a>n.length)return!1;for(let e=0;e<a;e+=1){const t=i?n[c+e]:o,a=i?s:n[c+e];if("empty"!==r(t,a).status)return!1}return!0},shipsPlaced:o,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&s(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let o=1,r=!0,s=!0;const l=(e,t,c,d)=>{if(console.log("start finishingAttack prevHit",d),console.log("start finishingAttack lastHit",{col:t,row:c}),d.row===c)if(r){o=1,console.log("goRight");let s=String.fromCharCode(t.charCodeAt(0)+o);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)o+=1,s=String.fromCharCode(t.charCodeAt(0)+o);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,r=!1,l(e,s,c,d))}else{o=1,console.log("goLeft");let s=String.fromCharCode(t.charCodeAt(0)-o);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)o+=1,s=String.fromCharCode(t.charCodeAt(0)-o);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,r=!0,l(e,s,c,d))}else if(d.col===t)if(s){o=1,console.log("goDown");let r=(Number(c)+o).toString();for(;e.getCell(t,r)&&"hit"===e.getCell(t,r).status;)o+=1,r=(Number(c)+o).toString();e.getCell(t,r)&&"hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status?(e.receiveAttack(t,r),"hit"===e.getCell(t,r).status&&(i(a),n({col:t,row:r})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,s=!1,l(e,t,r,d))}else{o=1,console.log("goUp");let r=(Number(c)-o).toString();for(;e.getCell(t,r)&&"hit"===e.getCell(t,r).status;)o+=1,r=(Number(c)-o).toString();e.getCell(t,r)&&"hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status?(e.receiveAttack(t,r),"hit"===e.getCell(t,r).status&&(i(a),n({col:t,row:r})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",o),console.log("---------------"),o+=1):(o=1,s=!0,l(e,t,r,d))}},i=e=>{t=e},n=e=>{a=e};return{attack:(e,t,o)=>{if("hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status){let r=e.receiveAttack(t,o);return"hit"===r&&(i(a),n({col:t,row:o})),r}return"already shot"},randomAttack:r=>{let s,l;do{s=e[Math.floor(Math.random()*e.length)],l=Math.ceil(10*Math.random()).toString()}while("hit"===r.getCell(s,l).status||"miss"===r.getCell(s,l).status);if("hit"!==r.getCell(s,l).status&&"miss"!==r.getCell(s,l).status){const e=r.receiveAttack(s,l);return"hit"===r.getCell(s,l).status&&(i(a),n({col:s,row:l}),console.log("---------------"),console.log("randomAttack prevHit",t),console.log("randomAttack lastHit",a),console.log("randomAttack range",o)),{result:e,col:s,row:l}}return{result:"already shot",col:s,row:l}},followupAttack:(e,r,s)=>{const l=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((t=>{const a=String.fromCharCode(r.charCodeAt(0)+t.col),o=(Number(s)+t.row).toString(),l=e.getCell(a,o);return!(!l||"miss"===l.status||"hit"===l.status)}));if(l.length>0){const c=l[Math.floor(Math.random()*l.length)],d=String.fromCharCode(r.charCodeAt(0)+c.col),u=(Number(s)+c.row).toString();e.receiveAttack(d,u),o=1,"hit"===e.getCell(d,u).status&&(i(a),n({col:d,row:u}),console.log("---------------"),console.log("followupAttack prevHit",t),console.log("followupAttack lastHit",a),console.log("followupAttack range",o))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:l,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:n}};var o=function(e,t,a,o){return new(a||(a=Promise))((function(r,s){function l(e){try{n(o.next(e))}catch(e){s(e)}}function i(e){try{n(o.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((o=o.apply(e,t||[])).next())}))};const r=(()=>{const e=document.querySelector("#wrapper"),t=document.createElement("div");t.id="boards",e.prepend(t);const a=document.querySelector("#playerVsComputer"),r=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),l=document.querySelector("#rotateShip"),i=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),d=[a,r,s,l,i,c],u=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},h=e=>{let t;e===n.humanGameboard?t="firstBoard":e===n.computerGameboard?t="secondBoard":e===n.tempBoard&&(t="tempBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",u(e,a)},m=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},g=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&o(void 0,void 0,void 0,(function*(){p(!0),d.forEach((e=>e.disabled=!0)),a.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),a.textContent="Player vs Computer",d.forEach((e=>e.disabled=!1)),p(!1)})),e===s&&o(void 0,void 0,void 0,(function*(){p(!0),d.forEach((e=>e.disabled=!0)),s.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),s.textContent="Computer vs Computer",d.forEach((e=>e.disabled=!1)),p(!1)})),n.restart())},p=e=>{document.documentElement.classList.toggle("wait",e)},f=(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),o=t.takenBy.name.toLowerCase(),r=t.takenBy.size,s=t.takenBy.isVertical;a.classList.add("ship",o),a.setAttribute("data-size",`${r}`),a.setAttribute("data-name",`${o}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const l=()=>{s?s&&(a.style.width=n/16+"rem",a.style.height=r*(n/16)+"rem"):(a.style.width=r*(n/16)+"rem",a.style.height=n/16+"rem")};let i,n=document.querySelector(".board .cell").getBoundingClientRect().width;l(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,l()})),"first"===e?i="firstBoard":"temp"===e&&(i="tempBoard");document.querySelector(`#${i} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},v=(e,t,a)=>{let o,r,s,l,i=0,c=0,d=[];const u={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]};document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",B),e.addEventListener("mouseup",y),e.addEventListener("dragstart",C),e.addEventListener("dragend",A)}));const m=document.querySelector("#firstBoard"),g=document.querySelector("#tempBoard"),p=m.querySelectorAll(".cell"),w=g.querySelectorAll(".cell");let S=null;function B(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const o=a.target.getAttribute("data-name");let r=e.shipsPlaced.filter((e=>o!==e.takenBy.name.toLowerCase())),s=t.shipsPlaced.filter((e=>o!==e.takenBy.name.toLowerCase()));r.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),s.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),h(e),h(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)}function y(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),h(e),h(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)}function C(a){setTimeout((()=>{const n=a.target;n.style.visibility="hidden",this.classList.add("dragging"),o=n.getAttribute("data-name"),r=Number(n.getAttribute("data-size")),i=a.offsetX,c=a.offsetY,s=u[o],l=s.isVertical?"vertical":"horizontal","firstBoard"===n.closest(".board").id&&e.removeShip(s,e),"tempBoard"===n.closest(".board").id&&t.removeShip(s,t)}),0)}function k(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id){t.preventDefault();let a=e-(s.isVertical?10*Math.floor(c/this.offsetHeight):Math.floor(i/this.offsetWidth));const o=[];for(let e=0;e<r;e++){let t=s.isVertical?a+10*e:a+e;p[t]&&(o.push(p[t]),d.push(p[t]))}E(o)&&(o.forEach((e=>{e.classList.add("highlight")})),S||(S=P(d,r)))}if("tempBoard"===a.closest(".board").id){t.preventDefault();let a=e-(s.isVertical?10*Math.floor(c/this.offsetHeight):Math.floor(i/this.offsetWidth));const o=[];for(let e=0;e<r;e++){let t=s.isVertical?a+10*e:a+e;w[t]&&(o.push(w[t]),d.push(w[t]))}E(o)&&(o.forEach((e=>{e.classList.add("highlight")})),S||(S=P(d,r)))}}}function b(){d.forEach((e=>{e.classList.remove("highlight")})),d=[]}function L(a){d.forEach((e=>{e.classList.remove("highlight")}));const o=P(d,r),i=a.target;"firstBoard"===i.closest(".board").id&&(e.canBePlaced(s.size,o[0].dataset.col,o[0].dataset.row,l)?(e.placeShip(s,o[0].dataset.col,o[0].dataset.row,l),n.humanGameboard.reserveSpace(n.humanGameboard,o[0].dataset.col,o[0].dataset.row)):(e.placeShip(s,S[0].dataset.col,S[0].dataset.row,l),n.humanGameboard.reserveSpace(n.humanGameboard,S[0].dataset.col,S[0].dataset.row))),"tempBoard"===i.closest(".board").id&&(t.canBePlaced(s.size,o[0].dataset.col,o[0].dataset.row,l)?(t.placeShip(s,o[0].dataset.col,o[0].dataset.row,l),n.tempBoard.reserveSpace(n.tempBoard,o[0].dataset.col,o[0].dataset.row)):(t.placeShip(s,S[0].dataset.col,S[0].dataset.row,l),n.tempBoard.reserveSpace(n.tempBoard,S[0].dataset.col,S[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),h(e),h(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips),S=null}function A(a){const o=a.target;o.style.visibility="visible",this.classList.remove("dragging"),0===d.length&&("firstBoard"===o.closest(".board").id?S&&e.canBePlaced(s.size,S[0].dataset.col,S[0].dataset.row,l)&&(e.placeShip(s,S[0].dataset.col,S[0].dataset.row,l),e.reserveSpace(e,S[0].dataset.col,S[0].dataset.row),h(e),h(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)):"tempBoard"===o.closest(".board").id&&S&&t.canBePlaced(s.size,S[0].dataset.col,S[0].dataset.row,l)&&(t.placeShip(s,S[0].dataset.col,S[0].dataset.row,l),t.reserveSpace(t,S[0].dataset.col,S[0].dataset.row),h(e),h(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),v(e,t,n.humanShips)))}function E(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===r&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function P(e,t){return e.slice(Math.min(e.length-t,0))}p.forEach(((e,t)=>{e.addEventListener("dragover",k(t)),e.addEventListener("dragleave",b),e.addEventListener("drop",L)})),w.forEach(((e,t)=>{e.addEventListener("dragover",k(t)),e.addEventListener("dragleave",b),e.addEventListener("drop",L)}))};return a.addEventListener("click",(()=>g(a,s))),s.addEventListener("click",(()=>g(s,a))),r.addEventListener("click",(()=>o(void 0,void 0,void 0,(function*(){p(!0),d.forEach((e=>e.disabled=!0)),r.textContent="Restarting...",yield n.newGame(),r.textContent="New Game",d.forEach((e=>e.disabled=!1)),p(!1)})))),l.addEventListener("click",(()=>n.rotateShip())),i.addEventListener("click",(()=>n.start())),c.addEventListener("click",(()=>{n.tempBoard.clearBoard(),h(n.tempBoard),n.randomizeShipsPlacement("first",n.humanGameboard),v(n.humanGameboard,n.tempBoard,n.humanShips)})),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===n.humanGameboard?a.id="firstBoard":e===n.computerGameboard?a.id="secondBoard":e===n.tempBoard&&(a.id="tempBoard"),u(e,a),t.append(a)},refreshBoard:h,handleUserInput:()=>o(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(m(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:s,waiting:p,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:f,dragAndDrop:v}})(),s=r;var l=function(e,t,a,o){return new(a||(a=Promise))((function(r,s){function l(e){try{n(o.next(e))}catch(e){s(e)}}function i(e){try{n(o.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?r(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((o=o.apply(e,t||[])).next())}))};const i=(()=>{const o=e(),r=e(),n=e(),c=a(),d=a();let u=!0,h=t("Carrier"),m=t("Battleship"),g=t("Destroyer"),p=t("Submarine"),f=t("PatrolBoat");const v=[h,m,g,p,f],w=()=>(r.allSunk(r)||!!o.allSunk(o))&&(s.removeBoardPointer(),!0),S=e=>{let t;if(e===o?t=d:e===r&&(t=c),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),w())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),w()))return}else{const{col:a,row:o}=t.randomAttack(e);if("hit"===e.getCell(a,o).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:o})),"hit"===e.getCell(a,o).status&&e.getCell(a,o).takenBy.isSunk()&&(e.sinkShip(e,a,o),t.setPrevHit(null),t.setLastHit(null),w()))return}},B=(e,a)=>{a.clearBoard(),(e=>{let a;e===o?(h=t("Carrier"),m=t("Battleship"),g=t("Destroyer"),p=t("Submarine"),f=t("PatrolBoat"),a=[h,m,g,p,f]):e===r&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);i.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],l=()=>s[Math.floor(Math.random()*s.length)],n=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=l(),o=n(),r=c(),s=e.canBePlaced(t.size,a,o,r);for(;!s;)a=l(),o=n(),r=c(),s=e.canBePlaced(t.size,a,o,r);s&&(e.placeShip(t,a,o,r),e.reserveSpace(e,a,o)),i.humanShips.push(t)}))})(a),s.refreshBoard(a),"first"===e&&s.createShipOverlay("first",a.shipsPlaced)},y=()=>{s.cVcBtn.classList.contains("selected")&&(B("first",o),B("second",r),u=!1,l(void 0,void 0,void 0,(function*(){s.removeBoardPointer();let e=!0;for(;!w()&&!u;){if(s.waiting(!0),e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;S(o),s.refreshBoard(o),e=!1}if(w()||u)break;if(!e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;S(r),s.refreshBoard(r),e=!0}}u=!1,s.waiting(!1)})))},C=()=>{u=!0,c.setPrevHit(null),c.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),o.clearBoard(),r.clearBoard(),s.refreshBoard(o),s.refreshBoard(r),y()};return{init:()=>{s.renderBoard(o),s.renderBoard(n),n.placeShip(h,"A","1","horizontal"),n.placeShip(m,"A","3","horizontal"),n.placeShip(g,"A","5","horizontal"),n.placeShip(p,"A","7","horizontal"),n.placeShip(f,"A","9","vertical"),n.reserveSpace(n,"A","1"),n.reserveSpace(n,"A","3"),n.reserveSpace(n,"A","5"),n.reserveSpace(n,"A","7"),n.reserveSpace(n,"A","9"),s.refreshBoard(n),s.createShipOverlay("temp",n.shipsPlaced),s.dragAndDrop(o,n,v),y()},humanGameboard:o,computerGameboard:r,tempBoard:n,restart:C,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,1e3))),u=!1,C()})),rotateShip:()=>{console.log("rotate")},start:()=>{B("second",r),u=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!w()&&!u;){if(e){s.setBoardPointer("player"),s.waiting(!1);const{col:t,row:a}=yield s.handleUserInput();c.attack(r,t,a),r.sinkShip(r,t,a),s.refreshBoard(r),e=!1}if(w()||u)break;if(!e){if(s.setBoardPointer("computer"),s.waiting(!0),yield new Promise((e=>setTimeout(e,1e3))),!s.pVcBtn.classList.contains("selected")||u)break;S(o),s.refreshBoard(o),e=!0}}u=!1,s.waiting(!1)}))},randomizeShipsPlacement:B,humanShips:v}})(),n=i;n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,