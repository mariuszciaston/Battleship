(()=>{"use strict";const t=()=>{const t=["A","B","C","D","E","F","G","H","I","J"],e=["1","2","3","4","5","6","7","8","9","10"],a=[],r=(r,s)=>{const n=t.indexOf(r),i=e.indexOf(s);return-1===n||-1===i?null:a[i][n]},s=(r,s,n,i)=>{const o=t.indexOf(r),l=e.indexOf(s);return-1===o||-1===l?null:(a[l][o].status=n,i&&(a[l][o].takenBy=i),a[l][o])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let s=0;s<10;s+=1)a[r][s]={col:t[s],row:e[r],status:"empty",takenBy:void 0}}})(),{getCell:r,placeShip:(a,n,i,o)=>{const l="horizontal"===o,c=l?t:e,d=c.indexOf(l?n:i);if(d<0||d+a.size>c.length)return!1;for(let t=0;t<a.size;t+=1){const e=l?c[d+t]:n,o=l?i:c[d+t];if("empty"!==r(e,o).status)return!1;s(e,o,"taken",a)}return!0},receiveAttack:(t,e)=>{const a=r(t,e);return"taken"===a.status?(a.takenBy.hit(),s(t,e,"hit"),a.status):"empty"===a.status?(s(t,e,"miss"),a.status):null},allSunk:()=>{for(let t=0;t<10;t+=1)for(let e=0;e<10;e+=1)if("taken"===a[t][e].status&&!a[t][e].takenBy.isSunk())return!1;return!0},array:a}},e=t=>{let e,a=0;"Carrier"===t&&(e=5),"Battleship"===t&&(e=4),"Destroyer"===t&&(e=3),"Submarine"===t&&(e=3),"Patrol Boat"===t&&(e=2);return{name:t,size:e,hit:()=>{a+=1},isSunk:()=>a===e}},a=()=>({attack:(t,e,a)=>"hit"!==t.getCell(e,a).status&&"miss"!==t.getCell(e,a).status?t.receiveAttack(e,a):"already shot",randomAttack:t=>{const e=["A","B","C","D","E","F","G","H","I","J"];let a,r;do{a=e[Math.floor(Math.random()*e.length)],r=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(a,r).status||"miss"===t.getCell(a,r).status);return"hit"!==t.getCell(a,r).status&&"miss"!==t.getCell(a,r).status?t.receiveAttack(a,r):"already shot"}}),r=t(),s=t(),n=a(),i=a();(()=>{const t=e("Carrier"),a=e("Battleship"),n=e("Destroyer"),i=e("Submarine"),o=e("Patrol Boat");r.placeShip(t,"A","1","horizontal"),r.placeShip(a,"A","3","horizontal"),r.placeShip(n,"A","5","horizontal"),r.placeShip(i,"A","7","horizontal"),r.placeShip(o,"A","9","horizontal"),s.placeShip(t,"A","1","vertical"),s.placeShip(a,"C","1","vertical"),s.placeShip(n,"E","1","vertical"),s.placeShip(i,"G","1","vertical"),s.placeShip(o,"I","1","vertical")})();const o=()=>{const t=document.createElement("div");t.id="wrapper",document.body.append(t);const e=(t,e)=>{t.array.forEach((t=>{t.forEach((t=>{const a=(t=>{const e=document.createElement("div");return e.classList.add("cell"),e.classList.add(t.status),e.setAttribute("data-col",t.col),e.setAttribute("data-row",t.row),e})(t);e.append(a)}))}))},a=a=>{const n=document.createElement("div");n.classList.add("board"),a===r?n.id="firstBoard":a===s&&(n.id="secondBoard"),e(a,n),t.append(n)},o=t=>{const a=t===r?"firstBoard":"secondBoard",s=document.querySelector(`#${a}`);s.innerHTML="",e(t,s)};a(r),a(s),document.querySelector("#secondBoard").addEventListener("click",(t=>{if(!t.target.classList.contains("hit")&&!t.target.classList.contains("miss")){const e=t.target.getAttribute("data-col"),a=t.target.getAttribute("data-row");n.attack(s,e,a),o(s),i.randomAttack(r),o(r)}}))};o()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,