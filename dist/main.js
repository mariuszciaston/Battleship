(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],r=[],a=[],s=(a,s)=>{const o=e.indexOf(a),n=t.indexOf(s);return-1===o||-1===n?null:r[n][o]},o=(a,s,o,n)=>{const i=e.indexOf(a),l=t.indexOf(s);return-1===i||-1===l?null:(r[l][i].status=o,n&&(r[l][i].takenBy=n),r[l][i])};return{generateArray:()=>{for(let a=0;a<10;a+=1){r[a]=[];for(let s=0;s<10;s+=1)r[a][s]={col:e[s],row:t[a],status:"empty",takenBy:null}}},clearBoard:()=>{r.flat().forEach((e=>{e.status="empty",e.takenBy=void 0})),a.length=0},getCell:s,setCell:o,removeShip:(e,t)=>{t.array.flat().forEach((t=>{"taken"===t.status&&t.takenBy.name===e.name&&(t.status="empty",t.takenBy=null);const r=a.indexOf(t);null===t.takenBy&&-1!==r&&a.splice(r,1)}))},placeShip:(r,n,i,l)=>{const c="horizontal"===l,d=c?e:t,u=d.indexOf(c?n:i);r.isVertical="horizontal"!==l;let h=[];if(u<0||u+r.size>d.length)return!1;for(let e=0;e<r.size;e+=1){const t=c?d[u+e]:n,a=c?i:d[u+e];if("empty"!==s(t,a).status)return!1;o(t,a,"taken",r),h.push(s(t,a))}return a.push(h[0]),!0},receiveAttack:(e,t)=>{const r=s(e,t);return"taken"===r.status?(r.takenBy.hit(),o(e,t,"hit"),r.status):"empty"===r.status||"reserved"===r.status?(o(e,t,"miss"),r.status):null},receiveAround:(e,t)=>{const r=s(e,t);return"empty"===r.status?(o(e,t,"reserved"),r.status):null},reserveSpace:(e,t,r)=>{const a=e.getCell(t,r);if(a&&a.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===a.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const a=String.fromCharCode(t.col.charCodeAt(0)+r.col),s=(Number(t.row)+r.row).toString();e.getCell(a,s)&&e.receiveAround(a,s)}))}))}},reserveSpaceForAll:function(e){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,r)=>{const a=e.getCell(t,r);if(a&&a.takenBy&&a.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===a.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((r=>{const a=String.fromCharCode(t.col.charCodeAt(0)+r.col),s=(Number(t.row)+r.row).toString();e.getCell(a,s)&&e.receiveAttack(a,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:r,canBePlaced:(r,a,o,n)=>{const i="horizontal"===n,l=i?e:t,c=l.indexOf(i?a:o);if(c<0||c+r>l.length)return!1;const d=[];for(let e=0;e<r;e+=1){const t=i?l[c+e]:a,r=i?o:l[c+e];d.push("empty"===s(t,r).status)}return d.every((e=>!0===e))},shipsPlaced:a,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&o(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},r=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,r=null,a=1,s=!0,o=!0;const n=(e,t,c,d)=>{if(d.row===c)if(s){a=1;let o=String.fromCharCode(t.charCodeAt(0)+a);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)a+=1,o=String.fromCharCode(t.charCodeAt(0)+a);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(i(r),l({col:o,row:c})),a+=1):(a=1,s=!1,n(e,o,c,d))}else{a=1;let o=String.fromCharCode(t.charCodeAt(0)-a);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)a+=1,o=String.fromCharCode(t.charCodeAt(0)-a);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(i(r),l({col:o,row:c})),a+=1):(a=1,s=!0,n(e,o,c,d))}else if(d.col===t)if(o){a=1;let s=(Number(c)+a).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)a+=1,s=(Number(c)+a).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(i(r),l({col:t,row:s})),a+=1):(a=1,o=!1,n(e,t,s,d))}else{a=1;let s=(Number(c)-a).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)a+=1,s=(Number(c)-a).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(i(r),l({col:t,row:s})),a+=1):(a=1,o=!0,n(e,t,s,d))}},i=e=>{t=e},l=e=>{r=e};return{attack:(e,t,a)=>{if("hit"!==e.getCell(t,a).status&&"miss"!==e.getCell(t,a).status){let s=e.receiveAttack(t,a);return"hit"===s&&(i(r),l({col:t,row:a})),s}return"already shot"},randomAttack:t=>{let a,s;do{a=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(a,s).status||"miss"===t.getCell(a,s).status);if("hit"!==t.getCell(a,s).status&&"miss"!==t.getCell(a,s).status){const e=t.receiveAttack(a,s);return"hit"===t.getCell(a,s).status&&(i(r),l({col:a,row:s})),{result:e,col:a,row:s}}return{result:"already shot",col:a,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((r=>{const a=String.fromCharCode(t.charCodeAt(0)+r.col),o=(Number(s)+r.row).toString(),n=e.getCell(a,o);return!(!n||"miss"===n.status||"hit"===n.status)}));if(o.length>0){const n=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+n.col),d=(Number(s)+n.row).toString();e.receiveAttack(c,d),a=1,"hit"===e.getCell(c,d).status&&(i(r),l({col:c,row:d}))}},finishingAttack:n,prevHit:t,lastHit:r,getPrevHit:()=>t,getLastHit:()=>r,setPrevHit:i,setLastHit:l}};var a=function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};const s=(e,t,r)=>{const s=document.querySelector("#firstBoard"),o=document.querySelector("#secondBoard"),n=s.querySelectorAll(".cell"),l=o.querySelectorAll(".cell");let c,u,h,m,f=0,g=0,v=[];const p={carrier:r[0],battleship:r[1],destroyer:r[2],submarine:r[3],patrolboat:r[4]};let y=null;const S=document.querySelectorAll(".draggable");function w(e){return Array.from(e).filter((e=>!e.classList.contains("taken")))}const C=[...w(n),...w(l)];function B(e,t){return e.slice(Math.min(e.length-t,0))}function b(r){const a=r.target;let s;const o=a.closest(".board").id;return"firstBoard"===o&&(s=e),"secondBoard"===o&&(s=t),{target:a,gameboard:s}}function L(e,t){return c=t.getAttribute("data-name"),u=Number(t.getAttribute("data-size")),f=e.offsetX,g=e.offsetY,h=p[c],m=h.isVertical?"vertical":"horizontal",{shipName:c,shipObj:h}}function k(){v.forEach((e=>e.classList.remove("highlight")))}function A(e){return"firstBoard"===e||"secondBoard"===e}function P(e){const{gameboard:t}=b(e);t.removeReservedSpace(t),function(e,t){const{target:r}=b(t),a=r.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>a!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)}))}(t,e),d.renew(),i.setInitMessage()}function E(e){return a(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const{target:t,gameboard:r}=b(e);t.style.visibility="hidden",L(e,t),r.removeShip(h,r),i.clearShip(h,r)}))}function H(e){return function(t){const{target:r}=b(t),a=r.closest(".board").id;if(A(a)&&(t.preventDefault(),h)){const r=function(e,t,r){const{target:a}=b(r);return e-(t.isVertical?10*Math.floor(g/a.offsetHeight):Math.floor(f/a.offsetWidth))}(e,h,t),s=function(e){return"firstBoard"===e?n:l}(a),o=[];!function(e,t,r,a){for(let s=0;s<u;s++){let o=e.isVertical?t+10*s:t+s;r[o]&&(a.push(r[o]),v.push(r[o]))}}(h,r,s,o),function(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===u&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}(o)&&(!function(e){e.forEach((e=>{e.classList.add("highlight")}))}(o),y||(y=B(v,u)))}}}function M(){k(),v.length=0}function V(e){k();const t=B(v,u),{target:r,gameboard:a}=b(e);A(r.closest(".board").id)&&h&&null!==y&&function(e,t,r,a){e.canBePlaced(t.size,r[0].dataset.col,r[0].dataset.row,a)?(e.placeShip(t,r[0].dataset.col,r[0].dataset.row,a),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(t,y[0].dataset.col,y[0].dataset.row,a),e.reserveSpace(e,y[0].dataset.col,y[0].dataset.row))}(a,h,t,m),a.removeReservedSpace(a),a.reserveSpaceForAll(a),d.renew(),i.canBeStarted(),i.setStartMessage(),y=null}function q(r){const a=r.target;a.style.visibility="visible",function(r,a){if(0===v.length){const s=r.closest(".board");if(s){let{gameboard:r}=b(a);"firstBoard"===s.id?r=e:"secondBoard"===s.id&&(r=t),r&&y&&r.canBePlaced(h.size,y[0].dataset.col,y[0].dataset.row,m)&&(r.placeShip(h,y[0].dataset.col,y[0].dataset.row,m),r.reserveSpace(r,y[0].dataset.col,y[0].dataset.row),d.renew())}}}(a,r),i.canBeStarted()&&i.fillCells("second"),i.setStartMessage()}function x(e){const{gameboard:t}=b(e);t.reserveSpaceForAll(t),d.renew(),i.setStartMessage()}function z(e){e.preventDefault();const{target:t,gameboard:r}=b(e),{shipName:a,shipObj:s}=L(e,t),o=r.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===a));r.removeShip(s,r),r.removeReservedSpace(r),r.reserveSpaceForAll(r),s.rotate(),m=s.isVertical?"vertical":"horizontal",r.canBePlaced(s.size,o[0].col,o[0].row,m)||(s.rotate(),m=s.isVertical?"vertical":"horizontal"),r.placeShip(s,o[0].col,o[0].row,m),r.reserveSpaceForAll(r),d.renew(),i.canBeStarted()&&i.fillCells("second")}function G(e){e.preventDefault()}function O(e){e.forEach(((e,t)=>{e.addEventListener("dragover",H(t)),e.addEventListener("dragleave",M),e.addEventListener("drop",V)}))}O(n),O(l),S.forEach((e=>{e.addEventListener("mousedown",P),e.addEventListener("dragstart",E),e.addEventListener("dragend",q),e.addEventListener("mouseup",x),e.addEventListener("contextmenu",z),C.forEach((e=>e.addEventListener("contextmenu",G)))}))};var o=function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};const n=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),r=document.querySelector("#playerVsComputer"),a=document.querySelector("#newGame"),i=document.querySelector("#computerVsComputer"),l=document.querySelector("#start"),c=document.querySelector("#randomPlacement"),u=[r,a,i,l,c],h=document.getElementsByName("speed");let m=1e3;const f=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const r=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(r)}))}))},g=e=>e===d.humanGameboard?"firstBoard":e===d.computerGameboard?"secondBoard":void 0,v=e=>{const t=document.querySelector(`#${g(e)}`);t.innerHTML="",f(e,t)},p=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},y=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===r&&o(void 0,void 0,void 0,(function*(){L("first"),S(!0),u.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,A()))),u.forEach((e=>e.disabled=!1)),S(!1),w(),C()})),e===i&&o(void 0,void 0,void 0,(function*(){S(!0),u.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,A()))),u.forEach((e=>e.disabled=!1)),S(!1),l.disabled=!0,c.disabled=!0,i.disabled=!0})),d.restart(),b())},S=e=>{document.documentElement.classList.toggle("wait",e)},w=()=>5===d.humanGameboard.shipsPlaced.length&&0===d.computerGameboard.shipsPlaced.length?(L("second"),l.disabled=!1,!0):(l.disabled=!0,!1),C=()=>{const t="Use 'Random Placement' button, then press Start!",r="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==r&&"Restarting..."!==e.textContent&&"You can now begin the game. Press start!"!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=r))},B=()=>{w()&&(e.textContent="You can now begin the game. Press start!")},b=()=>{e.textContent="Restarting..."},L=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},k=e=>o(void 0,void 0,void 0,(function*(){let t;S(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const r=t.querySelectorAll(".cell");r.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{r.forEach(((t,a)=>{setTimeout((()=>{t.classList.remove("filled"),a===r.length-1&&e()}),A()/120*a)}))})),S(!1)}));r.addEventListener("click",(()=>{L("first"),y(r,i);document.querySelector("#secondBoard").classList.remove("start"),l.disabled=!0,r.disabled=!0,k("first")})),i.addEventListener("click",(()=>{L("first"),L("second"),y(i,r);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),l.disabled=!0,c.disabled=!0,i.disabled=!0,Promise.all([k("first"),k("second")])})),a.addEventListener("click",(()=>o(void 0,void 0,void 0,(function*(){L("first"),i.classList.contains("selected")&&(L("second"),l.disabled=!0,c.disabled=!0,i.disabled=!0),n.removeBoardPointer(),yield o(void 0,void 0,void 0,(function*(){b(),S(!0),u.forEach((e=>e.disabled=!0)),yield d.newGame(),u.forEach((e=>e.disabled=!1)),S(!1),w(),r.classList.contains("selected")&&C()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),r.classList.contains("selected")&&(e.classList.remove("start"),k("first"),l.disabled=!0,r.disabled=!0),i.classList.contains("selected")&&(e.classList.add("start"),c.disabled=!0,Promise.all([k("first"),k("second")]),l.disabled=!0,c.disabled=!0,i.disabled=!0)})))),l.addEventListener("click",(()=>{d.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),l.disabled=!0,c.disabled=!0,k("second")})),c.addEventListener("click",(()=>{d.computerGameboard.clearBoard(),v(d.computerGameboard),d.randomizeShipsPlacement(d.humanGameboard),s(d.humanGameboard,d.computerGameboard,d.humanShips),w(),B(),L("second")})),h.forEach((e=>{e.addEventListener("click",(()=>{let t=e;t.checked&&(m=Number(t.value))}))}));const A=()=>m;return window.addEventListener("resize",C),{renderBoard:e=>{const r=document.createElement("div");r.classList.add("board"),r.id=g(e),f(e,r),t.append(r)},clearShip:(e,t)=>{document.querySelectorAll(`#${g(t)} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))},refreshBoard:v,handleUserInput:()=>o(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(p(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:r,cVcBtn:i,waiting:S,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:e=>{e.shipsPlaced.forEach((t=>{const r=document.createElement("div"),a=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;r.classList.add("ship",a),r.setAttribute("data-size",`${s}`),r.setAttribute("data-name",`${a}`),r.setAttribute("draggable","true"),r.classList.add("draggable");const n=()=>{const e=document.querySelector("html"),t=parseFloat(window.getComputedStyle(e,null).getPropertyValue("font-size"));o?o&&(r.style.width=i/t+"rem",r.style.height=s*(i/t)+"rem"):(r.style.width=s*(i/t)+"rem",r.style.height=i/t+"rem")};let i=document.querySelector(".board .cell").getBoundingClientRect().width;n(),window.addEventListener("resize",(function(){i=document.querySelector(".board .cell").getBoundingClientRect().width,n()}));document.querySelector(`#${g(e)} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(r)}))},canBeStarted:w,setInitMessage:C,setStartMessage:B,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:b,getSpeedValue:A,fillCells:L,unFillCells:k}})(),i=n;var l=function(e,t,r,a){return new(r||(r=Promise))((function(s,o){function n(e){try{l(a.next(e))}catch(e){o(e)}}function i(e){try{l(a.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?s(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(n,i)}l((a=a.apply(e,t||[])).next())}))};const c=(()=>{const a=e(),o=e(),n=r(),d=r();let u=!0,h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),g=t("Submarine"),v=t("PatrolBoat");const p=[h,m,f,g,v],y=()=>{o.placeShip(h,"A","1","horizontal"),o.placeShip(m,"A","3","horizontal"),o.placeShip(f,"A","5","horizontal"),o.placeShip(g,"A","7","horizontal"),o.placeShip(v,"A","9","horizontal"),o.reserveSpace(o,"A","1"),o.reserveSpace(o,"A","3"),o.reserveSpace(o,"A","5"),o.reserveSpace(o,"A","7"),o.reserveSpace(o,"A","9")},S=()=>o.allSunk(o)?(i.removeBoardPointer(),i.pVcBtn.classList.contains("selected")&&i.setGameOverMessagePvC("player"),i.cVcBtn.classList.contains("selected")&&i.setGameOverMessageCvC("player"),!0):!!a.allSunk(a)&&(i.removeBoardPointer(),i.pVcBtn.classList.contains("selected")&&i.setGameOverMessagePvC("computer"),i.cVcBtn.classList.contains("selected")&&i.setGameOverMessageCvC("computer"),!0),w=e=>{let t;if(e===a?t=d:e===o&&(t=n),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),S())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),S()))return}else{const{col:r,row:a}=t.randomAttack(e);if("hit"===e.getCell(r,a).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:r,row:a})),"hit"===e.getCell(r,a).status&&e.getCell(r,a).takenBy.isSunk()&&(e.sinkShip(e,r,a),t.setPrevHit(null),t.setLastHit(null),S()))return}},C=e=>{e.clearBoard(),(e=>{let r;e===a?(h=t("Carrier"),m=t("Battleship"),f=t("Destroyer"),g=t("Submarine"),v=t("PatrolBoat"),r=[h,m,f,g,v]):e===o&&(r=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);c.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],n=()=>s[Math.floor(Math.random()*s.length)],i=()=>Math.ceil(10*Math.random()).toString(),l=()=>Math.random()>.5?"horizontal":"vertical";r.forEach((t=>{let r=n(),a=i(),s=l(),o=e.canBePlaced(t.size,r,a,s);for(;!o;)r=n(),a=i(),s=l(),o=e.canBePlaced(t.size,r,a,s);o&&(e.placeShip(t,r,a,s),e.reserveSpace(e,r,a)),c.humanShips.push(t)}))})(e),i.refreshBoard(e),e===a&&i.createShipOverlay(e)},B=()=>{i.cVcBtn.classList.contains("selected")&&(C(a),C(o),u=!1,l(void 0,void 0,void 0,(function*(){i.removeBoardPointer();let e=!0;for(;!S()&&!u;){if(i.waiting(!0),e){if(i.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),!i.cVcBtn.classList.contains("selected")||u)break;w(a),i.refreshBoard(a),e=!1}if(S()||u)break;if(!e){if(i.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),!i.cVcBtn.classList.contains("selected")||u)break;w(o),i.refreshBoard(o),e=!0}}u=!1,i.waiting(!1)})),i.refreshBoard(a))},b=()=>{u=!0,n.setPrevHit(null),n.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),a.clearBoard(),o.clearBoard(),y(),i.refreshBoard(a),i.refreshBoard(o),i.createShipOverlay(o),s(a,o,p),i.canBeStarted(),B(),p.forEach((e=>{!0===e.isVertical&&(e.isVertical=!1)}))};return{init:()=>{i.setInitMessage(),a.generateArray(),o.generateArray(),i.renderBoard(a),i.renderBoard(o),y(),i.refreshBoard(o),i.createShipOverlay(o),s(a,o,p),i.canBeStarted(),B(),i.unFillCells("first"),i.pVcBtn.disabled=!0},renew:()=>{i.refreshBoard(a),i.refreshBoard(o),i.createShipOverlay(a),i.createShipOverlay(o),s(a,o,p)},humanGameboard:a,computerGameboard:o,restart:b,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),u=!1,b()})),start:()=>{i.refreshBoard(a),C(o),u=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!S()&&!u;){if(e){i.setTurnMessagePvC(e),i.setBoardPointer("player"),i.waiting(!1);const{col:t,row:r}=yield i.handleUserInput();n.attack(o,t,r),o.sinkShip(o,t,r),i.refreshBoard(o),e=!1}if(S()||u)break;if(!e){if(i.setTurnMessagePvC(e),i.setBoardPointer("computer"),i.waiting(!0),yield new Promise((e=>setTimeout(e,i.getSpeedValue()))),!i.pVcBtn.classList.contains("selected")||u)break;w(a),i.refreshBoard(a),e=!0}}u=!1,i.waiting(!1)}))},randomizeShipsPlacement:C,humanShips:p}})(),d=c;d.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,