(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],t=["1","2","3","4","5","6","7","8","9","10"],a=[],r=[],o=(r,o)=>{const s=e.indexOf(r),l=t.indexOf(o);return-1===s||-1===l?null:a[l][s]},s=(r,o,s,l)=>{const i=e.indexOf(r),n=t.indexOf(o);return-1===i||-1===n?null:(a[n][i].status=s,l&&(a[n][i].takenBy=l),a[n][i])};return(()=>{for(let r=0;r<10;r+=1){a[r]=[];for(let o=0;o<10;o+=1)a[r][o]={col:e[o],row:t[r],status:"empty",takenBy:null}}})(),{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)a[e][t].status="empty",a[e][t].takenBy=void 0;r.length=0},getCell:o,setCell:s,removeShip:(e,t)=>{t.array.flat().forEach((a=>{let o;"taken"===a.status&&a.takenBy.name===e.name&&(a.status="empty",a.takenBy=null),r.forEach((e=>{null===e.takenBy&&r.splice(r.indexOf(e),1)})),t===n.humanGameboard?o="firstBoard":t===n.computerGameboard?o="secondBoard":t===n.tempBoard&&(o="tempBoard");document.querySelectorAll(`#${o} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(a,l,i,n)=>{a.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:t,u=d.indexOf(c?l:i);let h=[];if(u<0||u+a.size>d.length)return!1;for(let e=0;e<a.size;e+=1){const t=c?d[u+e]:l,r=c?i:d[u+e];if("empty"!==o(t,r).status)return!1;s(t,r,"taken",a),h.push(o(t,r))}return r.push(h[0]),!0},receiveAttack:(e,t)=>{const a=o(e,t);return"taken"===a.status?(a.takenBy.hit(),s(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(s(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=o(e,t);return"empty"===a.status?(s(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),o=(Number(t.row)+a.row).toString();e.getCell(r,o)&&e.receiveAround(r,o)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),o=(Number(t.row)+a.row).toString();e.getCell(r,o)&&e.receiveAttack(r,o)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:a,canBePlaced:(a,r,s,l)=>{const i="horizontal"===l,n=i?e:t,c=n.indexOf(i?r:s);if(c<0||c+a>n.length)return!1;const d=[];for(let e=0;e<a;e+=1){const t=i?n[c+e]:r,a=i?s:n[c+e];d.push("empty"===o(t,a).status)}return d.every((e=>!0===e))},shipsPlaced:r,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&s(e.col,e.row,"empty")}))}}},t=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},a=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,o=!0,s=!0;const l=(e,t,c,d)=>{if(console.log("start finishingAttack prevHit",d),console.log("start finishingAttack lastHit",{col:t,row:c}),d.row===c)if(o){r=1,console.log("goRight");let s=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)r+=1,s=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,o=!1,l(e,s,c,d))}else{r=1,console.log("goLeft");let s=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(s,c)&&"hit"===e.getCell(s,c).status;)r+=1,s=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(s,c)&&"hit"!==e.getCell(s,c).status&&"miss"!==e.getCell(s,c).status?(e.receiveAttack(s,c),"hit"===e.getCell(s,c).status&&(i(a),n({col:s,row:c})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,o=!0,l(e,s,c,d))}else if(d.col===t)if(s){r=1,console.log("goDown");let o=(Number(c)+r).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)r+=1,o=(Number(c)+r).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status&&(i(a),n({col:t,row:o})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,s=!1,l(e,t,o,d))}else{r=1,console.log("goUp");let o=(Number(c)-r).toString();for(;e.getCell(t,o)&&"hit"===e.getCell(t,o).status;)r+=1,o=(Number(c)-r).toString();e.getCell(t,o)&&"hit"!==e.getCell(t,o).status&&"miss"!==e.getCell(t,o).status?(e.receiveAttack(t,o),"hit"===e.getCell(t,o).status&&(i(a),n({col:t,row:o})),console.log("prevHit",d),console.log("lastHit",a),console.log("range",r),console.log("---------------"),r+=1):(r=1,s=!0,l(e,t,o,d))}},i=e=>{t=e},n=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let o=e.receiveAttack(t,r);return"hit"===o&&(i(a),n({col:t,row:r})),o}return"already shot"},randomAttack:o=>{let s,l;do{s=e[Math.floor(Math.random()*e.length)],l=Math.ceil(10*Math.random()).toString()}while("hit"===o.getCell(s,l).status||"miss"===o.getCell(s,l).status);if("hit"!==o.getCell(s,l).status&&"miss"!==o.getCell(s,l).status){const e=o.receiveAttack(s,l);return"hit"===o.getCell(s,l).status&&(i(a),n({col:s,row:l}),console.log("---------------"),console.log("randomAttack prevHit",t),console.log("randomAttack lastHit",a),console.log("randomAttack range",r)),{result:e,col:s,row:l}}return{result:"already shot",col:s,row:l}},followupAttack:(e,o,s)=>{const l=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((t=>{const a=String.fromCharCode(o.charCodeAt(0)+t.col),r=(Number(s)+t.row).toString(),l=e.getCell(a,r);return!(!l||"miss"===l.status||"hit"===l.status)}));if(l.length>0){const c=l[Math.floor(Math.random()*l.length)],d=String.fromCharCode(o.charCodeAt(0)+c.col),u=(Number(s)+c.row).toString();e.receiveAttack(d,u),r=1,"hit"===e.getCell(d,u).status&&(i(a),n({col:d,row:u}),console.log("---------------"),console.log("followupAttack prevHit",t),console.log("followupAttack lastHit",a),console.log("followupAttack range",r))}else console.log("Nie ma dostępnych kierunków do ataku")},finishingAttack:l,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:i,setLastHit:n}};var r=function(e,t,a,r){return new(a||(a=Promise))((function(o,s){function l(e){try{n(r.next(e))}catch(e){s(e)}}function i(e){try{n(r.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((r=r.apply(e,t||[])).next())}))};const o=(()=>{const e=document.querySelector("#wrapper"),t=document.createElement("div");t.id="boards",e.prepend(t);const a=document.querySelector("#playerVsComputer"),o=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),l=document.querySelector("#start"),i=document.querySelector("#randomPlacement"),c=[a,o,s,l,i],d=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},u=e=>{let t;e===n.humanGameboard?t="firstBoard":e===n.computerGameboard?t="secondBoard":e===n.tempBoard&&(t="tempBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",d(e,a)},h=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},m=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&r(void 0,void 0,void 0,(function*(){p(!0),c.forEach((e=>e.disabled=!0)),a.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),a.textContent="Player vs Computer",c.forEach((e=>e.disabled=!1)),p(!1)})),e===s&&r(void 0,void 0,void 0,(function*(){p(!0),c.forEach((e=>e.disabled=!0)),s.textContent="Starting...",yield new Promise((e=>setTimeout(e,1e3))),s.textContent="Computer vs Computer",c.forEach((e=>e.disabled=!1)),p(!1)})),n.restart())},p=e=>{document.documentElement.classList.toggle("wait",e)},f=(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),o=t.takenBy.size,s=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${o}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const l=()=>{s?s&&(a.style.width=n/16+"rem",a.style.height=o*(n/16)+"rem"):(a.style.width=o*(n/16)+"rem",a.style.height=n/16+"rem")};let i,n=document.querySelector(".board .cell").getBoundingClientRect().width;l(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,l()})),"first"===e?i="firstBoard":"temp"===e&&(i="tempBoard");document.querySelector(`#${i} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},g=(e,t,a)=>{let o,s,l,i,c=0,d=0,h=[];const m={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},p=document.querySelector("#firstBoard"),v=document.querySelector("#tempBoard"),w=p.querySelectorAll(".cell"),S=v.querySelectorAll(".cell"),B=[];for(let e of w)e.classList.contains("taken")||B.push(e);for(let e of S)e.classList.contains("taken")||B.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",C),e.addEventListener("mouseup",k),e.addEventListener("dragstart",L),e.addEventListener("dragend",E),e.addEventListener("contextmenu",V),B.forEach((e=>{e.addEventListener("contextmenu",q)}))}));let y=null;function C(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let o=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),s=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));o.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),s.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),g(e,t,n.humanShips)}function k(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),g(e,t,n.humanShips)}function L(a){return r(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const r=a.target;r.style.visibility="hidden",this.classList.add("dragging"),o=r.getAttribute("data-name"),s=Number(r.getAttribute("data-size")),c=a.offsetX,d=a.offsetY,l=m[o],i=l.isVertical?"vertical":"horizontal","firstBoard"===r.closest(".board").id&&e.removeShip(l,e),"tempBoard"===r.closest(".board").id&&t.removeShip(l,t)}))}function b(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let r=l.isVertical?t+10*e:t+e;w[r]&&(a.push(w[r]),h.push(w[r]))}H(a)&&(a.forEach((e=>{e.classList.add("highlight")})),y||(y=z(h,s)))}if("tempBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(d/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let r=l.isVertical?t+10*e:t+e;S[r]&&(a.push(S[r]),h.push(S[r]))}H(a)&&(a.forEach((e=>{e.classList.add("highlight")})),y||(y=z(h,s)))}}}function A(){h.forEach((e=>{e.classList.remove("highlight")})),h=[]}function P(a){h.forEach((e=>{e.classList.remove("highlight")}));const r=z(h,s),o=a.target;"firstBoard"===o.closest(".board").id&&l&&null!==y&&(e.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,i)?(e.placeShip(l,r[0].dataset.col,r[0].dataset.row,i),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(l,y[0].dataset.col,y[0].dataset.row,i),e.reserveSpace(e,y[0].dataset.col,y[0].dataset.row))),"tempBoard"===o.closest(".board").id&&l&&null!==y&&(t.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,i)?(t.placeShip(l,r[0].dataset.col,r[0].dataset.row,i),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(l,y[0].dataset.col,y[0].dataset.row,i),t.reserveSpace(t,y[0].dataset.col,y[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),g(e,t,n.humanShips),y=null}function E(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===h.length&&("firstBoard"===r.closest(".board").id?y&&e.canBePlaced(l.size,y[0].dataset.col,y[0].dataset.row,i)&&(e.placeShip(l,y[0].dataset.col,y[0].dataset.row,i),e.reserveSpace(e,y[0].dataset.col,y[0].dataset.row),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),g(e,t,n.humanShips)):"tempBoard"===r.closest(".board").id&&y&&t.canBePlaced(l.size,y[0].dataset.col,y[0].dataset.row,i)&&(t.placeShip(l,y[0].dataset.col,y[0].dataset.row,i),t.reserveSpace(t,y[0].dataset.col,y[0].dataset.row),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),g(e,t,n.humanShips)))}function H(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===s&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function z(e,t){return e.slice(Math.min(e.length-t,0))}function V(a){a.preventDefault();const r=a.target;o=r.getAttribute("data-name"),s=Number(r.getAttribute("data-size")),l=m[o];const c=l,d=t.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===o));"firstBoard"===r.closest(".board").id&&(e.removeShip(l,e),e.removeReservedSpace(e)),"tempBoard"===r.closest(".board").id&&(t.removeShip(l,t),t.removeReservedSpace(t)),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),c.rotate(),i=c.isVertical?"vertical":"horizontal",t.canBePlaced(c.size,d[0].col,d[0].row,i)||(c.rotate(),i=c.isVertical?"vertical":"horizontal"),t.placeShip(c,d[0].col,d[0].row,i),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),u(e),u(t),f("first",e.shipsPlaced),f("temp",t.shipsPlaced),g(e,t,n.humanShips)}function q(e){e.preventDefault()}w.forEach(((e,t)=>{e.addEventListener("dragover",b(t)),e.addEventListener("dragleave",A),e.addEventListener("drop",P)})),S.forEach(((e,t)=>{e.addEventListener("dragover",b(t)),e.addEventListener("dragleave",A),e.addEventListener("drop",P)}))};return a.addEventListener("click",(()=>m(a,s))),s.addEventListener("click",(()=>m(s,a))),o.addEventListener("click",(()=>r(void 0,void 0,void 0,(function*(){p(!0),c.forEach((e=>e.disabled=!0)),o.textContent="Restarting...",yield n.newGame(),o.textContent="New Game",c.forEach((e=>e.disabled=!1)),p(!1)})))),l.addEventListener("click",(()=>n.start())),i.addEventListener("click",(()=>{n.tempBoard.clearBoard(),u(n.tempBoard),n.randomizeShipsPlacement("first",n.humanGameboard),g(n.humanGameboard,n.tempBoard,n.humanShips)})),{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===n.humanGameboard?a.id="firstBoard":e===n.computerGameboard?a.id="secondBoard":e===n.tempBoard&&(a.id="tempBoard"),d(e,a),t.append(a)},refreshBoard:u,handleUserInput:()=>r(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(h(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:s,waiting:p,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:f,dragAndDrop:g}})(),s=o;var l=function(e,t,a,r){return new(a||(a=Promise))((function(o,s){function l(e){try{n(r.next(e))}catch(e){s(e)}}function i(e){try{n(r.throw(e))}catch(e){s(e)}}function n(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}n((r=r.apply(e,t||[])).next())}))};const i=(()=>{const r=e(),o=e(),n=e(),c=a(),d=a();let u=!0,h=t("Carrier"),m=t("Battleship"),p=t("Destroyer"),f=t("Submarine"),g=t("PatrolBoat");const v=[h,m,p,f,g],w=()=>(o.allSunk(o)||!!r.allSunk(r))&&(s.removeBoardPointer(),!0),S=e=>{let t;if(e===r?t=d:e===o&&(t=c),e.hitButNotSunk(e)){if(null!==t.getPrevHit()&&null!==t.getLastHit()&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount>=2&&e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount<=4){if(t.finishingAttack(e,t.getLastHit().col,t.getLastHit().row,t.getPrevHit()),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),w())return}else if(1===e.getCell(t.getLastHit().col,t.getLastHit().row).takenBy.hitCount&&(t.followupAttack(e,t.getLastHit().col,t.getLastHit().row),e.sinkShip(e,t.getLastHit().col,t.getLastHit().row),w()))return}else{const{col:a,row:r}=t.randomAttack(e);if("hit"===e.getCell(a,r).status&&(t.setPrevHit(t.getLastHit()),t.setLastHit({col:a,row:r})),"hit"===e.getCell(a,r).status&&e.getCell(a,r).takenBy.isSunk()&&(e.sinkShip(e,a,r),t.setPrevHit(null),t.setLastHit(null),w()))return}},B=(e,a)=>{a.clearBoard(),(e=>{let a;e===r?(h=t("Carrier"),m=t("Battleship"),p=t("Destroyer"),f=t("Submarine"),g=t("PatrolBoat"),a=[h,m,p,f,g]):e===o&&(a=[t("Carrier"),t("Battleship"),t("Destroyer"),t("Submarine"),t("PatrolBoat")]);i.humanShips.length=0;const s=["A","B","C","D","E","F","G","H","I","J"],l=()=>s[Math.floor(Math.random()*s.length)],n=()=>Math.ceil(10*Math.random()).toString(),c=()=>Math.random()>.5?"horizontal":"vertical";a.forEach((t=>{let a=l(),r=n(),o=c(),s=e.canBePlaced(t.size,a,r,o);for(;!s;)a=l(),r=n(),o=c(),s=e.canBePlaced(t.size,a,r,o);s&&(e.placeShip(t,a,r,o),e.reserveSpace(e,a,r)),i.humanShips.push(t)}))})(a),s.refreshBoard(a),"first"===e&&s.createShipOverlay("first",a.shipsPlaced)},y=()=>{s.cVcBtn.classList.contains("selected")&&(B("first",r),B("second",o),u=!1,l(void 0,void 0,void 0,(function*(){s.removeBoardPointer();let e=!0;for(;!w()&&!u;){if(s.waiting(!0),e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;S(r),s.refreshBoard(r),e=!1}if(w()||u)break;if(!e){if(yield new Promise((e=>setTimeout(e,1e3))),!s.cVcBtn.classList.contains("selected")||u)break;S(o),s.refreshBoard(o),e=!0}}u=!1,s.waiting(!1)})))},C=()=>{u=!0,c.setPrevHit(null),c.setLastHit(null),d.setPrevHit(null),d.setLastHit(null),r.clearBoard(),o.clearBoard(),s.refreshBoard(r),s.refreshBoard(o),y()};return{init:()=>{s.renderBoard(r),s.renderBoard(n),n.placeShip(h,"A","1","horizontal"),n.placeShip(m,"A","3","horizontal"),n.placeShip(p,"A","5","horizontal"),n.placeShip(f,"A","7","horizontal"),n.placeShip(g,"A","9","vertical"),n.reserveSpace(n,"A","1"),n.reserveSpace(n,"A","3"),n.reserveSpace(n,"A","5"),n.reserveSpace(n,"A","7"),n.reserveSpace(n,"A","9"),s.refreshBoard(n),s.createShipOverlay("temp",n.shipsPlaced),s.dragAndDrop(r,n,v),y()},humanGameboard:r,computerGameboard:o,tempBoard:n,restart:C,newGame:()=>l(void 0,void 0,void 0,(function*(){u=!0,yield new Promise((e=>setTimeout(e,1e3))),u=!1,C()})),start:()=>{B("second",o),u=!1,l(void 0,void 0,void 0,(function*(){let e=!0;for(;!w()&&!u;){if(e){s.setBoardPointer("player"),s.waiting(!1);const{col:t,row:a}=yield s.handleUserInput();c.attack(o,t,a),o.sinkShip(o,t,a),s.refreshBoard(o),e=!1}if(w()||u)break;if(!e){if(s.setBoardPointer("computer"),s.waiting(!0),yield new Promise((e=>setTimeout(e,1e3))),!s.pVcBtn.classList.contains("selected")||u)break;S(r),s.refreshBoard(r),e=!0}}u=!1,s.waiting(!1)}))},randomizeShipsPlacement:B,humanShips:v}})(),n=i;n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,