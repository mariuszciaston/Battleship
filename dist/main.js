(()=>{"use strict";const e=()=>{const e=["A","B","C","D","E","F","G","H","I","J"],r=["1","2","3","4","5","6","7","8","9","10"],s=[],o=[],i=((()=>{for(let t=0;t<10;t+=1){s[t]=[];for(let a=0;a<10;a+=1)s[t][a]={col:e[a],row:r[t],status:"empty",takenBy:null}}})(),(t,a)=>{const o=e.indexOf(t),i=r.indexOf(a);return-1===o||-1===i?null:s[i][o]}),l=(t,a,o,i)=>{const l=e.indexOf(t),n=r.indexOf(a);return-1===l||-1===n?null:(s[n][l].status=o,i&&(s[n][l].takenBy=i),s[n][l])};return{clearBoard:()=>{for(let e=0;e<10;e+=1)for(let t=0;t<10;t+=1)s[e][t].status="empty",s[e][t].takenBy=void 0;o.length=0},getCell:i,setCell:l,removeShip:(e,r)=>{r.array.flat().forEach((s=>{let i;"taken"===s.status&&s.takenBy.name===e.name&&(s.status="empty",s.takenBy=null),o.forEach((e=>{null===e.takenBy&&o.splice(o.indexOf(e),1)})),r===t?i="firstBoard":r===a&&(i="secondBoard");document.querySelectorAll(`#${i} .cell`).forEach((t=>{t.classList.contains("taken")&&t.getAttribute("data-shipName")===e.name.toLowerCase()&&(t.classList.remove("taken"),t.classList.add("empty"),t.removeAttribute("data-shipName"))}))}))},placeShip:(t,a,s,n)=>{t.isVertical="horizontal"!==n;const c="horizontal"===n,d=c?e:r,u=d.indexOf(c?a:s);let h=[];if(u<0||u+t.size>d.length)return!1;for(let e=0;e<t.size;e+=1){const r=c?d[u+e]:a,o=c?s:d[u+e];if("empty"!==i(r,o).status)return!1;l(r,o,"taken",t),h.push(i(r,o))}return o.push(h[0]),!0},receiveAttack:(e,t)=>{const a=i(e,t);return"taken"===a.status?(a.takenBy.hit(),l(e,t,"hit"),a.status):"empty"===a.status||"reserved"===a.status?(l(e,t,"miss"),a.status):null},receiveAround:(e,t)=>{const a=i(e,t);return"empty"===a.status?(l(e,t,"reserved"),a.status):null},reserveSpace:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAround(r,s)}))}))}},hitButNotSunk:e=>e.array.flat().some((e=>"hit"===e.status&&!1===e.takenBy.isSunk())),sinkShip:(e,t,a)=>{const r=e.getCell(t,a);if(r&&r.takenBy&&r.takenBy.isSunk()){e.array.flat().filter((e=>e.takenBy&&e.takenBy.name===r.takenBy.name)).forEach((t=>{[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0},{col:-1,row:-1},{col:-1,row:1},{col:1,row:-1},{col:1,row:1}].forEach((a=>{const r=String.fromCharCode(t.col.charCodeAt(0)+a.col),s=(Number(t.row)+a.row).toString();e.getCell(r,s)&&e.receiveAttack(r,s)}))}))}},allSunk:e=>{let t=e.array.flat().filter((e=>e.takenBy));return!!(t.length>0&&t.every((e=>e.takenBy.isSunk())))},array:s,canBePlaced:(t,a,s,o)=>{const l="horizontal"===o,n=l?e:r,c=n.indexOf(l?a:s);if(c<0||c+t>n.length)return!1;const d=[];for(let e=0;e<t;e+=1){const t=l?n[c+e]:a,r=l?s:n[c+e];d.push("empty"===i(t,r).status)}return d.every((e=>!0===e))},shipsPlaced:o,removeReservedSpace:e=>{e.array.flat().forEach((e=>{"reserved"===e.status&&l(e.col,e.row,"empty")}))}}},t=e(),a=e(),r=e=>{let t;return"Carrier"===e&&(t=5),"Battleship"===e&&(t=4),"Destroyer"===e&&(t=3),"Submarine"===e&&(t=3),"PatrolBoat"===e&&(t=2),{name:e,size:t,hitCount:0,isVertical:!1,rotate(){this.isVertical=!this.isVertical},hit(){this.hitCount+=1},isSunk(){return this.hitCount===t}}},s=()=>{const e=["A","B","C","D","E","F","G","H","I","J"];let t=null,a=null;let r=1,s=!0,o=!0;const i=(e,t,c,d)=>{if(d.row===c)if(s){r=1;let o=String.fromCharCode(t.charCodeAt(0)+r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)+r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!1,i(e,o,c,d))}else{r=1;let o=String.fromCharCode(t.charCodeAt(0)-r);for(;e.getCell(o,c)&&"hit"===e.getCell(o,c).status;)r+=1,o=String.fromCharCode(t.charCodeAt(0)-r);e.getCell(o,c)&&"hit"!==e.getCell(o,c).status&&"miss"!==e.getCell(o,c).status?(e.receiveAttack(o,c),"hit"===e.getCell(o,c).status&&(l(a),n({col:o,row:c})),r+=1):(r=1,s=!0,i(e,o,c,d))}else if(d.col===t)if(o){r=1;let s=(Number(c)+r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)+r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!1,i(e,t,s,d))}else{r=1;let s=(Number(c)-r).toString();for(;e.getCell(t,s)&&"hit"===e.getCell(t,s).status;)r+=1,s=(Number(c)-r).toString();e.getCell(t,s)&&"hit"!==e.getCell(t,s).status&&"miss"!==e.getCell(t,s).status?(e.receiveAttack(t,s),"hit"===e.getCell(t,s).status&&(l(a),n({col:t,row:s})),r+=1):(r=1,o=!0,i(e,t,s,d))}},l=e=>{t=e},n=e=>{a=e};return{attack:(e,t,r)=>{if("hit"!==e.getCell(t,r).status&&"miss"!==e.getCell(t,r).status){let s=e.receiveAttack(t,r);return"hit"===s&&(l(a),n({col:t,row:r})),s}return"already shot"},randomAttack:t=>{let r,s;do{r=e[Math.floor(Math.random()*e.length)],s=Math.ceil(10*Math.random()).toString()}while("hit"===t.getCell(r,s).status||"miss"===t.getCell(r,s).status);if("hit"!==t.getCell(r,s).status&&"miss"!==t.getCell(r,s).status){const e=t.receiveAttack(r,s);return"hit"===t.getCell(r,s).status&&(l(a),n({col:r,row:s})),{result:e,col:r,row:s}}return{result:"already shot",col:r,row:s}},followupAttack:(e,t,s)=>{const o=[{col:0,row:-1},{col:0,row:1},{col:-1,row:0},{col:1,row:0}].filter((a=>{const r=String.fromCharCode(t.charCodeAt(0)+a.col),o=(Number(s)+a.row).toString(),i=e.getCell(r,o);return!(!i||"miss"===i.status||"hit"===i.status)}));if(o.length>0){const i=o[Math.floor(Math.random()*o.length)],c=String.fromCharCode(t.charCodeAt(0)+i.col),d=(Number(s)+i.row).toString();e.receiveAttack(c,d),r=1,"hit"===e.getCell(c,d).status&&(l(a),n({col:c,row:d}))}},finishingAttack:i,prevHit:t,lastHit:a,getPrevHit:()=>t,getLastHit:()=>a,setPrevHit:l,setLastHit:n}};var o=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const i=(e,t,a)=>{let r,s,l,n,c=0,u=0,h=[];const f={carrier:a[0],battleship:a[1],destroyer:a[2],submarine:a[3],patrolboat:a[4]},p=document.querySelector("#firstBoard"),v=document.querySelector("#secondBoard"),g=p.querySelectorAll(".cell"),S=v.querySelectorAll(".cell"),y=[];for(let e of g)e.classList.contains("taken")||y.push(e);for(let e of S)e.classList.contains("taken")||y.push(e);document.querySelectorAll(".draggable").forEach((e=>{e.addEventListener("mousedown",w),e.addEventListener("mouseup",C),e.addEventListener("dragstart",b),e.addEventListener("dragend",E),e.addEventListener("contextmenu",M),y.forEach((e=>{e.addEventListener("contextmenu",V)}))}));let B=null;function w(a){e.removeReservedSpace(e),t.removeReservedSpace(t);const r=a.target.getAttribute("data-name");let s=e.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase())),o=t.shipsPlaced.filter((e=>r!==e.takenBy.name.toLowerCase()));s.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),o.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d.refreshBoard(e),d.refreshBoard(t),d.createShipOverlay("first",e.shipsPlaced),d.createShipOverlay("second",t.shipsPlaced),i(e,t,m.humanShips)}function C(){e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d.refreshBoard(e),d.refreshBoard(t),d.createShipOverlay("first",e.shipsPlaced),d.createShipOverlay("second",t.shipsPlaced),i(e,t,m.humanShips)}function b(a){return o(this,void 0,void 0,(function*(){yield new Promise((e=>setTimeout(e,0)));const o=a.target;o.style.visibility="hidden",this.classList.add("dragging"),r=o.getAttribute("data-name"),s=Number(o.getAttribute("data-size")),c=a.offsetX,u=a.offsetY,l=f[r],n=l.isVertical?"vertical":"horizontal","firstBoard"===o.closest(".board").id&&e.removeShip(l,e),"secondBoard"===o.closest(".board").id&&t.removeShip(l,t)}))}function L(e){return function(t){const a=t.target;if("firstBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(u/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let r=l.isVertical?t+10*e:t+e;g[r]&&(a.push(g[r]),h.push(g[r]))}A(a)&&(a.forEach((e=>{e.classList.add("highlight")})),B||(B=H(h,s)))}if("secondBoard"===a.closest(".board").id&&(t.preventDefault(),l)){let t=e-(l.isVertical?10*Math.floor(u/this.offsetHeight):Math.floor(c/this.offsetWidth));const a=[];for(let e=0;e<s;e++){let r=l.isVertical?t+10*e:t+e;S[r]&&(a.push(S[r]),h.push(S[r]))}A(a)&&(a.forEach((e=>{e.classList.add("highlight")})),B||(B=H(h,s)))}}}function k(){h.forEach((e=>{e.classList.remove("highlight")})),h=[]}function P(a){h.forEach((e=>{e.classList.remove("highlight")}));const r=H(h,s),o=a.target;"firstBoard"===o.closest(".board").id&&l&&null!==B&&(e.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,n)?(e.placeShip(l,r[0].dataset.col,r[0].dataset.row,n),e.reserveSpace(e,r[0].dataset.col,r[0].dataset.row)):(e.placeShip(l,B[0].dataset.col,B[0].dataset.row,n),e.reserveSpace(e,B[0].dataset.col,B[0].dataset.row))),"secondBoard"===o.closest(".board").id&&l&&null!==B&&(t.canBePlaced(l.size,r[0].dataset.col,r[0].dataset.row,n)?(t.placeShip(l,r[0].dataset.col,r[0].dataset.row,n),t.reserveSpace(t,r[0].dataset.col,r[0].dataset.row)):(t.placeShip(l,B[0].dataset.col,B[0].dataset.row,n),t.reserveSpace(t,B[0].dataset.col,B[0].dataset.row))),e.removeReservedSpace(e),t.removeReservedSpace(t),e.shipsPlaced.forEach((t=>{e.reserveSpace(e,t.col,t.row)})),t.shipsPlaced.forEach((e=>{t.reserveSpace(t,e.col,e.row)})),d.refreshBoard(e),d.refreshBoard(t),d.createShipOverlay("first",e.shipsPlaced),d.createShipOverlay("second",t.shipsPlaced),i(e,t,m.humanShips),d.canBeStarted(),d.setStartMessage(),B=null}function E(a){const r=a.target;r.style.visibility="visible",this.classList.remove("dragging"),0===h.length&&("firstBoard"===r.closest(".board").id?B&&e.canBePlaced(l.size,B[0].dataset.col,B[0].dataset.row,n)&&(e.placeShip(l,B[0].dataset.col,B[0].dataset.row,n),e.reserveSpace(e,B[0].dataset.col,B[0].dataset.row),d.refreshBoard(e),d.refreshBoard(t),d.createShipOverlay("first",e.shipsPlaced),d.createShipOverlay("second",t.shipsPlaced),i(e,t,m.humanShips)):"secondBoard"===r.closest(".board").id&&B&&t.canBePlaced(l.size,B[0].dataset.col,B[0].dataset.row,n)&&(t.placeShip(l,B[0].dataset.col,B[0].dataset.row,n),t.reserveSpace(t,B[0].dataset.col,B[0].dataset.row),d.refreshBoard(e),d.refreshBoard(t),d.createShipOverlay("first",e.shipsPlaced),d.createShipOverlay("second",t.shipsPlaced),i(e,t,m.humanShips)))}function A(e){return e.every((e=>e.classList.contains("empty")))&&(e.every((t=>t.dataset.col===e[0].dataset.col))||e.every((t=>t.dataset.row===e[0].dataset.row)))&&e.length===s&&e.every((e=>e.dataset.col>="A"&&e.dataset.col<="J"))&&e.every((e=>Number(e.dataset.row)>=1&&Number(e.dataset.row)<=10))}function H(e,t){return e.slice(Math.min(e.length-t,0))}function M(a){a.preventDefault();const o=a.target;let c;"firstBoard"===o.closest(".board").id&&(c=e),"secondBoard"===o.closest(".board").id&&(c=t),r=o.getAttribute("data-name"),s=Number(o.getAttribute("data-size")),l=f[r];const u=l,h=c.shipsPlaced.filter((e=>e.takenBy.name.toLowerCase()===r));c.removeShip(l,c),c.removeReservedSpace(c),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),u.rotate(),n=u.isVertical?"vertical":"horizontal",c.canBePlaced(u.size,h[0].col,h[0].row,n)||(u.rotate(),n=u.isVertical?"vertical":"horizontal"),c.placeShip(u,h[0].col,h[0].row,n),c.shipsPlaced.forEach((e=>{c.reserveSpace(c,e.col,e.row)})),d.refreshBoard(c),d.createShipOverlay("first",e.shipsPlaced),d.createShipOverlay("second",t.shipsPlaced),i(e,t,m.humanShips),d.canBeStarted()&&d.fillCells("second")}function V(e){e.preventDefault()}g.forEach(((e,t)=>{e.addEventListener("dragover",L(t)),e.addEventListener("dragleave",k),e.addEventListener("drop",P)})),S.forEach(((e,t)=>{e.addEventListener("dragover",L(t)),e.addEventListener("dragleave",k),e.addEventListener("drop",P)}))},l=i;var n=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const c=(()=>{const e=document.querySelector("#messageBox p"),t=document.querySelector("#boards"),a=document.querySelector("#playerVsComputer"),r=document.querySelector("#newGame"),s=document.querySelector("#computerVsComputer"),o=document.querySelector("#start"),i=document.querySelector("#randomPlacement"),d=[a,r,s,o,i],u=document.getElementsByName("speed"),h=(e,t)=>{e.array.forEach((e=>{e.forEach((e=>{const a=(e=>{const t=document.createElement("div");return t.classList.add("cell"),t.classList.add(e.status),t.setAttribute("data-col",e.col),t.setAttribute("data-row",e.row),e.takenBy&&t.setAttribute("data-shipName",e.takenBy.name.toLowerCase()),t})(e);t.append(a)}))}))},f=e=>{let t;e===m.humanGameboard?t="firstBoard":e===m.computerGameboard&&(t="secondBoard");const a=document.querySelector(`#${t}`);a.innerHTML="",h(e,a)},p=e=>{if(!e.target.classList.contains("hit")&&!e.target.classList.contains("miss")){return{col:e.target.getAttribute("data-col"),row:e.target.getAttribute("data-row")}}},v=(e,t)=>{t.classList.remove("selected"),e.classList.contains("selected")||(e.classList.add("selected"),e===a&&n(void 0,void 0,void 0,(function*(){L("first"),g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,b()))),d.forEach((e=>e.disabled=!1)),g(!1),S(),y()})),e===s&&n(void 0,void 0,void 0,(function*(){g(!0),d.forEach((e=>e.disabled=!0)),yield new Promise((e=>setTimeout(e,b()))),d.forEach((e=>e.disabled=!1)),g(!1),o.disabled=!0,i.disabled=!0,s.disabled=!0})),m.restart(),w())},g=e=>{document.documentElement.classList.toggle("wait",e)},S=()=>5===m.humanGameboard.shipsPlaced.length&&0===m.computerGameboard.shipsPlaced.length?(L("second"),o.disabled=!1,!0):(o.disabled=!0,!1),y=()=>{const t="Use 'Random Placement' button, then press Start!",a="Drag and drop ships onto the left board or use 'Random Placement' button. Right click to rotate. When ready, press Start!";e.textContent!==t&&e.textContent!==a&&"Restarting..."!==e.textContent||(e.textContent=t,window.matchMedia("(min-width: 1024px)").matches&&(e.textContent=a))},B=()=>{S()&&(e.textContent="You can now begin the game. Press start!")},w=()=>{e.textContent="Restarting..."};a.addEventListener("click",(()=>{L("first"),v(a,s);document.querySelector("#secondBoard").classList.remove("start"),k("first"),o.disabled=!0,a.disabled=!0})),s.addEventListener("click",(()=>{L("first"),L("second"),v(s,a);const e=document.querySelector("#secondBoard");e.classList.remove("hide"),e.classList.add("start"),Promise.all([k("first"),k("second")]),o.disabled=!0,i.disabled=!0,s.disabled=!0})),r.addEventListener("click",(()=>n(void 0,void 0,void 0,(function*(){L("first"),s.classList.contains("selected")&&(L("second"),o.disabled=!0,i.disabled=!0,s.disabled=!0),c.removeBoardPointer(),yield n(void 0,void 0,void 0,(function*(){w(),g(!0),d.forEach((e=>e.disabled=!0)),yield m.newGame(),d.forEach((e=>e.disabled=!1)),g(!1),S(),a.classList.contains("selected")&&y()}));const e=document.querySelector("#secondBoard");e.classList.remove("hide"),a.classList.contains("selected")&&(e.classList.remove("start"),k("first"),o.disabled=!0,a.disabled=!0),s.classList.contains("selected")&&(e.classList.add("start"),i.disabled=!0,Promise.all([k("first"),k("second")]),o.disabled=!0,i.disabled=!0,s.disabled=!0)})))),o.addEventListener("click",(()=>{m.start();document.querySelector("#firstBoard").classList.add("hide");const e=document.querySelector("#secondBoard");e.classList.add("hide"),e.classList.add("start"),k("second"),o.disabled=!0,i.disabled=!0})),i.addEventListener("click",(()=>{m.computerGameboard.clearBoard(),f(m.computerGameboard),m.randomizeShipsPlacement("first",m.humanGameboard),l(m.humanGameboard,m.computerGameboard,m.humanShips),S(),B(),L("second")}));let C=1e3;u.forEach((e=>{e.addEventListener("click",(()=>{let t=e;t.checked&&(C=Number(t.value))}))}));const b=()=>C;window.addEventListener("resize",y);const L=e=>{let t;"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));t.querySelectorAll(".cell").forEach((e=>{e.classList.add("filled")}))},k=e=>n(void 0,void 0,void 0,(function*(){let t;g(!0),"first"===e?t=document.querySelector("#firstBoard"):"second"===e&&(t=document.querySelector("#secondBoard"));const a=t.querySelectorAll(".cell");a.forEach((e=>{e.classList.add("filled")})),yield new Promise((e=>{a.forEach(((t,r)=>{setTimeout((()=>{t.classList.remove("filled"),r===a.length-1&&e()}),b()/120*r)}))})),g(!1)}));return{renderBoard:e=>{const a=document.createElement("div");a.classList.add("board"),e===m.humanGameboard?a.id="firstBoard":e===m.computerGameboard&&(a.id="secondBoard"),h(e,a),t.append(a)},refreshBoard:f,handleUserInput:()=>n(void 0,void 0,void 0,(function*(){const e=document.querySelectorAll("#secondBoard .cell");let t;do{t=yield new Promise((t=>{e.forEach((e=>{e.classList.contains("hit")||e.classList.contains("miss")||e.addEventListener("click",(e=>{t(p(e))}),{once:!0})}))}))}while(!t);return{col:t.col.toString(),row:t.row.toString()}})),pVcBtn:a,cVcBtn:s,waiting:g,setBoardPointer:e=>{const t=document.querySelector("#secondBoard");"player"===e?t.classList.add("boardOutline"):"computer"===e&&t.classList.remove("boardOutline")},removeBoardPointer:()=>{document.querySelector("#secondBoard").classList.remove("boardOutline")},createShipOverlay:(e,t)=>{t.forEach((t=>{const a=document.createElement("div"),r=t.takenBy.name.toLowerCase(),s=t.takenBy.size,o=t.takenBy.isVertical;a.classList.add("ship",r),a.setAttribute("data-size",`${s}`),a.setAttribute("data-name",`${r}`),a.setAttribute("draggable","true"),a.classList.add("draggable");const i=()=>{const e=document.querySelector("html"),t=parseFloat(window.getComputedStyle(e,null).getPropertyValue("font-size"));o?o&&(a.style.width=n/t+"rem",a.style.height=s*(n/t)+"rem"):(a.style.width=s*(n/t)+"rem",a.style.height=n/t+"rem")};let l,n=document.querySelector(".board .cell").getBoundingClientRect().width;i(),window.addEventListener("resize",(function(){n=document.querySelector(".board .cell").getBoundingClientRect().width,i()})),"first"===e?l="firstBoard":"second"===e&&(l="secondBoard");document.querySelector(`#${l} .cell[data-col="${t.col}"][data-row="${t.row}"]`).appendChild(a)}))},canBeStarted:S,setInitMessage:y,setStartMessage:B,setTurnMessagePvC:t=>{e.textContent=t?"Player's turn. Take aim and attack!":"Computer's turn. The shot is coming!"},setTurnMessageCvC:t=>{e.textContent=t?"Violet's turn":"Blue's turn"},setGameOverMessagePvC:t=>{"player"===t?e.textContent="Game over, Player wins!":"computer"===t&&(e.textContent="Game over, Computer wins!")},setGameOverMessageCvC:t=>{"player"===t?e.textContent="Game over, Blue Computer wins!":"computer"===t&&(e.textContent="Game over, Violet Computer wins!")},setRestartMessage:w,getSpeedValue:b,fillCells:L,unFillCells:k}})(),d=c;var u=function(e,t,a,r){return new(a||(a=Promise))((function(s,o){function i(e){try{n(r.next(e))}catch(e){o(e)}}function l(e){try{n(r.throw(e))}catch(e){o(e)}}function n(e){var t;e.done?s(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(i,l)}n((r=r.apply(e,t||[])).next())}))};const h=(()=>{const e=s(),o=s();let i=!0,n=r("Carrier"),c=r("Battleship"),m=r("Destroyer"),f=r("Submarine"),p=r("PatrolBoat");const v=[n,c,m,f,p],g=()=>{a.placeShip(n,"A","1","horizontal"),a.placeShip(c,"A","3","horizontal"),a.placeShip(m,"A","5","horizontal"),a.placeShip(f,"A","7","horizontal"),a.placeShip(p,"A","9","horizontal"),a.reserveSpace(a,"A","1"),a.reserveSpace(a,"A","3"),a.reserveSpace(a,"A","5"),a.reserveSpace(a,"A","7"),a.reserveSpace(a,"A","9")},S=()=>a.allSunk(a)?(d.removeBoardPointer(),d.pVcBtn.classList.contains("selected")&&d.setGameOverMessagePvC("player"),d.cVcBtn.classList.contains("selected")&&d.setGameOverMessageCvC("player"),!0):!!t.allSunk(t)&&(d.removeBoardPointer(),d.pVcBtn.classList.contains("selected")&&d.setGameOverMessagePvC("computer"),d.cVcBtn.classList.contains("selected")&&d.setGameOverMessageCvC("computer"),!0),y=r=>{let s;if(r===t?s=o:r===a&&(s=e),r.hitButNotSunk(r)){if(null!==s.getPrevHit()&&null!==s.getLastHit()&&r.getCell(s.getLastHit().col,s.getLastHit().row).takenBy.hitCount>=2&&r.getCell(s.getLastHit().col,s.getLastHit().row).takenBy.hitCount<=4){if(s.finishingAttack(r,s.getLastHit().col,s.getLastHit().row,s.getPrevHit()),r.sinkShip(r,s.getLastHit().col,s.getLastHit().row),S())return}else if(1===r.getCell(s.getLastHit().col,s.getLastHit().row).takenBy.hitCount&&(s.followupAttack(r,s.getLastHit().col,s.getLastHit().row),r.sinkShip(r,s.getLastHit().col,s.getLastHit().row),S()))return}else{const{col:e,row:t}=s.randomAttack(r);if("hit"===r.getCell(e,t).status&&(s.setPrevHit(s.getLastHit()),s.setLastHit({col:e,row:t})),"hit"===r.getCell(e,t).status&&r.getCell(e,t).takenBy.isSunk()&&(r.sinkShip(r,e,t),s.setPrevHit(null),s.setLastHit(null),S()))return}},B=(e,s)=>{s.clearBoard(),(e=>{let s;e===t?(n=r("Carrier"),c=r("Battleship"),m=r("Destroyer"),f=r("Submarine"),p=r("PatrolBoat"),s=[n,c,m,f,p]):e===a&&(s=[r("Carrier"),r("Battleship"),r("Destroyer"),r("Submarine"),r("PatrolBoat")]);h.humanShips.length=0;const o=["A","B","C","D","E","F","G","H","I","J"],i=()=>o[Math.floor(Math.random()*o.length)],l=()=>Math.ceil(10*Math.random()).toString(),d=()=>Math.random()>.5?"horizontal":"vertical";s.forEach((t=>{let a=i(),r=l(),s=d(),o=e.canBePlaced(t.size,a,r,s);for(;!o;)a=i(),r=l(),s=d(),o=e.canBePlaced(t.size,a,r,s);o&&(e.placeShip(t,a,r,s),e.reserveSpace(e,a,r)),h.humanShips.push(t)}))})(s),d.refreshBoard(s),"first"===e&&d.createShipOverlay("first",s.shipsPlaced)},w=()=>{d.cVcBtn.classList.contains("selected")&&(B("first",t),B("second",a),i=!1,u(void 0,void 0,void 0,(function*(){d.removeBoardPointer();let e=!0;for(;!S()&&!i;){if(d.waiting(!0),e){if(d.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,d.getSpeedValue()))),!d.cVcBtn.classList.contains("selected")||i)break;y(t),d.refreshBoard(t),e=!1}if(S()||i)break;if(!e){if(d.setTurnMessageCvC(e),yield new Promise((e=>setTimeout(e,d.getSpeedValue()))),!d.cVcBtn.classList.contains("selected")||i)break;y(a),d.refreshBoard(a),e=!0}}i=!1,d.waiting(!1)})),d.refreshBoard(t))},C=()=>{i=!0,e.setPrevHit(null),e.setLastHit(null),o.setPrevHit(null),o.setLastHit(null),t.clearBoard(),a.clearBoard(),g(),d.refreshBoard(t),d.refreshBoard(a),d.createShipOverlay("second",a.shipsPlaced),l(t,a,v),d.canBeStarted(),w(),v.forEach((e=>{!0===e.isVertical&&(e.isVertical=!1)}))};return{init:()=>{d.setInitMessage(),d.renderBoard(t),d.renderBoard(a),g(),d.refreshBoard(a),d.createShipOverlay("second",a.shipsPlaced),l(t,a,v),d.canBeStarted(),w(),d.unFillCells("first"),d.pVcBtn.disabled=!0},humanGameboard:t,computerGameboard:a,restart:C,newGame:()=>u(void 0,void 0,void 0,(function*(){i=!0,yield new Promise((e=>setTimeout(e,d.getSpeedValue()))),i=!1,C()})),start:()=>{d.refreshBoard(t),B("second",a),i=!1,u(void 0,void 0,void 0,(function*(){let r=!0;for(;!S()&&!i;){if(r){d.setTurnMessagePvC(r),d.setBoardPointer("player"),d.waiting(!1);const{col:t,row:s}=yield d.handleUserInput();e.attack(a,t,s),a.sinkShip(a,t,s),d.refreshBoard(a),r=!1}if(S()||i)break;if(!r){if(d.setTurnMessagePvC(r),d.setBoardPointer("computer"),d.waiting(!0),yield new Promise((e=>setTimeout(e,d.getSpeedValue()))),!d.pVcBtn.classList.contains("selected")||i)break;y(t),d.refreshBoard(t),r=!0}}i=!1,d.waiting(!1)}))},randomizeShipsPlacement:B,humanShips:v}})(),m=h;m.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,